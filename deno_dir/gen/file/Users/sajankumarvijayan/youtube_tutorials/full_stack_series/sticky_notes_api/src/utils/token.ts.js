import { JWT } from '../deps.ts';
import AuthenticationFailed from '../errors/authenticationFailed.ts';
import generateCryptoKey from './generateCryptoKey.ts';
const secretKey = await generateCryptoKey();
class Token {
    create = async (payload) => {
        const token = await JWT.create({
            alg: 'HS512',
            typ: "JWT"
        }, {
            ...payload,
            exp: new Date(Date.now() + 86400 * 1000).getTime()
        }, secretKey);
        return token;
    };
    verify = async (token) => {
        try {
            return await JWT.verify(token, secretKey);
        }
        catch (e) {
            throw new AuthenticationFailed('Provided token is invalid');
        }
    };
}
export default Token;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2pDLE9BQU8sb0JBQW9CLE1BQU0sbUNBQW1DLENBQUE7QUFFcEUsT0FBTyxpQkFBaUIsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLFNBQVMsR0FBRyxNQUFNLGlCQUFpQixFQUFFLENBQUM7QUFFNUMsTUFBTSxLQUFLO0lBRVAsTUFBTSxHQUFHLEtBQUssRUFBaUMsT0FBVSxFQUFFLEVBQUU7UUFDekQsTUFBTSxLQUFLLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUMxQjtZQUNJLEdBQUcsRUFBRSxPQUFPO1lBQ1osR0FBRyxFQUFFLEtBQUs7U0FDYixFQUFFO1lBQ0gsR0FBRyxPQUFPO1lBQ1YsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFO1NBQ3JELEVBQUUsU0FBUyxDQUFDLENBQUE7UUFDYixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDLENBQUE7SUFFRCxNQUFNLEdBQUcsS0FBSyxFQUFFLEtBQWEsRUFBRSxFQUFFO1FBQzdCLElBQUk7WUFDQSxPQUFPLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDN0M7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE1BQU0sSUFBSSxvQkFBb0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1NBQy9EO0lBQ0wsQ0FBQyxDQUFBO0NBQ0o7QUFFRCxlQUFlLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpXVCB9IGZyb20gJy4uL2RlcHMudHMnO1xuaW1wb3J0IEF1dGhlbnRpY2F0aW9uRmFpbGVkIGZyb20gJy4uL2Vycm9ycy9hdXRoZW50aWNhdGlvbkZhaWxlZC50cydcblxuaW1wb3J0IGdlbmVyYXRlQ3J5cHRvS2V5IGZyb20gJy4vZ2VuZXJhdGVDcnlwdG9LZXkudHMnO1xuY29uc3Qgc2VjcmV0S2V5ID0gYXdhaXQgZ2VuZXJhdGVDcnlwdG9LZXkoKTtcblxuY2xhc3MgVG9rZW4ge1xuXG4gICAgY3JlYXRlID0gYXN5bmMgPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihwYXlsb2FkOiBUKSA9PiB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgSldULmNyZWF0ZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhbGc6ICdIUzUxMicsXG4gICAgICAgICAgICAgICAgdHlwOiBcIkpXVFwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAuLi5wYXlsb2FkLFxuICAgICAgICAgICAgZXhwOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgODY0MDAgKiAxMDAwKS5nZXRUaW1lKClcbiAgICAgICAgfSwgc2VjcmV0S2V5KVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgdmVyaWZ5ID0gYXN5bmMgKHRva2VuOiBzdHJpbmcpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBKV1QudmVyaWZ5KHRva2VuLCBzZWNyZXRLZXkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25GYWlsZWQoJ1Byb3ZpZGVkIHRva2VuIGlzIGludmFsaWQnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9rZW47Il19
import { Router, helpers, log } from '../deps.ts';
import NoteService from '../service/noteService.ts';
import validatePayload from '../middleware/validatePayload.ts';
import validateAuthToken from '../middleware/validateAuthToken.ts';
import validateUserStatus from '../middleware/validateUserStatus.ts';
export default () => {
    const router = new Router();
    const noteService = NoteService.getInstance();
    router.use(validateAuthToken);
    router.get('/api/notes', async (ctx) => {
        log.info(`ctx state: `, ctx.state);
        const queryParams = helpers.getQuery(ctx, { mergeParams: true });
        ctx.response.body = await noteService.getNotes(ctx.state.user._id, queryParams);
        ctx.response.status = 200;
    });
    router.get('/api/notes/:note_id', async (ctx) => {
        ctx.response.body = await noteService.getNoteById(ctx.params.note_id, ctx.state.user._id);
        ctx.response.status = 200;
    });
    router.post('/api/notes', validatePayload([
        'description',
        'createdBy'
    ]), validateUserStatus, async (ctx) => {
        const body = await ctx.request.body().value;
        await noteService.create(body);
        ctx.response.status = 201;
    });
    router.put('/api/notes/:note_id', validatePayload(['description']), validateUserStatus, async (ctx) => {
        const body = await ctx.request.body().value;
        await noteService.update({ ...body, userId: ctx.state.user._id }, ctx.params.note_id);
        ctx.response.status = 204;
    });
    router.delete('/api/notes/:note_id', validateUserStatus, async (ctx) => {
        await noteService.delete(ctx.params.note_id, ctx.state.user._id);
        ctx.response.status = 202;
    });
    return router;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJub3Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFJbEQsT0FBTyxXQUFXLE1BQU0sMkJBQTJCLENBQUM7QUFDcEQsT0FBTyxlQUFlLE1BQU0sa0NBQWtDLENBQUM7QUFDL0QsT0FBTyxpQkFBaUIsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRSxPQUFPLGtCQUFrQixNQUFNLHFDQUFxQyxDQUFDO0FBR3JFLGVBQWUsR0FBRyxFQUFFO0lBQ2hCLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7SUFDNUIsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUU5QixNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksRUFDbkIsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ1YsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFakUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsTUFBTSxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNoRixHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUE7SUFFTixNQUFNLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUM1QixLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDVixHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxNQUFNLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUYsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFBO0lBRU4sTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQ3BCLGVBQWUsQ0FBZ0I7UUFDM0IsYUFBYTtRQUNiLFdBQVc7S0FBQyxDQUFDLEVBQ2pCLGtCQUFrQixFQUNsQixLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDVixNQUFNLElBQUksR0FBa0IsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQztRQUMzRCxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFBO0lBRU4sTUFBTSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFDNUIsZUFBZSxDQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQy9DLGtCQUFrQixFQUNsQixLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDVixNQUFNLElBQUksR0FBa0IsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQztRQUMzRCxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RixHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUE7SUFFTixNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNuRSxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyLCBoZWxwZXJzLCBsb2cgfSBmcm9tICcuLi9kZXBzLnRzJztcbmltcG9ydCBDcmVhdGVOb3RlRHRvIGZyb20gJy4uL3R5cGVzL2NyZWF0ZU5vdGUuZHRvLnRzJztcbmltcG9ydCBVcGRhdGVOb3RlRHRvIGZyb20gJy4uL3R5cGVzL3VwZGF0ZU5vdGUuZHRvLnRzJztcblxuaW1wb3J0IE5vdGVTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2Uvbm90ZVNlcnZpY2UudHMnO1xuaW1wb3J0IHZhbGlkYXRlUGF5bG9hZCBmcm9tICcuLi9taWRkbGV3YXJlL3ZhbGlkYXRlUGF5bG9hZC50cyc7XG5pbXBvcnQgdmFsaWRhdGVBdXRoVG9rZW4gZnJvbSAnLi4vbWlkZGxld2FyZS92YWxpZGF0ZUF1dGhUb2tlbi50cyc7XG5pbXBvcnQgdmFsaWRhdGVVc2VyU3RhdHVzIGZyb20gJy4uL21pZGRsZXdhcmUvdmFsaWRhdGVVc2VyU3RhdHVzLnRzJztcblxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gICAgY29uc3Qgcm91dGVyID0gbmV3IFJvdXRlcigpO1xuICAgIGNvbnN0IG5vdGVTZXJ2aWNlID0gTm90ZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcbiAgICByb3V0ZXIudXNlKHZhbGlkYXRlQXV0aFRva2VuKTtcblxuICAgIHJvdXRlci5nZXQoJy9hcGkvbm90ZXMnLFxuICAgICAgICBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgICAgICBsb2cuaW5mbyhgY3R4IHN0YXRlOiBgLCBjdHguc3RhdGUpO1xuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSBoZWxwZXJzLmdldFF1ZXJ5KGN0eCwgeyBtZXJnZVBhcmFtczogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgY3R4LnJlc3BvbnNlLmJvZHkgPSBhd2FpdCBub3RlU2VydmljZS5nZXROb3RlcyhjdHguc3RhdGUudXNlci5faWQsIHF1ZXJ5UGFyYW1zKTtcbiAgICAgICAgICAgIGN0eC5yZXNwb25zZS5zdGF0dXMgPSAyMDA7XG4gICAgICAgIH0pXG5cbiAgICByb3V0ZXIuZ2V0KCcvYXBpL25vdGVzLzpub3RlX2lkJyxcbiAgICAgICAgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAgICAgY3R4LnJlc3BvbnNlLmJvZHkgPSBhd2FpdCBub3RlU2VydmljZS5nZXROb3RlQnlJZChjdHgucGFyYW1zLm5vdGVfaWQsIGN0eC5zdGF0ZS51c2VyLl9pZCk7XG4gICAgICAgICAgICBjdHgucmVzcG9uc2Uuc3RhdHVzID0gMjAwO1xuICAgICAgICB9KVxuXG4gICAgcm91dGVyLnBvc3QoJy9hcGkvbm90ZXMnLFxuICAgICAgICB2YWxpZGF0ZVBheWxvYWQ8Q3JlYXRlTm90ZUR0bz4oW1xuICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgICdjcmVhdGVkQnknXSksXG4gICAgICAgIHZhbGlkYXRlVXNlclN0YXR1cyxcbiAgICAgICAgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYm9keTogQ3JlYXRlTm90ZUR0byA9IGF3YWl0IGN0eC5yZXF1ZXN0LmJvZHkoKS52YWx1ZTtcbiAgICAgICAgICAgIGF3YWl0IG5vdGVTZXJ2aWNlLmNyZWF0ZShib2R5KTtcbiAgICAgICAgICAgIGN0eC5yZXNwb25zZS5zdGF0dXMgPSAyMDE7XG4gICAgICAgIH0pXG5cbiAgICByb3V0ZXIucHV0KCcvYXBpL25vdGVzLzpub3RlX2lkJyxcbiAgICAgICAgdmFsaWRhdGVQYXlsb2FkPFVwZGF0ZU5vdGVEdG8+KFsnZGVzY3JpcHRpb24nXSksXG4gICAgICAgIHZhbGlkYXRlVXNlclN0YXR1cyxcbiAgICAgICAgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYm9keTogVXBkYXRlTm90ZUR0byA9IGF3YWl0IGN0eC5yZXF1ZXN0LmJvZHkoKS52YWx1ZTtcbiAgICAgICAgICAgIGF3YWl0IG5vdGVTZXJ2aWNlLnVwZGF0ZSh7IC4uLmJvZHksIHVzZXJJZDogY3R4LnN0YXRlLnVzZXIuX2lkIH0sIGN0eC5wYXJhbXMubm90ZV9pZCk7XG4gICAgICAgICAgICBjdHgucmVzcG9uc2Uuc3RhdHVzID0gMjA0O1xuICAgICAgICB9KVxuXG4gICAgcm91dGVyLmRlbGV0ZSgnL2FwaS9ub3Rlcy86bm90ZV9pZCcsIHZhbGlkYXRlVXNlclN0YXR1cywgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICBhd2FpdCBub3RlU2VydmljZS5kZWxldGUoY3R4LnBhcmFtcy5ub3RlX2lkLCBjdHguc3RhdGUudXNlci5faWQpO1xuICAgICAgICBjdHgucmVzcG9uc2Uuc3RhdHVzID0gMjAyO1xuICAgIH0pXG5cbiAgICByZXR1cm4gcm91dGVyO1xufTsiXX0=
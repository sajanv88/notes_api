import { Application, log } from './deps.ts';
import UserApiRoutes from './api/user.ts';
import NotesApiRoutes from './api/notes.ts';
import Exception from './errors/exception.ts';
import { mongoClient, MONGODB_URI } from './utils/mongo.ts';
const PORT = Number(Deno.env.get('PORT')) || 8080;
const app = new Application();
await log.setup({
    handlers: {
        console: new log.handlers.ConsoleHandler("INFO"),
    },
    loggers: {
        default: {
            level: "INFO",
            handlers: ["console"]
        }
    }
});
app.use(async (ctx, next) => {
    log.info(`Requested url: ${ctx.request.url} and Requested method: ${ctx.request.method}`);
    try {
        await next();
    }
    catch (e) {
        log.info(e);
        const err = new Exception(e);
        ctx.response.body = err.getMessage();
        ctx.response.status = err.getCode();
    }
});
const userRoutes = UserApiRoutes();
app.use(userRoutes.routes());
app.use(userRoutes.allowedMethods());
const notesRoutes = NotesApiRoutes();
app.use(notesRoutes.routes());
app.use(notesRoutes.allowedMethods());
if (import.meta.main) {
    log.info(`Server is up and running on ${PORT}`);
    await mongoClient.connect(MONGODB_URI)
        .catch(e => console.error(e));
    await app.listen({ port: PORT });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzdDLE9BQU8sYUFBYSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLGNBQWMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLFNBQVMsTUFBTSx1QkFBdUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRzVELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNsRCxNQUFNLEdBQUcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBRTlCLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQztJQUNaLFFBQVEsRUFBRTtRQUNOLE9BQU8sRUFBRSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztLQUNuRDtJQUNELE9BQU8sRUFBRTtRQUNMLE9BQU8sRUFBRTtZQUNMLEtBQUssRUFBRSxNQUFNO1lBQ2IsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDO1NBQ3hCO0tBQ0o7Q0FDSixDQUFDLENBQUM7QUFHSCxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLDBCQUEwQixHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFFMUYsSUFBSTtRQUNBLE1BQU0sSUFBSSxFQUFFLENBQUM7S0FDaEI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDWCxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQVMsQ0FBVyxDQUFDLENBQUMsQ0FBQztRQUN2QyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDckMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3ZDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFJSCxNQUFNLFVBQVUsR0FBRyxhQUFhLEVBQUUsQ0FBQztBQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzdCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7QUFHckMsTUFBTSxXQUFXLEdBQUcsY0FBYyxFQUFFLENBQUM7QUFDckMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUM5QixHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBRXRDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFDbEIsR0FBRyxDQUFDLElBQUksQ0FBQywrQkFBK0IsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUVoRCxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ2pDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVqQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztDQUNwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uLCBsb2cgfSBmcm9tICcuL2RlcHMudHMnO1xuaW1wb3J0IFVzZXJBcGlSb3V0ZXMgZnJvbSAnLi9hcGkvdXNlci50cyc7XG5pbXBvcnQgTm90ZXNBcGlSb3V0ZXMgZnJvbSAnLi9hcGkvbm90ZXMudHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2Vycm9ycy9leGNlcHRpb24udHMnO1xuaW1wb3J0IHsgbW9uZ29DbGllbnQsIE1PTkdPREJfVVJJIH0gZnJvbSAnLi91dGlscy9tb25nby50cyc7XG5cblxuY29uc3QgUE9SVCA9IE51bWJlcihEZW5vLmVudi5nZXQoJ1BPUlQnKSkgfHwgODA4MDtcbmNvbnN0IGFwcCA9IG5ldyBBcHBsaWNhdGlvbigpO1xuXG5hd2FpdCBsb2cuc2V0dXAoe1xuICAgIGhhbmRsZXJzOiB7XG4gICAgICAgIGNvbnNvbGU6IG5ldyBsb2cuaGFuZGxlcnMuQ29uc29sZUhhbmRsZXIoXCJJTkZPXCIpLFxuICAgIH0sXG4gICAgbG9nZ2Vyczoge1xuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBsZXZlbDogXCJJTkZPXCIsXG4gICAgICAgICAgICBoYW5kbGVyczogW1wiY29uc29sZVwiXVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cblxuYXBwLnVzZShhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgbG9nLmluZm8oYFJlcXVlc3RlZCB1cmw6ICR7Y3R4LnJlcXVlc3QudXJsfSBhbmQgUmVxdWVzdGVkIG1ldGhvZDogJHtjdHgucmVxdWVzdC5tZXRob2R9YCk7XG5cbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBuZXh0KCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuaW5mbyhlKVxuICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXhjZXB0aW9uPHR5cGVvZiBlPihlKTtcbiAgICAgICAgY3R4LnJlc3BvbnNlLmJvZHkgPSBlcnIuZ2V0TWVzc2FnZSgpO1xuICAgICAgICBjdHgucmVzcG9uc2Uuc3RhdHVzID0gZXJyLmdldENvZGUoKTtcbiAgICB9XG59KTtcblxuXG4vLyB1c2VyIGFwaSByb3V0ZXNcbmNvbnN0IHVzZXJSb3V0ZXMgPSBVc2VyQXBpUm91dGVzKCk7XG5hcHAudXNlKHVzZXJSb3V0ZXMucm91dGVzKCkpO1xuYXBwLnVzZSh1c2VyUm91dGVzLmFsbG93ZWRNZXRob2RzKCkpO1xuXG4vLyBub3RlcyBhcGkgcm91dGVzIHByb3RlY3RlZCBieSBhdXRob3JpemF0aW9uIHRva2VuXG5jb25zdCBub3Rlc1JvdXRlcyA9IE5vdGVzQXBpUm91dGVzKCk7XG5hcHAudXNlKG5vdGVzUm91dGVzLnJvdXRlcygpKTtcbmFwcC51c2Uobm90ZXNSb3V0ZXMuYWxsb3dlZE1ldGhvZHMoKSk7XG5cbmlmIChpbXBvcnQubWV0YS5tYWluKSB7XG4gICAgbG9nLmluZm8oYFNlcnZlciBpcyB1cCBhbmQgcnVubmluZyBvbiAke1BPUlR9YCk7XG5cbiAgICBhd2FpdCBtb25nb0NsaWVudC5jb25uZWN0KE1PTkdPREJfVVJJKVxuICAgICAgICAuY2F0Y2goZSA9PiBjb25zb2xlLmVycm9yKGUpKVxuXG4gICAgYXdhaXQgYXBwLmxpc3Rlbih7IHBvcnQ6IFBPUlQgfSk7XG59XG5cbiJdfQ==
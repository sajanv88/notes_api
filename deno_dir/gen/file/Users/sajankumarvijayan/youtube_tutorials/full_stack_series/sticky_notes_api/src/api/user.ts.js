import { Router } from '../deps.ts';
import validatePayload from '../middleware/validatePayload.ts';
import UserService from '../service/userService.ts';
import NoteService from '../service/noteService.ts';
import validateAuthToken from '../middleware/validateAuthToken.ts';
export default () => {
    const router = new Router();
    const userService = UserService.getInstance();
    router.post('/api/users/signup', validatePayload([
        'firstName',
        'lastName',
        'emailAddress',
        'password'
    ]), async (ctx) => {
        const body = await ctx.request.body().value;
        await userService.signup(body);
        ctx.response.status = 201;
    });
    router.post('/api/users/signin', validatePayload([
        'emailAddress',
        'password'
    ]), async (ctx) => {
        const body = await ctx.request.body().value;
        const token = await userService.signin(body);
        ctx.response.body = {
            token
        };
        ctx.response.status = 200;
    });
    router.put('/api/users/:user_id/update_password', validatePayload([
        'currentPassword',
        'newPassword'
    ]), validateAuthToken, async (ctx) => {
        const body = await ctx.request.body().value;
        await userService.updatePassword(body, ctx.params.user_id);
        ctx.response.status = 204;
    });
    router.put('/api/users/:user_id/deactivate', validateAuthToken, async (ctx) => {
        await userService.activateOrDeactivate(ctx.params.user_id, false);
        ctx.response.status = 204;
    });
    router.put('/api/users/:user_id/activate', validateAuthToken, async (ctx) => {
        await userService.activateOrDeactivate(ctx.params.user_id, true);
        ctx.response.status = 204;
    });
    router.delete('/api/users/:user_id/delete', validateAuthToken, async (ctx) => {
        await userService.delete(ctx.params.user_id);
        await NoteService.getInstance().deleteNotesByUserId(ctx.state.user._id);
        ctx.response.status = 202;
    });
    router.get('/api/user/verify_auth', validateAuthToken, async (ctx) => {
        const user = await userService.getUserById(ctx.state.user._id);
        ctx.response.status = 200;
        ctx.response.body = { ...ctx.state.user, userStatus: user.active };
    });
    return router;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLGVBQWUsTUFBTSxrQ0FBa0MsQ0FBQztBQUkvRCxPQUFPLFdBQVcsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRCxPQUFPLFdBQVcsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRCxPQUFPLGlCQUFpQixNQUFNLG9DQUFvQyxDQUFDO0FBSW5FLGVBQWUsR0FBRyxFQUFFO0lBQ2hCLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7SUFDNUIsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQzNCLGVBQWUsQ0FBZ0I7UUFDM0IsV0FBVztRQUNYLFVBQVU7UUFDVixjQUFjO1FBQ2QsVUFBVTtLQUNiLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDZCxNQUFNLElBQUksR0FBa0IsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQztRQUMzRCxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0lBRVAsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFDM0IsZUFBZSxDQUFlO1FBQzFCLGNBQWM7UUFDZCxVQUFVO0tBQUMsQ0FBQyxFQUNoQixLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDVixNQUFNLElBQUksR0FBaUIsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQztRQUMxRCxNQUFNLEtBQUssR0FBRyxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUc7WUFDaEIsS0FBSztTQUNSLENBQUE7UUFDRCxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFFUCxNQUFNLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxFQUFFLGVBQWUsQ0FBb0I7UUFDakYsaUJBQWlCO1FBQ2pCLGFBQWE7S0FBQyxDQUFDLEVBQ2YsaUJBQWlCLEVBQ2pCLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNWLE1BQU0sSUFBSSxHQUFzQixNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQy9ELE1BQU0sV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzRCxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFFOUIsQ0FBQyxDQUFDLENBQUM7SUFFUCxNQUFNLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUMxRSxNQUFNLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFFOUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsR0FBRyxDQUFDLDhCQUE4QixFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN4RSxNQUFNLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqRSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLDRCQUE0QixFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN6RSxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QyxNQUFNLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4RSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNqRSxNQUFNLElBQUksR0FBRyxNQUFNLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0QsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQzFCLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZFLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnLi4vZGVwcy50cyc7XG5pbXBvcnQgdmFsaWRhdGVQYXlsb2FkIGZyb20gJy4uL21pZGRsZXdhcmUvdmFsaWRhdGVQYXlsb2FkLnRzJztcbmltcG9ydCBDcmVhdGVVc2VyRHRvIGZyb20gJy4uL3R5cGVzL2NyZWF0ZVVzZXIuZHRvLnRzJztcbmltcG9ydCBMb2dpblVzZXJEdG8gZnJvbSAnLi4vdHlwZXMvbG9naW5Vc2VyLmR0by50cyc7XG5pbXBvcnQgVXBkYXRlUGFzc3dvcmREdG8gZnJvbSAnLi4vdHlwZXMvdXBkYXRlUGFzc3dvcmQuZHRvLnRzJztcbmltcG9ydCBVc2VyU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlL3VzZXJTZXJ2aWNlLnRzJztcbmltcG9ydCBOb3RlU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlL25vdGVTZXJ2aWNlLnRzJztcbmltcG9ydCB2YWxpZGF0ZUF1dGhUb2tlbiBmcm9tICcuLi9taWRkbGV3YXJlL3ZhbGlkYXRlQXV0aFRva2VuLnRzJztcblxuXG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgICBjb25zdCByb3V0ZXIgPSBuZXcgUm91dGVyKCk7XG4gICAgY29uc3QgdXNlclNlcnZpY2UgPSBVc2VyU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuXG4gICAgcm91dGVyLnBvc3QoJy9hcGkvdXNlcnMvc2lnbnVwJyxcbiAgICAgICAgdmFsaWRhdGVQYXlsb2FkPENyZWF0ZVVzZXJEdG8+KFtcbiAgICAgICAgICAgICdmaXJzdE5hbWUnLFxuICAgICAgICAgICAgJ2xhc3ROYW1lJyxcbiAgICAgICAgICAgICdlbWFpbEFkZHJlc3MnLFxuICAgICAgICAgICAgJ3Bhc3N3b3JkJ1xuICAgICAgICBdKSwgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYm9keTogQ3JlYXRlVXNlckR0byA9IGF3YWl0IGN0eC5yZXF1ZXN0LmJvZHkoKS52YWx1ZTtcbiAgICAgICAgICAgIGF3YWl0IHVzZXJTZXJ2aWNlLnNpZ251cChib2R5KTtcbiAgICAgICAgICAgIGN0eC5yZXNwb25zZS5zdGF0dXMgPSAyMDE7XG4gICAgICAgIH0pO1xuXG4gICAgcm91dGVyLnBvc3QoJy9hcGkvdXNlcnMvc2lnbmluJyxcbiAgICAgICAgdmFsaWRhdGVQYXlsb2FkPExvZ2luVXNlckR0bz4oW1xuICAgICAgICAgICAgJ2VtYWlsQWRkcmVzcycsXG4gICAgICAgICAgICAncGFzc3dvcmQnXSksXG4gICAgICAgIGFzeW5jIChjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJvZHk6IExvZ2luVXNlckR0byA9IGF3YWl0IGN0eC5yZXF1ZXN0LmJvZHkoKS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdXNlclNlcnZpY2Uuc2lnbmluKGJvZHkpO1xuICAgICAgICAgICAgY3R4LnJlc3BvbnNlLmJvZHkgPSB7XG4gICAgICAgICAgICAgICAgdG9rZW5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXNwb25zZS5zdGF0dXMgPSAyMDA7XG4gICAgICAgIH0pO1xuXG4gICAgcm91dGVyLnB1dCgnL2FwaS91c2Vycy86dXNlcl9pZC91cGRhdGVfcGFzc3dvcmQnLCB2YWxpZGF0ZVBheWxvYWQ8VXBkYXRlUGFzc3dvcmREdG8+KFtcbiAgICAgICAgJ2N1cnJlbnRQYXNzd29yZCcsXG4gICAgICAgICduZXdQYXNzd29yZCddKSxcbiAgICAgICAgdmFsaWRhdGVBdXRoVG9rZW4sXG4gICAgICAgIGFzeW5jIChjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJvZHk6IFVwZGF0ZVBhc3N3b3JkRHRvID0gYXdhaXQgY3R4LnJlcXVlc3QuYm9keSgpLnZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdXNlclNlcnZpY2UudXBkYXRlUGFzc3dvcmQoYm9keSwgY3R4LnBhcmFtcy51c2VyX2lkKTtcbiAgICAgICAgICAgIGN0eC5yZXNwb25zZS5zdGF0dXMgPSAyMDQ7XG5cbiAgICAgICAgfSk7XG5cbiAgICByb3V0ZXIucHV0KCcvYXBpL3VzZXJzLzp1c2VyX2lkL2RlYWN0aXZhdGUnLCB2YWxpZGF0ZUF1dGhUb2tlbiwgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgICBhd2FpdCB1c2VyU2VydmljZS5hY3RpdmF0ZU9yRGVhY3RpdmF0ZShjdHgucGFyYW1zLnVzZXJfaWQsIGZhbHNlKTtcbiAgICAgICAgY3R4LnJlc3BvbnNlLnN0YXR1cyA9IDIwNDtcblxuICAgIH0pO1xuXG4gICAgcm91dGVyLnB1dCgnL2FwaS91c2Vycy86dXNlcl9pZC9hY3RpdmF0ZScsIHZhbGlkYXRlQXV0aFRva2VuLCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgIGF3YWl0IHVzZXJTZXJ2aWNlLmFjdGl2YXRlT3JEZWFjdGl2YXRlKGN0eC5wYXJhbXMudXNlcl9pZCwgdHJ1ZSk7XG4gICAgICAgIGN0eC5yZXNwb25zZS5zdGF0dXMgPSAyMDQ7XG4gICAgfSk7XG5cbiAgICByb3V0ZXIuZGVsZXRlKCcvYXBpL3VzZXJzLzp1c2VyX2lkL2RlbGV0ZScsIHZhbGlkYXRlQXV0aFRva2VuLCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgIGF3YWl0IHVzZXJTZXJ2aWNlLmRlbGV0ZShjdHgucGFyYW1zLnVzZXJfaWQpO1xuICAgICAgICBhd2FpdCBOb3RlU2VydmljZS5nZXRJbnN0YW5jZSgpLmRlbGV0ZU5vdGVzQnlVc2VySWQoY3R4LnN0YXRlLnVzZXIuX2lkKTtcbiAgICAgICAgY3R4LnJlc3BvbnNlLnN0YXR1cyA9IDIwMjtcbiAgICB9KTtcblxuICAgIHJvdXRlci5nZXQoJy9hcGkvdXNlci92ZXJpZnlfYXV0aCcsIHZhbGlkYXRlQXV0aFRva2VuLCBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB1c2VyU2VydmljZS5nZXRVc2VyQnlJZChjdHguc3RhdGUudXNlci5faWQpO1xuICAgICAgICBjdHgucmVzcG9uc2Uuc3RhdHVzID0gMjAwO1xuICAgICAgICBjdHgucmVzcG9uc2UuYm9keSA9IHsgLi4uY3R4LnN0YXRlLnVzZXIsIHVzZXJTdGF0dXM6IHVzZXIuYWN0aXZlIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcm91dGVyO1xufTsiXX0=
import { BSONError } from "./error.ts";
function alphabetize(str) {
    return str.split("").sort().join("");
}
export class BSONRegExp {
    pattern;
    options;
    constructor(pattern, options) {
        this.pattern = pattern;
        this.options = alphabetize(options ?? "");
        if (this.pattern.indexOf("\x00") !== -1) {
            throw new BSONError(`BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`);
        }
        if (this.options.indexOf("\x00") !== -1) {
            throw new BSONError(`BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`);
        }
        for (let i = 0; i < this.options.length; i++) {
            if (!(this.options[i] === "i" ||
                this.options[i] === "m" ||
                this.options[i] === "x" ||
                this.options[i] === "l" ||
                this.options[i] === "s" ||
                this.options[i] === "u")) {
                throw new BSONError(`The regular expression option [${this.options[i]}] is not supported`);
            }
        }
    }
    static parseOptions(options) {
        return options ? options.split("").sort().join("") : "";
    }
    [Symbol.for("Deno.customInspect")]() {
        return `new BSONRegExp("${this.pattern}")`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnZXhwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVnZXhwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFdkMsU0FBUyxXQUFXLENBQUMsR0FBVztJQUM5QixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFNRCxNQUFNLE9BQU8sVUFBVTtJQUNyQixPQUFPLENBQVU7SUFDakIsT0FBTyxDQUFVO0lBS2pCLFlBQVksT0FBZSxFQUFFLE9BQWdCO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztRQUUxQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3ZDLE1BQU0sSUFBSSxTQUFTLENBQ2pCLHlEQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FDN0IsRUFBRSxDQUNILENBQUM7U0FDSDtRQUNELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDdkMsTUFBTSxJQUFJLFNBQVMsQ0FDakIsd0RBQ0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUM3QixFQUFFLENBQ0gsQ0FBQztTQUNIO1FBR0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVDLElBQ0UsQ0FBQyxDQUNDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRztnQkFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHO2dCQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUc7Z0JBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRztnQkFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHO2dCQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FDeEIsRUFDRDtnQkFDQSxNQUFNLElBQUksU0FBUyxDQUNqQixrQ0FBa0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQ3RFLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBZ0I7UUFDbEMsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUVELENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sbUJBQW1CLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQztJQUM3QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCU09ORXJyb3IgfSBmcm9tIFwiLi9lcnJvci50c1wiO1xuXG5mdW5jdGlvbiBhbHBoYWJldGl6ZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIuc3BsaXQoXCJcIikuc29ydCgpLmpvaW4oXCJcIik7XG59XG5cbi8qKlxuICogQSBjbGFzcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQlNPTiBSZWdFeHAgdHlwZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEJTT05SZWdFeHAge1xuICBwYXR0ZXJuITogc3RyaW5nO1xuICBvcHRpb25zITogc3RyaW5nO1xuICAvKipcbiAgICogQHBhcmFtIHBhdHRlcm4gLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHBhdHRlcm4gdG8gbWF0Y2hcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhdHRlcm46IHN0cmluZywgb3B0aW9ucz86IHN0cmluZykge1xuICAgIHRoaXMucGF0dGVybiA9IHBhdHRlcm47XG4gICAgdGhpcy5vcHRpb25zID0gYWxwaGFiZXRpemUob3B0aW9ucyA/PyBcIlwiKTtcblxuICAgIGlmICh0aGlzLnBhdHRlcm4uaW5kZXhPZihcIlxceDAwXCIpICE9PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEJTT05FcnJvcihcbiAgICAgICAgYEJTT04gUmVnZXggcGF0dGVybnMgY2Fubm90IGNvbnRhaW4gbnVsbCBieXRlcywgZm91bmQ6ICR7XG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5wYXR0ZXJuKVxuICAgICAgICB9YCxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuaW5kZXhPZihcIlxceDAwXCIpICE9PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEJTT05FcnJvcihcbiAgICAgICAgYEJTT04gUmVnZXggb3B0aW9ucyBjYW5ub3QgY29udGFpbiBudWxsIGJ5dGVzLCBmb3VuZDogJHtcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLm9wdGlvbnMpXG4gICAgICAgIH1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSBvcHRpb25zXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgIShcbiAgICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPT09IFwiaVwiIHx8XG4gICAgICAgICAgdGhpcy5vcHRpb25zW2ldID09PSBcIm1cIiB8fFxuICAgICAgICAgIHRoaXMub3B0aW9uc1tpXSA9PT0gXCJ4XCIgfHxcbiAgICAgICAgICB0aGlzLm9wdGlvbnNbaV0gPT09IFwibFwiIHx8XG4gICAgICAgICAgdGhpcy5vcHRpb25zW2ldID09PSBcInNcIiB8fFxuICAgICAgICAgIHRoaXMub3B0aW9uc1tpXSA9PT0gXCJ1XCJcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBCU09ORXJyb3IoXG4gICAgICAgICAgYFRoZSByZWd1bGFyIGV4cHJlc3Npb24gb3B0aW9uIFske3RoaXMub3B0aW9uc1tpXX1dIGlzIG5vdCBzdXBwb3J0ZWRgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBwYXJzZU9wdGlvbnMob3B0aW9ucz86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPyBvcHRpb25zLnNwbGl0KFwiXCIpLnNvcnQoKS5qb2luKFwiXCIpIDogXCJcIjtcbiAgfVxuXG4gIFtTeW1ib2wuZm9yKFwiRGVuby5jdXN0b21JbnNwZWN0XCIpXSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgbmV3IEJTT05SZWdFeHAoXCIke3RoaXMucGF0dGVybn1cIilgO1xuICB9XG59XG4iXX0=
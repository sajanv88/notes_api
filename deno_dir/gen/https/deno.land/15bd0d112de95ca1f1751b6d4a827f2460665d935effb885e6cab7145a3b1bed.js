import { CommandCursor } from "../../protocol/mod.ts";
export class FindCursor extends CommandCursor {
    #context;
    async executor() {
        const { protocol, filter, dbName, collectionName, options } = this.#context;
        const { cursor } = await protocol.commandSingle(dbName, {
            find: collectionName,
            filter,
            batchSize: 1,
            noCursorTimeout: true,
            ...options,
        });
        return {
            ...cursor,
            id: cursor.id.toString(),
        };
    }
    constructor(context) {
        super(context.protocol, () => this.executor());
        this.#context = context;
    }
    limit(limit) {
        this.#context.options.limit = limit;
        return this;
    }
    skip(skip) {
        this.#context.options.skip = skip;
        return this;
    }
    sort(sort) {
        this.#context.options.sort = sort;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBZ0IsTUFBTSx1QkFBdUIsQ0FBQztBQVdwRSxNQUFNLE9BQU8sVUFBYyxTQUFRLGFBQWdCO0lBQ2pELFFBQVEsQ0FBb0I7SUFFcEIsS0FBSyxDQUFDLFFBQVE7UUFDcEIsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzVFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQ3RELElBQUksRUFBRSxjQUFjO1lBQ3BCLE1BQU07WUFDTixTQUFTLEVBQUUsQ0FBQztZQUNaLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLEdBQUcsT0FBTztTQUNYLENBQUMsQ0FBQztRQUNILE9BQU87WUFDTCxHQUFHLE1BQU07WUFDVCxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7U0FDekIsQ0FBQztJQUNKLENBQUM7SUFFRCxZQUFZLE9BQTBCO1FBQ3BDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBYTtRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFZO1FBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxJQUFJLENBQUMsSUFBYztRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZEN1cnNvciwgV2lyZVByb3RvY29sIH0gZnJvbSBcIi4uLy4uL3Byb3RvY29sL21vZC50c1wiO1xuaW1wb3J0IHsgRG9jdW1lbnQsIEZpbmRPcHRpb25zIH0gZnJvbSBcIi4uLy4uL3R5cGVzLnRzXCI7XG5cbmludGVyZmFjZSBGaW5kQ3Vyc29yQ29udGV4dCB7XG4gIGRiTmFtZTogc3RyaW5nO1xuICBjb2xsZWN0aW9uTmFtZTogc3RyaW5nO1xuICBwcm90b2NvbDogV2lyZVByb3RvY29sO1xuICBvcHRpb25zOiBGaW5kT3B0aW9ucztcbiAgZmlsdGVyPzogRG9jdW1lbnQ7XG59XG5cbmV4cG9ydCBjbGFzcyBGaW5kQ3Vyc29yPFQ+IGV4dGVuZHMgQ29tbWFuZEN1cnNvcjxUPiB7XG4gICNjb250ZXh0OiBGaW5kQ3Vyc29yQ29udGV4dDtcblxuICBwcml2YXRlIGFzeW5jIGV4ZWN1dG9yKCkge1xuICAgIGNvbnN0IHsgcHJvdG9jb2wsIGZpbHRlciwgZGJOYW1lLCBjb2xsZWN0aW9uTmFtZSwgb3B0aW9ucyB9ID0gdGhpcy4jY29udGV4dDtcbiAgICBjb25zdCB7IGN1cnNvciB9ID0gYXdhaXQgcHJvdG9jb2wuY29tbWFuZFNpbmdsZShkYk5hbWUsIHtcbiAgICAgIGZpbmQ6IGNvbGxlY3Rpb25OYW1lLFxuICAgICAgZmlsdGVyLFxuICAgICAgYmF0Y2hTaXplOiAxLFxuICAgICAgbm9DdXJzb3JUaW1lb3V0OiB0cnVlLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY3Vyc29yLFxuICAgICAgaWQ6IGN1cnNvci5pZC50b1N0cmluZygpLFxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBGaW5kQ3Vyc29yQ29udGV4dCkge1xuICAgIHN1cGVyKGNvbnRleHQucHJvdG9jb2wsICgpID0+IHRoaXMuZXhlY3V0b3IoKSk7XG4gICAgdGhpcy4jY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBsaW1pdChsaW1pdDogbnVtYmVyKTogdGhpcyB7XG4gICAgdGhpcy4jY29udGV4dC5vcHRpb25zLmxpbWl0ID0gbGltaXQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBza2lwKHNraXA6IG51bWJlcik6IHRoaXMge1xuICAgIHRoaXMuI2NvbnRleHQub3B0aW9ucy5za2lwID0gc2tpcDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHNvcnQoc29ydDogRG9jdW1lbnQpOiB0aGlzIHtcbiAgICB0aGlzLiNjb250ZXh0Lm9wdGlvbnMuc29ydCA9IHNvcnQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==
export function normalizedFunctionString(fn) {
    return fn.toString().replace("function(", "function (");
}
export const randomBytes = (size) => crypto.getRandomValues(new Uint8Array(size));
export function isObjectLike(candidate) {
    return typeof candidate === "object" && candidate !== null;
}
export function bytesCopy(target, targetStart, source, sourceStart, sourceEnd) {
    Uint8Array.prototype.set.call(target, source.subarray(sourceStart, sourceEnd), targetStart);
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for (let i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
                if (codePoint > 56319) {
                    if ((units -= 3) > -1) {
                        bytes.push(239, 191, 189);
                    }
                    continue;
                }
                else if (i + 1 === length) {
                    if ((units -= 3) > -1) {
                        bytes.push(239, 191, 189);
                    }
                    continue;
                }
                leadSurrogate = codePoint;
                continue;
            }
            if (codePoint < 56320) {
                if ((units -= 3) > -1) {
                    bytes.push(239, 191, 189);
                }
                leadSurrogate = codePoint;
                continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        }
        else if (leadSurrogate) {
            if ((units -= 3) > -1) {
                bytes.push(239, 191, 189);
            }
        }
        leadSurrogate = null;
        if (codePoint < 128) {
            if ((units -= 1) < 0) {
                break;
            }
            bytes.push(codePoint);
        }
        else if (codePoint < 2048) {
            if ((units -= 2) < 0) {
                break;
            }
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        }
        else if (codePoint < 65536) {
            if ((units -= 3) < 0) {
                break;
            }
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        }
        else if (codePoint < 1114112) {
            if ((units -= 4) < 0) {
                break;
            }
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        }
        else {
            throw new Error("Invalid code point");
        }
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = new Uint8Array(str.length);
    for (let i = 0; i < str.length; ++i) {
        byteArray[i] = str.charCodeAt(i) & 255;
    }
    return byteArray;
}
export var Encoding;
(function (Encoding) {
    Encoding[Encoding["Utf8"] = 0] = "Utf8";
    Encoding[Encoding["Ascii"] = 1] = "Ascii";
})(Encoding || (Encoding = {}));
export function writeToBytes(bytes, data, offset, encoding) {
    const bytesLength = bytes.length;
    const src = encoding
        ? asciiToBytes(data)
        : utf8ToBytes(data, bytesLength - offset);
    let i;
    for (i = 0; i < bytesLength; ++i) {
        if (i + offset >= bytesLength || i >= src.length) {
            break;
        }
        bytes[i + offset] = src[i];
    }
    return i;
}
export function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239
            ? 4
            : firstByte > 223
                ? 3
                : firstByte > 191
                    ? 2
                    : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
                case 1:
                    if (firstByte < 128) {
                        codePoint = firstByte;
                    }
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 |
                            (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 &&
                            (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                            codePoint = tempCodePoint;
                        }
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 &&
                        (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 |
                            (secondByte & 63) << 12 | (thirdByte & 63) << 6 |
                            fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                            codePoint = tempCodePoint;
                        }
                    }
            }
        }
        if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
        }
        else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
const MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode(...codePoints);
    }
    let res = "";
    let i = 0;
    while (i < len) {
        res += String.fromCharCode(...codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLFVBQVUsd0JBQXdCLENBQUMsRUFBWTtJQUNuRCxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUMxQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFPL0MsTUFBTSxVQUFVLFlBQVksQ0FDMUIsU0FBa0I7SUFFbEIsT0FBTyxPQUFPLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxLQUFLLElBQUksQ0FBQztBQUM3RCxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FDdkIsTUFBa0IsRUFDbEIsV0FBbUIsRUFDbkIsTUFBa0IsRUFDbEIsV0FBbUIsRUFDbkIsU0FBaUI7SUFFakIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUMzQixNQUFNLEVBQ04sTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLEVBQ3ZDLFdBQVcsQ0FDWixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLE1BQWMsRUFBRSxLQUFhO0lBQ2hELEtBQUssR0FBRyxLQUFLLElBQUksUUFBUSxDQUFDO0lBQzFCLElBQUksU0FBUyxDQUFDO0lBQ2QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM3QixJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUM7SUFDekIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDL0IsU0FB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QztJQUNELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLE9BQU8sQ0FBQyxHQUFHLEdBQUcsRUFBRTtRQUNkLEdBQUcsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUN4QixHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxDQUNsRCxDQUFDO0tBQ0g7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE5vcm1hbGl6ZXMgb3VyIGV4cGVjdGVkIHN0cmluZ2lmaWVkIGZvcm0gb2YgYSBmdW5jdGlvbiBhY3Jvc3MgdmVyc2lvbnMgb2Ygbm9kZVxuICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIHRvIHN0cmluZ2lmeVxuICovXG4vLyBkZW5vLWxpbnQtaWdub3JlIGJhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyhmbjogRnVuY3Rpb24pOiBzdHJpbmcge1xuICByZXR1cm4gZm4udG9TdHJpbmcoKS5yZXBsYWNlKFwiZnVuY3Rpb24oXCIsIFwiZnVuY3Rpb24gKFwiKTtcbn1cblxuZXhwb3J0IGNvbnN0IHJhbmRvbUJ5dGVzID0gKHNpemU6IG51bWJlcikgPT5cbiAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSk7XG5cbi8qKlxuICogQGludGVybmFsXG4gKiB0aGlzIGlzIHRvIHNvbHZlIHRoZSBgJ3NvbWVLZXknIGluIHhgIHByb2JsZW0gd2hlcmUgeCBpcyB1bmtub3duLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3R5cGVzY3JpcHQtZXNsaW50L3R5cGVzY3JpcHQtZXNsaW50L2lzc3Vlcy8xMDcxI2lzc3VlY29tbWVudC01NDE5NTU3NTNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0TGlrZShcbiAgY2FuZGlkYXRlOiB1bmtub3duLFxuKTogY2FuZGlkYXRlIGlzIFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgcmV0dXJuIHR5cGVvZiBjYW5kaWRhdGUgPT09IFwib2JqZWN0XCIgJiYgY2FuZGlkYXRlICE9PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnl0ZXNDb3B5KFxuICB0YXJnZXQ6IFVpbnQ4QXJyYXksXG4gIHRhcmdldFN0YXJ0OiBudW1iZXIsXG4gIHNvdXJjZTogVWludDhBcnJheSxcbiAgc291cmNlU3RhcnQ6IG51bWJlcixcbiAgc291cmNlRW5kOiBudW1iZXIsXG4pIHtcbiAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgdGFyZ2V0LFxuICAgIHNvdXJjZS5zdWJhcnJheShzb3VyY2VTdGFydCwgc291cmNlRW5kKSxcbiAgICB0YXJnZXRTdGFydCxcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMoc3RyaW5nOiBzdHJpbmcsIHVuaXRzOiBudW1iZXIpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eTtcbiAgbGV0IGNvZGVQb2ludDtcbiAgY29uc3QgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgbGV0IGxlYWRTdXJyb2dhdGUgPSBudWxsO1xuICBjb25zdCBieXRlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGVQb2ludCA+IDU1Mjk1ICYmIGNvZGVQb2ludCA8IDU3MzQ0KSB7XG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDU2MzE5KSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSB7XG4gICAgICAgICAgICBieXRlcy5wdXNoKDIzOSwgMTkxLCAxODkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSB7XG4gICAgICAgICAgICBieXRlcy5wdXNoKDIzOSwgMTkxLCAxODkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50O1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjb2RlUG9pbnQgPCA1NjMyMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIHtcbiAgICAgICAgICBieXRlcy5wdXNoKDIzOSwgMTkxLCAxODkpO1xuICAgICAgICB9XG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSA1NTI5NiA8PCAxMCB8IGNvZGVQb2ludCAtIDU2MzIwKSArIDY1NTM2O1xuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goMjM5LCAxOTEsIDE4OSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsO1xuICAgIGlmIChjb2RlUG9pbnQgPCAxMjgpIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpO1xuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMjA0OCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludCA+PiA2IHwgMTkyLCBjb2RlUG9pbnQgJiA2MyB8IDEyOCk7XG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCA2NTUzNikge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMTIgfCAyMjQsXG4gICAgICAgIGNvZGVQb2ludCA+PiA2ICYgNjMgfCAxMjgsXG4gICAgICAgIGNvZGVQb2ludCAmIDYzIHwgMTI4LFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDExMTQxMTIpIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDE4IHwgMjQwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMTIgJiA2MyB8IDEyOCxcbiAgICAgICAgY29kZVBvaW50ID4+IDYgJiA2MyB8IDEyOCxcbiAgICAgICAgY29kZVBvaW50ICYgNjMgfCAxMjgsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvZGUgcG9pbnRcIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBieXRlcztcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzKHN0cjogc3RyaW5nKSB7XG4gIGNvbnN0IGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KHN0ci5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGJ5dGVBcnJheVtpXSA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMjU1O1xuICB9XG4gIHJldHVybiBieXRlQXJyYXk7XG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIEVuY29kaW5nIHtcbiAgVXRmOCA9IDAsXG4gIEFzY2lpID0gMSxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlVG9CeXRlcyhcbiAgYnl0ZXM6IFVpbnQ4QXJyYXksXG4gIGRhdGE6IHN0cmluZyxcbiAgb2Zmc2V0OiBudW1iZXIsXG4gIC8qKiBsYXRpbjEgaXMgYXNjaWkgKi9cbiAgZW5jb2Rpbmc6IEVuY29kaW5nLFxuKSB7XG4gIGNvbnN0IGJ5dGVzTGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuICBjb25zdCBzcmMgPSBlbmNvZGluZ1xuICAgID8gYXNjaWlUb0J5dGVzKGRhdGEpXG4gICAgOiB1dGY4VG9CeXRlcyhkYXRhLCBieXRlc0xlbmd0aCAtIG9mZnNldCk7XG5cbiAgbGV0IGk7XG4gIGZvciAoaSA9IDA7IGkgPCBieXRlc0xlbmd0aDsgKytpKSB7XG4gICAgaWYgKGkgKyBvZmZzZXQgPj0gYnl0ZXNMZW5ndGggfHwgaSA+PSBzcmMubGVuZ3RoKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYnl0ZXNbaSArIG9mZnNldF0gPSBzcmNbaV07XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1dGY4U2xpY2UoYnVmOiBVaW50OEFycmF5LCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcikge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpO1xuICBjb25zdCByZXMgPSBbXTtcbiAgbGV0IGkgPSBzdGFydDtcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICBjb25zdCBmaXJzdEJ5dGUgPSBidWZbaV07XG4gICAgbGV0IGNvZGVQb2ludCA9IG51bGw7XG4gICAgbGV0IGJ5dGVzUGVyU2VxdWVuY2UgPSBmaXJzdEJ5dGUgPiAyMzlcbiAgICAgID8gNFxuICAgICAgOiBmaXJzdEJ5dGUgPiAyMjNcbiAgICAgID8gM1xuICAgICAgOiBmaXJzdEJ5dGUgPiAxOTFcbiAgICAgID8gMlxuICAgICAgOiAxO1xuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIGxldCBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnQ7XG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAxMjgpIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXTtcbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAxOTIpID09PSAxMjgpIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMzEpIDw8IDYgfCBzZWNvbmRCeXRlICYgNjM7XG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDEyNykge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdO1xuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl07XG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMTkyKSA9PT0gMTI4ICYmICh0aGlyZEJ5dGUgJiAxOTIpID09PSAxMjgpIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMTUpIDw8IDEyIHxcbiAgICAgICAgICAgICAgKHNlY29uZEJ5dGUgJiA2MykgPDwgNiB8IHRoaXJkQnl0ZSAmIDYzO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID4gMjA0NyAmJlxuICAgICAgICAgICAgICAodGVtcENvZGVQb2ludCA8IDU1Mjk2IHx8IHRlbXBDb2RlUG9pbnQgPiA1NzM0MylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdO1xuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl07XG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM107XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKHNlY29uZEJ5dGUgJiAxOTIpID09PSAxMjggJiYgKHRoaXJkQnl0ZSAmIDE5MikgPT09IDEyOCAmJlxuICAgICAgICAgICAgKGZvdXJ0aEJ5dGUgJiAxOTIpID09PSAxMjhcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMTUpIDw8IDE4IHxcbiAgICAgICAgICAgICAgKHNlY29uZEJ5dGUgJiA2MykgPDwgMTIgfCAodGhpcmRCeXRlICYgNjMpIDw8IDYgfFxuICAgICAgICAgICAgICBmb3VydGhCeXRlICYgNjM7XG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDY1NTM1ICYmIHRlbXBDb2RlUG9pbnQgPCAxMTE0MTEyKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICBjb2RlUG9pbnQgPSA2NTUzMztcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxO1xuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gNjU1MzUpIHtcbiAgICAgIGNvZGVQb2ludCAtPSA2NTUzNjtcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAxMDIzIHwgNTUyOTYpO1xuICAgICAgY29kZVBvaW50ID0gNTYzMjAgfCBjb2RlUG9pbnQgJiAxMDIzO1xuICAgIH1cbiAgICByZXMucHVzaChjb2RlUG9pbnQpO1xuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZTtcbiAgfVxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcyk7XG59XG5cbmNvbnN0IE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gNDA5NjtcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5KGNvZGVQb2ludHM6IG51bWJlcltdKSB7XG4gIGNvbnN0IGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoO1xuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uY29kZVBvaW50cyk7XG4gIH1cbiAgbGV0IHJlcyA9IFwiXCI7XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShcbiAgICAgIC4uLmNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSCksXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuIl19
import { createHttpError } from "./httpError.ts";
import { Cookies } from "./cookies.ts";
import { Response } from "./response.ts";
import { preferredMediaTypes } from "./negotiation/mediaType.ts";
export function createMockApp(state = {}) {
    const app = {
        state,
        use() {
            return app;
        },
        [Symbol.for("Deno.customInspect")]() {
            return "MockApplication {}";
        },
    };
    return app;
}
export const mockContextState = {
    encodingsAccepted: "identity",
};
export function createMockContext({ ip = "127.0.0.1", method = "GET", params, path = "/", state, app = createMockApp(state), headers, } = {}) {
    function createMockRequest() {
        const headerMap = new Headers(headers);
        return {
            accepts(...types) {
                const acceptValue = headerMap.get("Accept");
                if (!acceptValue) {
                    return;
                }
                if (types.length) {
                    return preferredMediaTypes(acceptValue, types)[0];
                }
                return preferredMediaTypes(acceptValue);
            },
            acceptsEncodings() {
                return mockContextState.encodingsAccepted;
            },
            headers: headerMap,
            ip,
            method,
            path,
            search: undefined,
            searchParams: new URLSearchParams(),
            url: new URL(path, "http://localhost/"),
        };
    }
    const request = createMockRequest();
    const response = new Response(request);
    const cookies = new Cookies(request, response);
    return {
        app,
        params,
        request,
        cookies,
        response,
        state: Object.assign({}, app.state),
        assert(condition, errorStatus = 500, message, props) {
            if (condition) {
                return;
            }
            const err = createHttpError(errorStatus, message);
            if (props) {
                Object.assign(err, props);
            }
            throw err;
        },
        throw(errorStatus, message, props) {
            const err = createHttpError(errorStatus, message);
            if (props) {
                Object.assign(err, props);
            }
            throw err;
        },
        [Symbol.for("Deno.customInspect")]() {
            return `MockContext {}`;
        },
    };
}
export function createMockNext() {
    return async function next() { };
}
//# sourceMappingURL=data:application/json;base64,
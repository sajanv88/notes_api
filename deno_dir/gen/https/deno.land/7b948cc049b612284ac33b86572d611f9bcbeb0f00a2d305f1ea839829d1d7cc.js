import { Bson } from "../../deps.ts";
import { MongoDriverError, MongoInvalidArgumentError } from "../error.ts";
import { AggregateCursor } from "./commands/aggregate.ts";
import { FindCursor } from "./commands/find.ts";
import { ListIndexesCursor } from "./commands/list_indexes.ts";
import { update } from "./commands/update.ts";
export class Collection {
    name;
    #protocol;
    #dbName;
    constructor(protocol, dbName, name) {
        this.name = name;
        this.#protocol = protocol;
        this.#dbName = dbName;
    }
    find(filter, options) {
        return new FindCursor({
            filter,
            protocol: this.#protocol,
            collectionName: this.name,
            dbName: this.#dbName,
            options: options ?? {},
        });
    }
    findOne(filter, options) {
        const cursor = this.find(filter, options);
        return cursor.next();
    }
    async findAndModify(filter, options) {
        const result = await this.#protocol.commandSingle(this.#dbName, {
            findAndModify: this.name,
            query: filter,
            ...options,
        });
        if (result.ok === 0) {
            throw new MongoDriverError("Could not execute findAndModify operation");
        }
        return result.value;
    }
    async count(filter, options) {
        const res = await this.#protocol.commandSingle(this.#dbName, {
            count: this.name,
            query: filter,
            ...options,
        });
        const { n, ok } = res;
        if (ok === 1) {
            return n;
        }
        else {
            return 0;
        }
    }
    async countDocuments(filter, options) {
        const pipeline = [];
        if (filter) {
            pipeline.push({ $match: filter });
        }
        if (typeof options?.skip === "number") {
            pipeline.push({ $skip: options.limit });
            delete options.skip;
        }
        if (typeof options?.limit === "number") {
            pipeline.push({ $limit: options.limit });
            delete options.limit;
        }
        pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });
        const result = await this.aggregate(pipeline, options).next();
        if (result)
            return result.n;
        return 0;
    }
    async estimatedDocumentCount() {
        const pipeline = [
            { $collStats: { count: {} } },
            { $group: { _id: 1, n: { $sum: "$count" } } },
        ];
        const result = await this.aggregate(pipeline).next();
        if (result)
            return result.n;
        return 0;
    }
    async insertOne(doc, options) {
        const { insertedIds } = await this.insertMany([doc], options);
        return insertedIds[0];
    }
    insert(docs, options) {
        docs = Array.isArray(docs) ? docs : [docs];
        return this.insertMany(docs, options);
    }
    async insertMany(docs, options) {
        const insertedIds = docs.map((doc) => {
            if (!doc._id) {
                doc._id = new Bson.ObjectId();
            }
            return doc._id;
        });
        const res = await this.#protocol.commandSingle(this.#dbName, {
            insert: this.name,
            documents: docs,
            ordered: options?.ordered ?? true,
            writeConcern: options?.writeConcern,
            bypassDocumentValidation: options?.bypassDocumentValidation,
            comment: options?.comment,
        });
        const { writeErrors } = res;
        if (writeErrors) {
            const [{ errmsg }] = writeErrors;
            throw new Error(errmsg);
        }
        return {
            insertedIds,
            insertedCount: res.n,
        };
    }
    async updateOne(filter, update, options) {
        const { upsertedIds = [], upsertedCount, matchedCount, modifiedCount, } = await this.updateMany(filter, update, {
            ...options,
            multi: false,
        });
        return {
            upsertedId: upsertedIds?.[0],
            upsertedCount,
            matchedCount,
            modifiedCount,
        };
    }
    updateMany(filter, doc, options) {
        if (!hasAtomicOperators(doc)) {
            throw new MongoInvalidArgumentError("Update document requires atomic operators");
        }
        return update(this.#protocol, this.#dbName, this.name, filter, doc, {
            ...options,
            multi: options?.multi ?? true,
        });
    }
    async replaceOne(filter, replacement, options) {
        if (hasAtomicOperators(replacement)) {
            throw new MongoInvalidArgumentError("Replacement document must not contain atomic operators");
        }
        const { upsertedIds = [], upsertedCount, matchedCount, modifiedCount } = await update(this.#protocol, this.#dbName, this.name, filter, replacement, {
            ...options,
            multi: false,
        });
        return {
            upsertedId: upsertedIds?.[0],
            upsertedCount,
            matchedCount,
            modifiedCount,
        };
    }
    async deleteMany(filter, options) {
        const res = await this.#protocol.commandSingle(this.#dbName, {
            delete: this.name,
            deletes: [
                {
                    q: filter,
                    limit: options?.limit ?? 0,
                    collation: options?.collation,
                    hint: options?.hint,
                    comment: options?.comment,
                },
            ],
            ordered: options?.ordered ?? true,
            writeConcern: options?.writeConcern,
        });
        return res.n;
    }
    delete = this.deleteMany;
    deleteOne(filter, options) {
        return this.delete(filter, { ...options, limit: 1 });
    }
    async drop(options) {
        const _res = await this.#protocol.commandSingle(this.#dbName, {
            drop: this.name,
            ...options,
        });
    }
    async distinct(key, query, options) {
        const { values } = await this.#protocol.commandSingle(this.#dbName, {
            distinct: this.name,
            key,
            query,
            ...options,
        });
        return values;
    }
    aggregate(pipeline, options) {
        return new AggregateCursor({
            pipeline,
            protocol: this.#protocol,
            dbName: this.#dbName,
            collectionName: this.name,
            options,
        });
    }
    async createIndexes(options) {
        const res = await this.#protocol.commandSingle(this.#dbName, {
            createIndexes: this.name,
            ...options,
        });
        return res;
    }
    async dropIndexes(options) {
        const res = await this.#protocol.commandSingle(this.#dbName, {
            dropIndexes: this.name,
            ...options,
        });
        return res;
    }
    listIndexes() {
        return new ListIndexesCursor({
            protocol: this.#protocol,
            dbName: this.#dbName,
            collectionName: this.name,
        });
    }
}
export function hasAtomicOperators(doc) {
    if (Array.isArray(doc)) {
        for (const document of doc) {
            if (hasAtomicOperators(document)) {
                return true;
            }
        }
        return false;
    }
    const keys = Object.keys(doc);
    return keys.length > 0 && keys[0][0] === "$";
}
//# sourceMappingURL=data:application/json;base64,
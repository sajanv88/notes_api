import { Long } from "./long.ts";
export const LongWithoutOverridesClass = Long;
export class Timestamp extends LongWithoutOverridesClass {
    static MAX_VALUE = Long.MAX_UNSIGNED_VALUE;
    constructor(value = new Long()) {
        const isLong = Long.isLong(value);
        const low = isLong ? value.low : value.i;
        const high = isLong ? value.high : value.t;
        super(low, high, true);
    }
    toJSON() {
        return {
            $timestamp: this.toString(),
        };
    }
    static fromInt(value) {
        return new Timestamp(Long.fromInt(value, true));
    }
    static fromNumber(value) {
        return new Timestamp(Long.fromNumber(value, true));
    }
    static fromBits(lowBits, highBits) {
        return new Timestamp(new Long(lowBits, highBits));
    }
    static fromString(str, optRadix) {
        return new Timestamp(Long.fromString(str, true, optRadix));
    }
    [Symbol.for("Deno.customInspect")]() {
        return `new Timestamp({ t: ${this.getHighBits()}, i: ${this.getLowBits()} })`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXN0YW1wLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGltZXN0YW1wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFXakMsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQ3BDLElBQXVDLENBQUM7QUFHMUMsTUFBTSxPQUFPLFNBQVUsU0FBUSx5QkFBeUI7SUFDdEQsTUFBTSxDQUFVLFNBQVMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFXcEQsWUFDRSxRQUF5QyxJQUFJLElBQUksRUFBRTtRQUVuRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDM0MsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPO1lBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7U0FDNUIsQ0FBQztJQUNKLENBQUM7SUFHRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWE7UUFDMUIsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFHRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQWE7UUFDN0IsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFRRCxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQWUsRUFBRSxRQUFnQjtRQUMvQyxPQUFPLElBQUksU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFRRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVcsRUFBRSxRQUFnQjtRQUM3QyxPQUFPLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNoQyxPQUFPLHNCQUFzQixJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUM7SUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvbmcgfSBmcm9tIFwiLi9sb25nLnRzXCI7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBMb25nV2l0aG91dE92ZXJyaWRlcyA9IG5ldyAoXG4gIGxvdzogdW5rbm93bixcbiAgaGlnaD86IG51bWJlcixcbiAgdW5zaWduZWQ/OiBib29sZWFuLFxuKSA9PiB7XG4gIFtQIGluIGtleW9mIExvbmddOiBMb25nW1BdO1xufTtcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgTG9uZ1dpdGhvdXRPdmVycmlkZXNDbGFzcyA9XG4gIExvbmcgYXMgdW5rbm93biBhcyBMb25nV2l0aG91dE92ZXJyaWRlcztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXAgZXh0ZW5kcyBMb25nV2l0aG91dE92ZXJyaWRlc0NsYXNzIHtcbiAgc3RhdGljIHJlYWRvbmx5IE1BWF9WQUxVRSA9IExvbmcuTUFYX1VOU0lHTkVEX1ZBTFVFO1xuXG4gIGNvbnN0cnVjdG9yKCk7XG4gIC8qKlxuICAgKiBAcGFyYW0gdmFsdWUgLSBBIDY0LWJpdCBMb25nIHJlcHJlc2VudGluZyB0aGUgVGltZXN0YW1wLlxuICAgKi9cbiAgY29uc3RydWN0b3IodmFsdWU6IExvbmcpO1xuICAvKipcbiAgICogQHBhcmFtIHZhbHVlIC0gQSBwYWlyIG9mIHR3byB2YWx1ZXMgaW5kaWNhdGluZyB0aW1lc3RhbXAgYW5kIGluY3JlbWVudC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHZhbHVlOiB7IHQ6IG51bWJlcjsgaTogbnVtYmVyIH0pO1xuICBjb25zdHJ1Y3RvcihcbiAgICB2YWx1ZTogTG9uZyB8IHsgdDogbnVtYmVyOyBpOiBudW1iZXIgfSA9IG5ldyBMb25nKCksXG4gICkge1xuICAgIGNvbnN0IGlzTG9uZyA9IExvbmcuaXNMb25nKHZhbHVlKTtcbiAgICBjb25zdCBsb3cgPSBpc0xvbmcgPyB2YWx1ZS5sb3cgOiB2YWx1ZS5pO1xuICAgIGNvbnN0IGhpZ2ggPSBpc0xvbmcgPyB2YWx1ZS5oaWdoIDogdmFsdWUudDtcbiAgICBzdXBlcihsb3csIGhpZ2gsIHRydWUpO1xuICB9XG5cbiAgdG9KU09OKCk6IHsgJHRpbWVzdGFtcDogc3RyaW5nIH0ge1xuICAgIHJldHVybiB7XG4gICAgICAkdGltZXN0YW1wOiB0aGlzLnRvU3RyaW5nKCksXG4gICAgfTtcbiAgfVxuXG4gIC8qKiBSZXR1cm5zIGEgVGltZXN0YW1wIHJlcHJlc2VudGVkIGJ5IHRoZSBnaXZlbiAoMzItYml0KSBpbnRlZ2VyIHZhbHVlLiAqL1xuICBzdGF0aWMgZnJvbUludCh2YWx1ZTogbnVtYmVyKTogVGltZXN0YW1wIHtcbiAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChMb25nLmZyb21JbnQodmFsdWUsIHRydWUpKTtcbiAgfVxuXG4gIC8qKiBSZXR1cm5zIGEgVGltZXN0YW1wIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gbnVtYmVyIHZhbHVlLCBwcm92aWRlZCB0aGF0IGl0IGlzIGEgZmluaXRlIG51bWJlci4gT3RoZXJ3aXNlLCB6ZXJvIGlzIHJldHVybmVkLiAqL1xuICBzdGF0aWMgZnJvbU51bWJlcih2YWx1ZTogbnVtYmVyKTogVGltZXN0YW1wIHtcbiAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChMb25nLmZyb21OdW1iZXIodmFsdWUsIHRydWUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgVGltZXN0YW1wIGZvciB0aGUgZ2l2ZW4gaGlnaCBhbmQgbG93IGJpdHMuIEVhY2ggaXMgYXNzdW1lZCB0byB1c2UgMzIgYml0cy5cbiAgICpcbiAgICogQHBhcmFtIGxvd0JpdHMgLSB0aGUgbG93IDMyLWJpdHMuXG4gICAqIEBwYXJhbSBoaWdoQml0cyAtIHRoZSBoaWdoIDMyLWJpdHMuXG4gICAqL1xuICBzdGF0aWMgZnJvbUJpdHMobG93Qml0czogbnVtYmVyLCBoaWdoQml0czogbnVtYmVyKTogVGltZXN0YW1wIHtcbiAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChuZXcgTG9uZyhsb3dCaXRzLCBoaWdoQml0cykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBUaW1lc3RhbXAgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nLCBvcHRpb25hbGx5IHVzaW5nIHRoZSBnaXZlbiByYWRpeC5cbiAgICpcbiAgICogQHBhcmFtIHN0ciAtIHRoZSB0ZXh0dWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBUaW1lc3RhbXAuXG4gICAqIEBwYXJhbSBvcHRSYWRpeCAtIHRoZSByYWRpeCBpbiB3aGljaCB0aGUgdGV4dCBpcyB3cml0dGVuLlxuICAgKi9cbiAgc3RhdGljIGZyb21TdHJpbmcoc3RyOiBzdHJpbmcsIG9wdFJhZGl4OiBudW1iZXIpOiBUaW1lc3RhbXAge1xuICAgIHJldHVybiBuZXcgVGltZXN0YW1wKExvbmcuZnJvbVN0cmluZyhzdHIsIHRydWUsIG9wdFJhZGl4KSk7XG4gIH1cblxuICBbU3ltYm9sLmZvcihcIkRlbm8uY3VzdG9tSW5zcGVjdFwiKV0oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYG5ldyBUaW1lc3RhbXAoeyB0OiAke3RoaXMuZ2V0SGlnaEJpdHMoKX0sIGk6ICR7dGhpcy5nZXRMb3dCaXRzKCl9IH0pYDtcbiAgfVxufVxuIl19
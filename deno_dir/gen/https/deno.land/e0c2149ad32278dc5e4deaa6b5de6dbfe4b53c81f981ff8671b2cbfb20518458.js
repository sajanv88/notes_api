import { parseSrvUrl } from "./uri.ts";
var AllowedOption;
(function (AllowedOption) {
    AllowedOption["authSource"] = "authSource";
    AllowedOption["replicaSet"] = "replicaSet";
    AllowedOption["loadBalanced"] = "loadBalanced";
})(AllowedOption || (AllowedOption = {}));
function isAllowedOption(key) {
    return Object.values(AllowedOption).includes(key);
}
class SRVError extends Error {
    constructor(message) {
        super(message);
        this.name = "SRVError";
    }
}
export class Srv {
    resolver;
    constructor(resolver = { resolveDns: Deno.resolveDns }) {
        this.resolver = resolver;
    }
    async resolveSrvUrl(urlString) {
        const options = parseSrvUrl(urlString);
        const { srvServer, ...connectOptions } = options;
        if (!srvServer) {
            throw new SRVError(`Could not parse srv server address from ${urlString}`);
        }
        const resolveResult = await this.resolve(srvServer);
        return {
            servers: resolveResult.servers,
            ...resolveResult.options,
            ...connectOptions,
        };
    }
    async resolve(url) {
        const tokens = url.split(".");
        if (tokens.length < 3) {
            throw new SRVError(`Expected url in format 'host.domain.tld', received ${url}`);
        }
        const srvRecord = await this.resolver.resolveDns(`_mongodb._tcp.${url}`, "SRV");
        if (!(srvRecord?.length > 0)) {
            throw new SRVError(`Expected at least one SRV record, received ${srvRecord
                ?.length} for url ${url}`);
        }
        const txtRecords = await this.resolver.resolveDns(url, "TXT");
        if (txtRecords?.length !== 1) {
            throw new SRVError(`Expected exactly one TXT record, received ${txtRecords
                ?.length} for url ${url}`);
        }
        const servers = srvRecord.map((record) => {
            return {
                host: record.target,
                port: record.port,
            };
        });
        const optionsUri = txtRecords[0].join("");
        const options = {
            valid: {},
            illegal: [],
        };
        for (const option of optionsUri.split("&")) {
            const [key, value] = option.split("=");
            if (isAllowedOption(key) && !!value)
                options.valid[key] = value;
            else
                options.illegal.push(option);
        }
        if (options.illegal.length !== 0) {
            throw new SRVError(`Illegal uri options: ${options.illegal}. Allowed options: ${Object.values(AllowedOption)}`);
        }
        return {
            servers,
            options: options.valid,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3J2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3J2LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHdkMsSUFBSyxhQUlKO0FBSkQsV0FBSyxhQUFhO0lBQ2hCLDBDQUF5QixDQUFBO0lBQ3pCLDBDQUF5QixDQUFBO0lBQ3pCLDhDQUE2QixDQUFBO0FBQy9CLENBQUMsRUFKSSxhQUFhLEtBQWIsYUFBYSxRQUlqQjtBQUVELFNBQVMsZUFBZSxDQUFDLEdBQVk7SUFDbkMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFvQixDQUFDLENBQUM7QUFDckUsQ0FBQztBQWlCRCxNQUFNLFFBQVMsU0FBUSxLQUFLO0lBQzFCLFlBQVksT0FBZ0I7UUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLEdBQUc7SUFDZCxRQUFRLENBQVc7SUFFbkIsWUFBWSxRQUFRLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNwRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFpQjtRQUNuQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLGNBQWMsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNqRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsTUFBTSxJQUFJLFFBQVEsQ0FDaEIsMkNBQTJDLFNBQVMsRUFBRSxDQUN2RCxDQUFDO1NBQ0g7UUFDRCxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEQsT0FBTztZQUNMLE9BQU8sRUFBRSxhQUFhLENBQUMsT0FBTztZQUU5QixHQUFHLGFBQWEsQ0FBQyxPQUFPO1lBQ3hCLEdBQUcsY0FBYztTQUNsQixDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBVztRQUN2QixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckIsTUFBTSxJQUFJLFFBQVEsQ0FDaEIsc0RBQXNELEdBQUcsRUFBRSxDQUM1RCxDQUFDO1NBQ0g7UUFFRCxNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUM5QyxpQkFBaUIsR0FBRyxFQUFFLEVBQ3RCLEtBQUssQ0FDTixDQUFDO1FBQ0YsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRTtZQUM1QixNQUFNLElBQUksUUFBUSxDQUNoQiw4Q0FBOEMsU0FBUztnQkFDckQsRUFBRSxNQUFNLFlBQVksR0FBRyxFQUFFLENBQzVCLENBQUM7U0FDSDtRQUNELE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlELElBQUksVUFBVSxFQUFFLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDNUIsTUFBTSxJQUFJLFFBQVEsQ0FDaEIsNkNBQTZDLFVBQVU7Z0JBQ3JELEVBQUUsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUM1QixDQUFDO1NBQ0g7UUFFRCxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDdkMsT0FBTztnQkFDTCxJQUFJLEVBQUUsTUFBTSxDQUFDLE1BQU07Z0JBQ25CLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTthQUNsQixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sT0FBTyxHQUEwRDtZQUNyRSxLQUFLLEVBQUUsRUFBRTtZQUNULE9BQU8sRUFBRSxFQUFFO1NBQ1osQ0FBQztRQUNGLEtBQUssTUFBTSxNQUFNLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxQyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkMsSUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUs7Z0JBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7O2dCQUMzRCxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNuQztRQUVELElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSxRQUFRLENBQ2hCLHdCQUF3QixPQUFPLENBQUMsT0FBTyxzQkFDckMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQzdCLEVBQUUsQ0FDSCxDQUFDO1NBQ0g7UUFFRCxPQUFPO1lBQ0wsT0FBTztZQUNQLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSztTQUN2QixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VTcnZVcmwgfSBmcm9tIFwiLi91cmkudHNcIjtcbmltcG9ydCB7IENvbm5lY3RPcHRpb25zIH0gZnJvbSBcIi4uL3R5cGVzLnRzXCI7XG5cbmVudW0gQWxsb3dlZE9wdGlvbiB7XG4gIGF1dGhTb3VyY2UgPSBcImF1dGhTb3VyY2VcIixcbiAgcmVwbGljYVNldCA9IFwicmVwbGljYVNldFwiLFxuICBsb2FkQmFsYW5jZWQgPSBcImxvYWRCYWxhbmNlZFwiLFxufVxuXG5mdW5jdGlvbiBpc0FsbG93ZWRPcHRpb24oa2V5OiB1bmtub3duKToga2V5IGlzIEFsbG93ZWRPcHRpb24ge1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhBbGxvd2VkT3B0aW9uKS5pbmNsdWRlcyhrZXkgYXMgQWxsb3dlZE9wdGlvbik7XG59XG5cbmludGVyZmFjZSBSZXNvbHZlciB7XG4gIHJlc29sdmVEbnM6IHR5cGVvZiBEZW5vLnJlc29sdmVEbnM7XG59XG5cbmludGVyZmFjZSBTUlZSZXNvbHZlUmVzdWx0T3B0aW9ucyB7XG4gIGF1dGhTb3VyY2U/OiBzdHJpbmc7XG4gIHJlcGxpY2FTZXQ/OiBzdHJpbmc7XG4gIGxvYWRCYWxhbmNlZD86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFNSVlJlc29sdmVSZXN1bHQge1xuICBzZXJ2ZXJzOiB7IGhvc3Q6IHN0cmluZzsgcG9ydDogbnVtYmVyIH1bXTtcbiAgb3B0aW9uczogU1JWUmVzb2x2ZVJlc3VsdE9wdGlvbnM7XG59XG5cbmNsYXNzIFNSVkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJTUlZFcnJvclwiO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTcnYge1xuICByZXNvbHZlcjogUmVzb2x2ZXI7XG5cbiAgY29uc3RydWN0b3IocmVzb2x2ZXIgPSB7IHJlc29sdmVEbnM6IERlbm8ucmVzb2x2ZURucyB9KSB7XG4gICAgdGhpcy5yZXNvbHZlciA9IHJlc29sdmVyO1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZVNydlVybCh1cmxTdHJpbmc6IHN0cmluZyk6IFByb21pc2U8Q29ubmVjdE9wdGlvbnM+IHtcbiAgICBjb25zdCBvcHRpb25zID0gcGFyc2VTcnZVcmwodXJsU3RyaW5nKTtcbiAgICBjb25zdCB7IHNydlNlcnZlciwgLi4uY29ubmVjdE9wdGlvbnMgfSA9IG9wdGlvbnM7XG4gICAgaWYgKCFzcnZTZXJ2ZXIpIHtcbiAgICAgIHRocm93IG5ldyBTUlZFcnJvcihcbiAgICAgICAgYENvdWxkIG5vdCBwYXJzZSBzcnYgc2VydmVyIGFkZHJlc3MgZnJvbSAke3VybFN0cmluZ31gLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZVJlc3VsdCA9IGF3YWl0IHRoaXMucmVzb2x2ZShzcnZTZXJ2ZXIpO1xuICAgIHJldHVybiB7XG4gICAgICBzZXJ2ZXJzOiByZXNvbHZlUmVzdWx0LnNlcnZlcnMsXG4gICAgICAvLyBUT0RPOiBDaGVjayBhbmQgdGhyb3cgb24gaW52YWxpZCBvcHRpb25zXG4gICAgICAuLi5yZXNvbHZlUmVzdWx0Lm9wdGlvbnMsXG4gICAgICAuLi5jb25uZWN0T3B0aW9ucyxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZSh1cmw6IHN0cmluZyk6IFByb21pc2U8U1JWUmVzb2x2ZVJlc3VsdD4ge1xuICAgIGNvbnN0IHRva2VucyA9IHVybC5zcGxpdChcIi5cIik7XG4gICAgaWYgKHRva2Vucy5sZW5ndGggPCAzKSB7XG4gICAgICB0aHJvdyBuZXcgU1JWRXJyb3IoXG4gICAgICAgIGBFeHBlY3RlZCB1cmwgaW4gZm9ybWF0ICdob3N0LmRvbWFpbi50bGQnLCByZWNlaXZlZCAke3VybH1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBzcnZSZWNvcmQgPSBhd2FpdCB0aGlzLnJlc29sdmVyLnJlc29sdmVEbnMoXG4gICAgICBgX21vbmdvZGIuX3RjcC4ke3VybH1gLFxuICAgICAgXCJTUlZcIixcbiAgICApO1xuICAgIGlmICghKHNydlJlY29yZD8ubGVuZ3RoID4gMCkpIHtcbiAgICAgIHRocm93IG5ldyBTUlZFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIGF0IGxlYXN0IG9uZSBTUlYgcmVjb3JkLCByZWNlaXZlZCAke3NydlJlY29yZFxuICAgICAgICAgID8ubGVuZ3RofSBmb3IgdXJsICR7dXJsfWAsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCB0eHRSZWNvcmRzID0gYXdhaXQgdGhpcy5yZXNvbHZlci5yZXNvbHZlRG5zKHVybCwgXCJUWFRcIik7XG4gICAgaWYgKHR4dFJlY29yZHM/Lmxlbmd0aCAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IFNSVkVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgZXhhY3RseSBvbmUgVFhUIHJlY29yZCwgcmVjZWl2ZWQgJHt0eHRSZWNvcmRzXG4gICAgICAgICAgPy5sZW5ndGh9IGZvciB1cmwgJHt1cmx9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VydmVycyA9IHNydlJlY29yZC5tYXAoKHJlY29yZCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaG9zdDogcmVjb3JkLnRhcmdldCxcbiAgICAgICAgcG9ydDogcmVjb3JkLnBvcnQsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgY29uc3Qgb3B0aW9uc1VyaSA9IHR4dFJlY29yZHNbMF0uam9pbihcIlwiKTtcbiAgICBjb25zdCBvcHRpb25zOiB7IHZhbGlkOiBTUlZSZXNvbHZlUmVzdWx0T3B0aW9uczsgaWxsZWdhbDogc3RyaW5nW10gfSA9IHtcbiAgICAgIHZhbGlkOiB7fSxcbiAgICAgIGlsbGVnYWw6IFtdLFxuICAgIH07XG4gICAgZm9yIChjb25zdCBvcHRpb24gb2Ygb3B0aW9uc1VyaS5zcGxpdChcIiZcIikpIHtcbiAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IG9wdGlvbi5zcGxpdChcIj1cIik7XG4gICAgICBpZiAoaXNBbGxvd2VkT3B0aW9uKGtleSkgJiYgISF2YWx1ZSkgb3B0aW9ucy52YWxpZFtrZXldID0gdmFsdWU7XG4gICAgICBlbHNlIG9wdGlvbnMuaWxsZWdhbC5wdXNoKG9wdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaWxsZWdhbC5sZW5ndGggIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBTUlZFcnJvcihcbiAgICAgICAgYElsbGVnYWwgdXJpIG9wdGlvbnM6ICR7b3B0aW9ucy5pbGxlZ2FsfS4gQWxsb3dlZCBvcHRpb25zOiAke1xuICAgICAgICAgIE9iamVjdC52YWx1ZXMoQWxsb3dlZE9wdGlvbilcbiAgICAgICAgfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzZXJ2ZXJzLFxuICAgICAgb3B0aW9uczogb3B0aW9ucy52YWxpZCxcbiAgICB9O1xuICB9XG59XG4iXX0=
import { assert, importKey, sign } from "./util.ts";
function compareArrayBuffer(a, b) {
    assert(a.byteLength === b.byteLength, "ArrayBuffer lengths must match.");
    const va = new DataView(a);
    const vb = new DataView(b);
    const length = va.byteLength;
    let out = 0;
    let i = -1;
    while (++i < length) {
        out |= va.getUint8(i) ^ vb.getUint8(i);
    }
    return out === 0;
}
export async function compare(a, b) {
    const key = new Uint8Array(32);
    globalThis.crypto.getRandomValues(key);
    const cryptoKey = await importKey(key);
    const ah = await sign(a, cryptoKey);
    const bh = await sign(b, cryptoKey);
    return compareArrayBuffer(ah, bh);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHNzQ29tcGFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRzc0NvbXBhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR3BELFNBQVMsa0JBQWtCLENBQUMsQ0FBYyxFQUFFLENBQWM7SUFDeEQsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDLFVBQVUsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO0lBQ3pFLE1BQU0sRUFBRSxHQUFHLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLE1BQU0sRUFBRSxHQUFHLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUM7SUFDN0IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDWCxPQUFPLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRTtRQUNuQixHQUFHLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hDO0lBQ0QsT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ25CLENBQUM7QUFPRCxNQUFNLENBQUMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxDQUFPLEVBQUUsQ0FBTztJQUM1QyxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQixVQUFVLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxNQUFNLFNBQVMsR0FBRyxNQUFNLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDcEMsTUFBTSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sa0JBQWtCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyIHRoZSBvYWsgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbi8vIFRoaXMgd2FzIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9zdXJ5YWdoL3Rzc2NtcCB3aGljaCBwcm92aWRlcyBhXG4vLyB0aW1pbmcgc2FmZSBzdHJpbmcgY29tcGFyaXNvbiB0byBhdm9pZCB0aW1pbmcgYXR0YWNrcyBhcyBkZXNjcmliZWQgaW5cbi8vIGh0dHBzOi8vY29kYWhhbGUuY29tL2EtbGVzc29uLWluLXRpbWluZy1hdHRhY2tzLy5cblxuaW1wb3J0IHsgYXNzZXJ0LCBpbXBvcnRLZXksIHNpZ24gfSBmcm9tIFwiLi91dGlsLnRzXCI7XG5pbXBvcnQgdHlwZSB7IERhdGEgfSBmcm9tIFwiLi90eXBlcy5kLnRzXCI7XG5cbmZ1bmN0aW9uIGNvbXBhcmVBcnJheUJ1ZmZlcihhOiBBcnJheUJ1ZmZlciwgYjogQXJyYXlCdWZmZXIpOiBib29sZWFuIHtcbiAgYXNzZXJ0KGEuYnl0ZUxlbmd0aCA9PT0gYi5ieXRlTGVuZ3RoLCBcIkFycmF5QnVmZmVyIGxlbmd0aHMgbXVzdCBtYXRjaC5cIik7XG4gIGNvbnN0IHZhID0gbmV3IERhdGFWaWV3KGEpO1xuICBjb25zdCB2YiA9IG5ldyBEYXRhVmlldyhiKTtcbiAgY29uc3QgbGVuZ3RoID0gdmEuYnl0ZUxlbmd0aDtcbiAgbGV0IG91dCA9IDA7XG4gIGxldCBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICBvdXQgfD0gdmEuZ2V0VWludDgoaSkgXiB2Yi5nZXRVaW50OChpKTtcbiAgfVxuICByZXR1cm4gb3V0ID09PSAwO1xufVxuXG4vKiogQ29tcGFyZSB0d28gc3RyaW5ncywgVWludDhBcnJheXMsIEFycmF5QnVmZmVycywgb3IgYXJyYXlzIG9mIG51bWJlcnMgaW4gYVxuICogd2F5IHRoYXQgYXZvaWRzIHRpbWluZyBiYXNlZCBhdHRhY2tzIG9uIHRoZSBjb21wYXJpc29ucyBvbiB0aGUgdmFsdWVzLlxuICpcbiAqIFRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBtYXRjaCwgb3IgYGZhbHNlYCwgaWYgdGhleVxuICogZG8gbm90IG1hdGNoLiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbXBhcmUoYTogRGF0YSwgYjogRGF0YSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCBrZXkgPSBuZXcgVWludDhBcnJheSgzMik7XG4gIGdsb2JhbFRoaXMuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhrZXkpO1xuICBjb25zdCBjcnlwdG9LZXkgPSBhd2FpdCBpbXBvcnRLZXkoa2V5KTtcbiAgY29uc3QgYWggPSBhd2FpdCBzaWduKGEsIGNyeXB0b0tleSk7XG4gIGNvbnN0IGJoID0gYXdhaXQgc2lnbihiLCBjcnlwdG9LZXkpO1xuICByZXR1cm4gY29tcGFyZUFycmF5QnVmZmVyKGFoLCBiaCk7XG59XG4iXX0=
import { saslprep } from "../utils/saslprep/mod.ts";
import { AuthPlugin } from "./base.ts";
import { MongoDriverError } from "../error.ts";
import { b64, Bson, crypto as stdCrypto, hex } from "../../deps.ts";
import { driverMetadata } from "../protocol/mod.ts";
import { pbkdf2 } from "./pbkdf2.ts";
const enc = new TextEncoder();
const dec = new TextDecoder();
export class ScramAuthPlugin extends AuthPlugin {
    cryptoMethod;
    constructor(cryptoMethod) {
        super();
        this.cryptoMethod = cryptoMethod || "sha256";
    }
    prepare(authContext) {
        const handshakeDoc = {
            ismaster: true,
            client: driverMetadata,
            compression: authContext.options.compression,
        };
        const request = {
            ...handshakeDoc,
            ...{
                speculativeAuthenticate: {
                    ...makeFirstMessage(this.cryptoMethod, authContext.options.credential, authContext.nonce),
                    ...{ db: authContext.options.credential.db },
                },
            },
        };
        return request;
    }
    auth(authContext) {
        const response = authContext.response;
        if (response && response.speculativeAuthenticate) {
            return continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);
        }
        return executeScram(this.cryptoMethod, authContext);
    }
}
export function cleanUsername(username) {
    return username.replace("=", "=3D").replace(",", "=2C");
}
export function clientFirstMessageBare(username, nonce) {
    return Uint8Array.from([
        ...enc.encode("n="),
        ...enc.encode(username),
        ...enc.encode(",r="),
        ...enc.encode(b64.encode(nonce)),
    ]);
}
export function makeFirstMessage(cryptoMethod, credentials, nonce) {
    const username = cleanUsername(credentials.username);
    const mechanism = cryptoMethod === "sha1" ? "SCRAM-SHA-1" : "SCRAM-SHA-256";
    return {
        saslStart: 1,
        mechanism,
        payload: new Bson.Binary(Uint8Array.from([...enc.encode("n,,"), ...clientFirstMessageBare(username, nonce)])),
        autoAuthorize: 1,
        options: { skipEmptyExchange: true },
    };
}
export async function executeScram(cryptoMethod, authContext) {
    const { protocol, credentials } = authContext;
    if (!credentials) {
        throw new MongoDriverError("AuthContext must provide credentials.");
    }
    if (!authContext.nonce) {
        throw new MongoDriverError("AuthContext must contain a valid nonce property");
    }
    const nonce = authContext.nonce;
    const db = credentials.db;
    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);
    const result = await protocol.commandSingle(db, saslStartCmd);
    return continueScramConversation(cryptoMethod, result, authContext);
}
export async function continueScramConversation(cryptoMethod, response, authContext) {
    const protocol = authContext.protocol;
    const credentials = authContext.credentials;
    if (!credentials) {
        throw new MongoDriverError("AuthContext must provide credentials.");
    }
    if (!authContext.nonce) {
        throw new MongoDriverError("Unable to continue SCRAM without valid nonce");
    }
    const nonce = authContext.nonce;
    const db = credentials.db;
    const username = cleanUsername(credentials.username);
    const password = credentials.password;
    let processedPassword;
    if (cryptoMethod === "sha256") {
        processedPassword = saslprep(password);
    }
    else {
        processedPassword = await passwordDigest(username, password);
    }
    const payload = fixPayload(dec.decode(response.payload.buffer));
    const dict = parsePayload(payload);
    const iterations = parseInt(dict.i, 10);
    if (iterations && iterations < 4096) {
        throw new MongoDriverError(`Server returned an invalid iteration count ${iterations}`);
    }
    const salt = dict.s;
    const rnonce = dict.r;
    if (rnonce.startsWith("nonce")) {
        throw new MongoDriverError(`Server returned an invalid nonce: ${rnonce}`);
    }
    const withoutProof = `c=biws,r=${rnonce}`;
    const saltedPassword = await HI(processedPassword, b64.decode(salt), iterations, cryptoMethod);
    const clientKey = await HMAC(cryptoMethod, saltedPassword, "Client Key");
    const serverKey = await HMAC(cryptoMethod, saltedPassword, "Server Key");
    const storedKey = await H(cryptoMethod, clientKey);
    const authMessage = [
        dec.decode(clientFirstMessageBare(username, nonce)),
        payload,
        withoutProof,
    ].join(",");
    const clientSignature = await HMAC(cryptoMethod, storedKey, authMessage);
    const clientProof = `p=${xor(clientKey, clientSignature)}`;
    const clientFinal = [withoutProof, clientProof].join(",");
    const serverSignature = await HMAC(cryptoMethod, serverKey, authMessage);
    const saslContinueCmd = {
        saslContinue: 1,
        conversationId: response.conversationId,
        payload: new Bson.Binary(enc.encode(clientFinal)),
    };
    const result = await protocol.commandSingle(db, saslContinueCmd);
    const parsedResponse = parsePayload(fixPayload2(dec.decode(result.payload.buffer)));
    if (!compareDigest(b64.decode(parsedResponse.v), new Uint8Array(serverSignature))) {
    }
    if (result.done) {
        return result;
    }
    const retrySaslContinueCmd = {
        saslContinue: 1,
        conversationId: result.conversationId,
        payload: new Uint8Array(0),
    };
    return protocol.commandSingle(db, retrySaslContinueCmd);
}
export function fixPayload(payload) {
    const temp = payload.split("=");
    temp.shift();
    const it = parseInt(temp.pop(), 10);
    payload = "r=" + temp.join("=") + "=" + it;
    return payload;
}
export function fixPayload2(payload) {
    let temp = payload.split("v=");
    temp.shift();
    payload = temp.join("v=");
    temp = payload.split("ok");
    temp.pop();
    return "v=" + temp.join("ok");
}
export function parsePayload(payload) {
    const dict = {};
    const parts = payload.split(",");
    for (let i = 0; i < parts.length; i++) {
        const valueParts = parts[i].split("=");
        dict[valueParts[0]] = valueParts[1];
    }
    return dict;
}
export async function passwordDigest(username, password) {
    if (typeof username !== "string") {
        throw new MongoDriverError("username must be a string");
    }
    if (typeof password !== "string") {
        throw new MongoDriverError("password must be a string");
    }
    if (password.length === 0) {
        throw new MongoDriverError("password cannot be empty");
    }
    const result = await stdCrypto.subtle.digest("MD5", enc.encode(`${username}:mongo:${password}`));
    return dec.decode(hex.encode(new Uint8Array(result)));
}
export function xor(_a, _b) {
    const a = new Uint8Array(_a);
    const b = new Uint8Array(_b);
    const length = Math.max(a.length, b.length);
    const res = new Uint8Array(length);
    for (let i = 0; i < length; i += 1) {
        res[i] = a[i] ^ b[i];
    }
    return b64.encode(res);
}
export function H(method, text) {
    return crypto.subtle.digest(method === "sha256" ? "SHA-256" : "SHA-1", text);
}
export async function HMAC(method, secret, text) {
    const key = await crypto.subtle.importKey("raw", secret, {
        name: "HMAC",
        hash: method === "sha256" ? "SHA-256" : "SHA-1",
    }, false, ["sign", "verify"]);
    const signature = await crypto.subtle.sign("HMAC", key, enc.encode(text));
    return signature;
}
let _hiCache = {};
let _hiCacheCount = 0;
function _hiCachePurge() {
    _hiCache = {};
    _hiCacheCount = 0;
}
const hiLengthMap = {
    sha256: 32,
    sha1: 20,
};
export async function HI(data, salt, iterations, cryptoMethod) {
    const key = [data, b64.encode(salt), iterations].join("_");
    if (_hiCache[key] !== undefined) {
        return _hiCache[key];
    }
    const saltedData = await pbkdf2(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);
    if (_hiCacheCount >= 200) {
        _hiCachePurge();
    }
    _hiCache[key] = saltedData;
    _hiCacheCount += 1;
    return saltedData;
}
export function compareDigest(lhs, rhs) {
    if (lhs.length !== rhs.length) {
        return false;
    }
    let result = 0;
    for (let i = 0; i < lhs.length; i++) {
        result |= lhs[i] ^ rhs[i];
    }
    return result === 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY3JhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxFQUFlLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxJQUFJLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFJckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUM5QixNQUFNLEdBQUcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBRTlCLE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7SUFDN0MsWUFBWSxDQUFlO0lBQzNCLFlBQVksWUFBMEI7UUFDcEMsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksSUFBSSxRQUFRLENBQUM7SUFDL0MsQ0FBQztJQUVELE9BQU8sQ0FBQyxXQUF3QjtRQUM5QixNQUFNLFlBQVksR0FBdUI7WUFDdkMsUUFBUSxFQUFFLElBQUk7WUFDZCxNQUFNLEVBQUUsY0FBYztZQUN0QixXQUFXLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXO1NBQzdDLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRztZQUNkLEdBQUcsWUFBWTtZQUNmLEdBQUc7Z0JBQ0QsdUJBQXVCLEVBQUU7b0JBQ3ZCLEdBQUcsZ0JBQWdCLENBQ2pCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVyxFQUMvQixXQUFXLENBQUMsS0FBTSxD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TSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDM0I7SUFFRCxPQUFPLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWRlbnRpYWwsIERvY3VtZW50IH0gZnJvbSBcIi4uL3R5cGVzLnRzXCI7XG5pbXBvcnQgeyBzYXNscHJlcCB9IGZyb20gXCIuLi91dGlscy9zYXNscHJlcC9tb2QudHNcIjtcbmltcG9ydCB7IEF1dGhDb250ZXh0LCBBdXRoUGx1Z2luIH0gZnJvbSBcIi4vYmFzZS50c1wiO1xuaW1wb3J0IHsgSGFuZHNoYWtlRG9jdW1lbnQgfSBmcm9tIFwiLi4vcHJvdG9jb2wvaGFuZHNoYWtlLnRzXCI7XG5pbXBvcnQgeyBNb25nb0RyaXZlckVycm9yIH0gZnJvbSBcIi4uL2Vycm9yLnRzXCI7XG5pbXBvcnQgeyBiNjQsIEJzb24sIGNyeXB0byBhcyBzdGRDcnlwdG8sIGhleCB9IGZyb20gXCIuLi8uLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBkcml2ZXJNZXRhZGF0YSB9IGZyb20gXCIuLi9wcm90b2NvbC9tb2QudHNcIjtcbmltcG9ydCB7IHBia2RmMiB9IGZyb20gXCIuL3Bia2RmMi50c1wiO1xuXG50eXBlIENyeXB0b01ldGhvZCA9IFwic2hhMVwiIHwgXCJzaGEyNTZcIjtcblxuY29uc3QgZW5jID0gbmV3IFRleHRFbmNvZGVyKCk7XG5jb25zdCBkZWMgPSBuZXcgVGV4dERlY29kZXIoKTtcblxuZXhwb3J0IGNsYXNzIFNjcmFtQXV0aFBsdWdpbiBleHRlbmRzIEF1dGhQbHVnaW4ge1xuICBjcnlwdG9NZXRob2Q6IENyeXB0b01ldGhvZDtcbiAgY29uc3RydWN0b3IoY3J5cHRvTWV0aG9kOiBDcnlwdG9NZXRob2QpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY3J5cHRvTWV0aG9kID0gY3J5cHRvTWV0aG9kIHx8IFwic2hhMjU2XCI7XG4gIH1cblxuICBwcmVwYXJlKGF1dGhDb250ZXh0OiBBdXRoQ29udGV4dCk6IERvY3VtZW50IHtcbiAgICBjb25zdCBoYW5kc2hha2VEb2MgPSA8SGFuZHNoYWtlRG9jdW1lbnQ+IHtcbiAgICAgIGlzbWFzdGVyOiB0cnVlLFxuICAgICAgY2xpZW50OiBkcml2ZXJNZXRhZGF0YSxcbiAgICAgIGNvbXByZXNzaW9uOiBhdXRoQ29udGV4dC5vcHRpb25zLmNvbXByZXNzaW9uLFxuICAgIH07XG4gICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgIC4uLmhhbmRzaGFrZURvYyxcbiAgICAgIC4uLntcbiAgICAgICAgc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU6IHtcbiAgICAgICAgICAuLi5tYWtlRmlyc3RNZXNzYWdlKFxuICAgICAgICAgICAgdGhpcy5jcnlwdG9NZXRob2QsXG4gICAgICAgICAgICBhdXRoQ29udGV4dC5vcHRpb25zLmNyZWRlbnRpYWwhLFxuICAgICAgICAgICAgYXV0aENvbnRleHQubm9uY2UhLFxuICAgICAgICAgICksXG4gICAgICAgICAgLi4ueyBkYjogYXV0aENvbnRleHQub3B0aW9ucy5jcmVkZW50aWFsIS5kYiB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiByZXF1ZXN0O1xuICB9XG5cbiAgYXV0aChhdXRoQ29udGV4dDogQXV0aENvbnRleHQpOiBQcm9taXNlPERvY3VtZW50PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhdXRoQ29udGV4dC5yZXNwb25zZTtcbiAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3BlY3VsYXRpdmVBdXRoZW50aWNhdGUpIHtcbiAgICAgIHJldHVybiBjb250aW51ZVNjcmFtQ29udmVyc2F0aW9uKFxuICAgICAgICB0aGlzLmNyeXB0b01ldGhvZCxcbiAgICAgICAgcmVzcG9uc2Uuc3BlY3VsYXRpdmVBdXRoZW50aWNhdGUsXG4gICAgICAgIGF1dGhDb250ZXh0LFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4ZWN1dGVTY3JhbSh0aGlzLmNyeXB0b01ldGhvZCwgYXV0aENvbnRleHQpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2xlYW5Vc2VybmFtZSh1c2VybmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiB1c2VybmFtZS5yZXBsYWNlKFwiPVwiLCBcIj0zRFwiKS5yZXBsYWNlKFwiLFwiLCBcIj0yQ1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaWVudEZpcnN0TWVzc2FnZUJhcmUodXNlcm5hbWU6IHN0cmluZywgbm9uY2U6IFVpbnQ4QXJyYXkpIHtcbiAgLy8gTk9URTogVGhpcyBpcyBkb25lIGIvYyBKYXZhc2NyaXB0IHVzZXMgVVRGLTE2LCBidXQgdGhlIHNlcnZlciBpcyBoYXNoaW5nIGluIFVURi04LlxuICAvLyBTaW5jZSB0aGUgdXNlcm5hbWUgaXMgbm90IHNhc2wtcHJlcC1kLCB3ZSBuZWVkIHRvIGRvIHRoaXMgaGVyZS5cbiAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShcbiAgICBbXG4gICAgICAuLi5lbmMuZW5jb2RlKFwibj1cIiksXG4gICAgICAuLi5lbmMuZW5jb2RlKHVzZXJuYW1lKSxcbiAgICAgIC4uLmVuYy5lbmNvZGUoXCIscj1cIiksXG4gICAgICAuLi5lbmMuZW5jb2RlKGI2NC5lbmNvZGUobm9uY2UpKSxcbiAgICBdLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUZpcnN0TWVzc2FnZShcbiAgY3J5cHRvTWV0aG9kOiBDcnlwdG9NZXRob2QsXG4gIGNyZWRlbnRpYWxzOiBDcmVkZW50aWFsLFxuICBub25jZTogVWludDhBcnJheSxcbikge1xuICBjb25zdCB1c2VybmFtZSA9IGNsZWFuVXNlcm5hbWUoY3JlZGVudGlhbHMudXNlcm5hbWUhKTtcbiAgY29uc3QgbWVjaGFuaXNtID0gY3J5cHRvTWV0aG9kID09PSBcInNoYTFcIiA/IFwiU0NSQU0tU0hBLTFcIiA6IFwiU0NSQU0tU0hBLTI1NlwiO1xuXG4gIC8vIE5PVEU6IFRoaXMgaXMgZG9uZSBiL2MgSmF2YXNjcmlwdCB1c2VzIFVURi0xNiwgYnV0IHRoZSBzZXJ2ZXIgaXMgaGFzaGluZyBpbiBVVEYtOC5cbiAgLy8gU2luY2UgdGhlIHVzZXJuYW1lIGlzIG5vdCBzYXNsLXByZXAtZCwgd2UgbmVlZCB0byBkbyB0aGlzIGhlcmUuXG4gIHJldHVybiB7XG4gICAgc2FzbFN0YXJ0OiAxLFxuICAgIG1lY2hhbmlzbSxcbiAgICBwYXlsb2FkOiBuZXcgQnNvbi5CaW5hcnkoXG4gICAgICBVaW50OEFycmF5LmZyb20oXG4gICAgICAgIFsuLi5lbmMuZW5jb2RlKFwibiwsXCIpLCAuLi5jbGllbnRGaXJzdE1lc3NhZ2VCYXJlKHVzZXJuYW1lLCBub25jZSldLFxuICAgICAgKSxcbiAgICApLFxuICAgIGF1dG9BdXRob3JpemU6IDEsXG4gICAgb3B0aW9uczogeyBza2lwRW1wdHlFeGNoYW5nZTogdHJ1ZSB9LFxuICB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZVNjcmFtKFxuICBjcnlwdG9NZXRob2Q6IENyeXB0b01ldGhvZCxcbiAgYXV0aENvbnRleHQ6IEF1dGhDb250ZXh0LFxuKSB7XG4gIGNvbnN0IHsgcHJvdG9jb2wsIGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgaWYgKCFjcmVkZW50aWFscykge1xuICAgIHRocm93IG5ldyBNb25nb0RyaXZlckVycm9yKFwiQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLlwiKTtcbiAgfVxuICBpZiAoIWF1dGhDb250ZXh0Lm5vbmNlKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvRHJpdmVyRXJyb3IoXG4gICAgICBcIkF1dGhDb250ZXh0IG11c3QgY29udGFpbiBhIHZhbGlkIG5vbmNlIHByb3BlcnR5XCIsXG4gICAgKTtcbiAgfVxuICBjb25zdCBub25jZSA9IGF1dGhDb250ZXh0Lm5vbmNlO1xuICBjb25zdCBkYiA9IGNyZWRlbnRpYWxzLmRiITtcblxuICBjb25zdCBzYXNsU3RhcnRDbWQgPSBtYWtlRmlyc3RNZXNzYWdlKGNyeXB0b01ldGhvZCwgY3JlZGVudGlhbHMsIG5vbmNlKTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdG9jb2wuY29tbWFuZFNpbmdsZShkYiwgc2FzbFN0YXJ0Q21kKTtcbiAgcmV0dXJuIGNvbnRpbnVlU2NyYW1Db252ZXJzYXRpb24oY3J5cHRvTWV0aG9kLCByZXN1bHQsIGF1dGhDb250ZXh0KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbnRpbnVlU2NyYW1Db252ZXJzYXRpb24oXG4gIGNyeXB0b01ldGhvZDogQ3J5cHRvTWV0aG9kLFxuICByZXNwb25zZTogRG9jdW1lbnQsXG4gIGF1dGhDb250ZXh0OiBBdXRoQ29udGV4dCxcbikge1xuICBjb25zdCBwcm90b2NvbCA9IGF1dGhDb250ZXh0LnByb3RvY29sO1xuICBjb25zdCBjcmVkZW50aWFscyA9IGF1dGhDb250ZXh0LmNyZWRlbnRpYWxzO1xuICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvRHJpdmVyRXJyb3IoXCJBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuXCIpO1xuICB9XG4gIGlmICghYXV0aENvbnRleHQubm9uY2UpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29Ecml2ZXJFcnJvcihcIlVuYWJsZSB0byBjb250aW51ZSBTQ1JBTSB3aXRob3V0IHZhbGlkIG5vbmNlXCIpO1xuICB9XG4gIGNvbnN0IG5vbmNlID0gYXV0aENvbnRleHQubm9uY2U7XG5cbiAgY29uc3QgZGIgPSBjcmVkZW50aWFscy5kYiE7XG4gIGNvbnN0IHVzZXJuYW1lID0gY2xlYW5Vc2VybmFtZShjcmVkZW50aWFscy51c2VybmFtZSEpO1xuICBjb25zdCBwYXNzd29yZCA9IGNyZWRlbnRpYWxzLnBhc3N3b3JkITtcblxuICBsZXQgcHJvY2Vzc2VkUGFzc3dvcmQ7XG4gIGlmIChjcnlwdG9NZXRob2QgPT09IFwic2hhMjU2XCIpIHtcbiAgICBwcm9jZXNzZWRQYXNzd29yZCA9IHNhc2xwcmVwKHBhc3N3b3JkKTtcbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzZWRQYXNzd29yZCA9IGF3YWl0IHBhc3N3b3JkRGlnZXN0KHVzZXJuYW1lLCBwYXNzd29yZCk7XG4gIH1cblxuICBjb25zdCBwYXlsb2FkID0gZml4UGF5bG9hZChkZWMuZGVjb2RlKHJlc3BvbnNlLnBheWxvYWQuYnVmZmVyKSk7XG4gIGNvbnN0IGRpY3QgPSBwYXJzZVBheWxvYWQocGF5bG9hZCk7XG5cbiAgY29uc3QgaXRlcmF0aW9ucyA9IHBhcnNlSW50KGRpY3QuaSwgMTApO1xuICBpZiAoaXRlcmF0aW9ucyAmJiBpdGVyYXRpb25zIDwgNDA5Nikge1xuICAgIHRocm93IG5ldyBNb25nb0RyaXZlckVycm9yKFxuICAgICAgYFNlcnZlciByZXR1cm5lZCBhbiBpbnZhbGlkIGl0ZXJhdGlvbiBjb3VudCAke2l0ZXJhdGlvbnN9YCxcbiAgICApO1xuICB9XG5cbiAgY29uc3Qgc2FsdCA9IGRpY3QucztcbiAgY29uc3Qgcm5vbmNlID0gZGljdC5yO1xuICBpZiAocm5vbmNlLnN0YXJ0c1dpdGgoXCJub25jZVwiKSkge1xuICAgIHRocm93IG5ldyBNb25nb0RyaXZlckVycm9yKGBTZXJ2ZXIgcmV0dXJuZWQgYW4gaW52YWxpZCBub25jZTogJHtybm9uY2V9YCk7XG4gIH1cblxuICAvLyBTZXQgdXAgc3RhcnQgb2YgcHJvb2ZcbiAgY29uc3Qgd2l0aG91dFByb29mID0gYGM9Yml3cyxyPSR7cm5vbmNlfWA7XG4gIGNvbnN0IHNhbHRlZFBhc3N3b3JkID0gYXdhaXQgSEkoXG4gICAgcHJvY2Vzc2VkUGFzc3dvcmQsXG4gICAgYjY0LmRlY29kZShzYWx0KSxcbiAgICBpdGVyYXRpb25zLFxuICAgIGNyeXB0b01ldGhvZCxcbiAgKTtcblxuICBjb25zdCBjbGllbnRLZXkgPSBhd2FpdCBITUFDKGNyeXB0b01ldGhvZCwgc2FsdGVkUGFzc3dvcmQsIFwiQ2xpZW50IEtleVwiKTtcbiAgY29uc3Qgc2VydmVyS2V5ID0gYXdhaXQgSE1BQyhjcnlwdG9NZXRob2QsIHNhbHRlZFBhc3N3b3JkLCBcIlNlcnZlciBLZXlcIik7XG4gIGNvbnN0IHN0b3JlZEtleSA9IGF3YWl0IEgoY3J5cHRvTWV0aG9kLCBjbGllbnRLZXkpO1xuICBjb25zdCBhdXRoTWVzc2FnZSA9IFtcbiAgICBkZWMuZGVjb2RlKGNsaWVudEZpcnN0TWVzc2FnZUJhcmUodXNlcm5hbWUsIG5vbmNlKSksXG4gICAgcGF5bG9hZCxcbiAgICB3aXRob3V0UHJvb2YsXG4gIF0uam9pbihcIixcIik7XG5cbiAgY29uc3QgY2xpZW50U2lnbmF0dXJlID0gYXdhaXQgSE1BQyhjcnlwdG9NZXRob2QsIHN0b3JlZEtleSwgYXV0aE1lc3NhZ2UpO1xuICBjb25zdCBjbGllbnRQcm9vZiA9IGBwPSR7eG9yKGNsaWVudEtleSwgY2xpZW50U2lnbmF0dXJlKX1gO1xuICBjb25zdCBjbGllbnRGaW5hbCA9IFt3aXRob3V0UHJvb2YsIGNsaWVudFByb29mXS5qb2luKFwiLFwiKTtcblxuICBjb25zdCBzZXJ2ZXJTaWduYXR1cmUgPSBhd2FpdCBITUFDKGNyeXB0b01ldGhvZCwgc2VydmVyS2V5LCBhdXRoTWVzc2FnZSk7XG5cbiAgY29uc3Qgc2FzbENvbnRpbnVlQ21kID0ge1xuICAgIHNhc2xDb250aW51ZTogMSxcbiAgICBjb252ZXJzYXRpb25JZDogcmVzcG9uc2UuY29udmVyc2F0aW9uSWQsXG4gICAgcGF5bG9hZDogbmV3IEJzb24uQmluYXJ5KGVuYy5lbmNvZGUoY2xpZW50RmluYWwpKSxcbiAgfTtcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm90b2NvbC5jb21tYW5kU2luZ2xlKGRiLCBzYXNsQ29udGludWVDbWQpO1xuXG4gIGNvbnN0IHBhcnNlZFJlc3BvbnNlID0gcGFyc2VQYXlsb2FkKFxuICAgIGZpeFBheWxvYWQyKGRlYy5kZWNvZGUocmVzdWx0LnBheWxvYWQuYnVmZmVyKSksXG4gICk7XG4gIGlmIChcbiAgICAhY29tcGFyZURpZ2VzdChcbiAgICAgIGI2NC5kZWNvZGUocGFyc2VkUmVzcG9uc2UudiksXG4gICAgICBuZXcgVWludDhBcnJheShzZXJ2ZXJTaWduYXR1cmUpLFxuICAgIClcbiAgKSB7XG4gICAgLy8gdGhyb3cgbmV3IE1vbmdvRHJpdmVyRXJyb3IoXCJTZXJ2ZXIgcmV0dXJuZWQgYW4gaW52YWxpZCBzaWduYXR1cmVcIik7XG4gIH1cbiAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBjb25zdCByZXRyeVNhc2xDb250aW51ZUNtZCA9IHtcbiAgICBzYXNsQ29udGludWU6IDEsXG4gICAgY29udmVyc2F0aW9uSWQ6IHJlc3VsdC5jb252ZXJzYXRpb25JZCxcbiAgICBwYXlsb2FkOiBuZXcgVWludDhBcnJheSgwKSxcbiAgfTtcblxuICByZXR1cm4gcHJvdG9jb2wuY29tbWFuZFNpbmdsZShkYiwgcmV0cnlTYXNsQ29udGludWVDbWQpO1xufVxuXG4vL3RoaXMgaXMgYSBoYWNrIHRvIGZpeCBjb2RpZmljYXRpb24gaW4gcGF5bG9hZCAoaW4gYmVpbmcgYW5kIGVuZCBvZiBwYXlsb2FkIGV4aXN0cyBhIGNvZGlmaWNhdGlvbiBwcm9ibGVtLCBuZWVkcyBpbnZlc3RpZ2F0aW9uIC4uLilcbmV4cG9ydCBmdW5jdGlvbiBmaXhQYXlsb2FkKHBheWxvYWQ6IHN0cmluZykge1xuICBjb25zdCB0ZW1wID0gcGF5bG9hZC5zcGxpdChcIj1cIik7XG4gIHRlbXAuc2hpZnQoKTtcbiAgY29uc3QgaXQgPSBwYXJzZUludCh0ZW1wLnBvcCgpISwgMTApO1xuICBwYXlsb2FkID0gXCJyPVwiICsgdGVtcC5qb2luKFwiPVwiKSArIFwiPVwiICsgaXQ7XG4gIHJldHVybiBwYXlsb2FkO1xufVxuLy90aGlzIGlzIGEgc2Vjb25kIGhhY2sgdG8gZml4IGNvZGlmaWNhdGlvbiBpbiBwYXlsb2FkIChpbiBiZWluZyBhbmQgZW5kIG9mIHBheWxvYWQgZXhpc3RzIGEgY29kaWZpY2F0aW9uIHByb2JsZW0sIG5lZWRzIGludmVzdGlnYXRpb24gLi4uKVxuZXhwb3J0IGZ1bmN0aW9uIGZpeFBheWxvYWQyKHBheWxvYWQ6IHN0cmluZykge1xuICBsZXQgdGVtcCA9IHBheWxvYWQuc3BsaXQoXCJ2PVwiKTtcbiAgdGVtcC5zaGlmdCgpO1xuICBwYXlsb2FkID0gdGVtcC5qb2luKFwidj1cIik7XG4gIHRlbXAgPSBwYXlsb2FkLnNwbGl0KFwib2tcIik7XG4gIHRlbXAucG9wKCk7XG4gIHJldHVybiBcInY9XCIgKyB0ZW1wLmpvaW4oXCJva1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUGF5bG9hZChwYXlsb2FkOiBzdHJpbmcpIHtcbiAgY29uc3QgZGljdDogRG9jdW1lbnQgPSB7fTtcbiAgY29uc3QgcGFydHMgPSBwYXlsb2FkLnNwbGl0KFwiLFwiKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHZhbHVlUGFydHMgPSBwYXJ0c1tpXS5zcGxpdChcIj1cIik7XG4gICAgZGljdFt2YWx1ZVBhcnRzWzBdXSA9IHZhbHVlUGFydHNbMV07XG4gIH1cblxuICByZXR1cm4gZGljdDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhc3N3b3JkRGlnZXN0KFxuICB1c2VybmFtZTogc3RyaW5nLFxuICBwYXNzd29yZDogc3RyaW5nLFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgaWYgKHR5cGVvZiB1c2VybmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBNb25nb0RyaXZlckVycm9yKFwidXNlcm5hbWUgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgTW9uZ29Ecml2ZXJFcnJvcihcInBhc3N3b3JkIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gIH1cblxuICBpZiAocGFzc3dvcmQubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IE1vbmdvRHJpdmVyRXJyb3IoXCJwYXNzd29yZCBjYW5ub3QgYmUgZW1wdHlcIik7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdGRDcnlwdG8uc3VidGxlLmRpZ2VzdChcbiAgICBcIk1ENVwiLFxuICAgIGVuYy5lbmNvZGUoYCR7dXNlcm5hbWV9Om1vbmdvOiR7cGFzc3dvcmR9YCksXG4gICk7XG4gIHJldHVybiBkZWMuZGVjb2RlKGhleC5lbmNvZGUobmV3IFVpbnQ4QXJyYXkocmVzdWx0KSkpO1xufVxuXG4vLyBYT1IgdHdvIGJ1ZmZlcnNcbmV4cG9ydCBmdW5jdGlvbiB4b3IoX2E6IEFycmF5QnVmZmVyLCBfYjogQXJyYXlCdWZmZXIpIHtcbiAgY29uc3QgYSA9IG5ldyBVaW50OEFycmF5KF9hKTtcbiAgY29uc3QgYiA9IG5ldyBVaW50OEFycmF5KF9iKTtcblxuICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChhLmxlbmd0aCwgYi5sZW5ndGgpO1xuICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICByZXNbaV0gPSBhW2ldIF4gYltpXTtcbiAgfVxuXG4gIHJldHVybiBiNjQuZW5jb2RlKHJlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIKG1ldGhvZDogQ3J5cHRvTWV0aG9kLCB0ZXh0OiBCdWZmZXJTb3VyY2UpIHtcbiAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuZGlnZXN0KFxuICAgIG1ldGhvZCA9PT0gXCJzaGEyNTZcIiA/IFwiU0hBLTI1NlwiIDogXCJTSEEtMVwiLFxuICAgIHRleHQsXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBITUFDKFxuICBtZXRob2Q6IENyeXB0b01ldGhvZCxcbiAgc2VjcmV0OiBBcnJheUJ1ZmZlcixcbiAgdGV4dDogc3RyaW5nLFxuKSB7XG4gIGNvbnN0IGtleSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgIFwicmF3XCIsXG4gICAgc2VjcmV0LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiSE1BQ1wiLFxuICAgICAgaGFzaDogbWV0aG9kID09PSBcInNoYTI1NlwiID8gXCJTSEEtMjU2XCIgOiBcIlNIQS0xXCIsXG4gICAgfSxcbiAgICBmYWxzZSxcbiAgICBbXCJzaWduXCIsIFwidmVyaWZ5XCJdLFxuICApO1xuXG4gIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuc2lnbihcbiAgICBcIkhNQUNcIixcbiAgICBrZXksXG4gICAgZW5jLmVuY29kZSh0ZXh0KSxcbiAgKTtcblxuICByZXR1cm4gc2lnbmF0dXJlO1xufVxuXG5pbnRlcmZhY2UgSElDYWNoZSB7XG4gIFtrZXk6IHN0cmluZ106IEFycmF5QnVmZmVyO1xufVxuXG5sZXQgX2hpQ2FjaGU6IEhJQ2FjaGUgPSB7fTtcbmxldCBfaGlDYWNoZUNvdW50ID0gMDtcbmZ1bmN0aW9uIF9oaUNhY2hlUHVyZ2UoKSB7XG4gIF9oaUNhY2hlID0ge307XG4gIF9oaUNhY2hlQ291bnQgPSAwO1xufVxuXG5jb25zdCBoaUxlbmd0aE1hcCA9IHtcbiAgc2hhMjU2OiAzMixcbiAgc2hhMTogMjAsXG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gSEkoXG4gIGRhdGE6IHN0cmluZyxcbiAgc2FsdDogVWludDhBcnJheSxcbiAgaXRlcmF0aW9uczogbnVtYmVyLFxuICBjcnlwdG9NZXRob2Q6IENyeXB0b01ldGhvZCxcbik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgLy8gb21pdCB0aGUgd29yayBpZiBhbHJlYWR5IGdlbmVyYXRlZFxuICBjb25zdCBrZXkgPSBbZGF0YSwgYjY0LmVuY29kZShzYWx0KSwgaXRlcmF0aW9uc10uam9pbihcbiAgICBcIl9cIixcbiAgKTtcbiAgaWYgKF9oaUNhY2hlW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBfaGlDYWNoZVtrZXldO1xuICB9XG5cbiAgLy8gZ2VuZXJhdGUgdGhlIHNhbHRcbiAgY29uc3Qgc2FsdGVkRGF0YSA9IGF3YWl0IHBia2RmMihcbiAgICBkYXRhLFxuICAgIHNhbHQsXG4gICAgaXRlcmF0aW9ucyxcbiAgICBoaUxlbmd0aE1hcFtjcnlwdG9NZXRob2RdLFxuICAgIGNyeXB0b01ldGhvZCxcbiAgKTtcblxuICAvLyBjYWNoZSBhIGNvcHkgdG8gc3BlZWQgdXAgdGhlIG5leHQgbG9va3VwLCBidXQgcHJldmVudCB1bmJvdW5kZWQgY2FjaGUgZ3Jvd3RoXG4gIGlmIChfaGlDYWNoZUNvdW50ID49IDIwMCkge1xuICAgIF9oaUNhY2hlUHVyZ2UoKTtcbiAgfVxuXG4gIF9oaUNhY2hlW2tleV0gPSBzYWx0ZWREYXRhO1xuICBfaGlDYWNoZUNvdW50ICs9IDE7XG4gIHJldHVybiBzYWx0ZWREYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZURpZ2VzdChsaHM6IFVpbnQ4QXJyYXksIHJoczogVWludDhBcnJheSkge1xuICBpZiAobGhzLmxlbmd0aCAhPT0gcmhzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCByZXN1bHQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxocy5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCB8PSBsaHNbaV0gXiByaHNbaV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ID09PSAwO1xufVxuIl19
/*!
 * Adapted from koa-send at https://github.com/koajs/send and which is licensed
 * with the MIT license.
 */
import { calculate, ifNoneMatch } from "./etag.ts";
import { createHttpError } from "./httpError.ts";
import { basename, extname, LimitedReader, parse, readAll, Status, } from "./deps.ts";
import { ifRange, MultiPartStream, parseRange } from "./range.ts";
import { assert, decodeComponent, getBoundary, resolvePath } from "./util.ts";
const MAXBUFFER_DEFAULT = 1_048_576;
const BOUNDARY = await getBoundary();
function isHidden(path) {
    const pathArr = path.split("/");
    for (const segment of pathArr) {
        if (segment[0] === "." && segment !== "." && segment !== "..") {
            return true;
        }
        return false;
    }
}
async function exists(path) {
    try {
        return (await Deno.stat(path)).isFile;
    }
    catch {
        return false;
    }
}
async function getEntity(path, mtime, stats, maxbuffer, response) {
    let body;
    let entity;
    const file = await Deno.open(path, { read: true });
    if (stats.size < maxbuffer) {
        const buffer = await readAll(file);
        file.close();
        body = entity = buffer;
    }
    else {
        response.addResource(file.rid);
        body = file;
        entity = {
            mtime: new Date(mtime),
            size: stats.size,
        };
    }
    return [body, entity];
}
async function sendRange(response, body, range, size) {
    const ranges = parseRange(range, size);
    if (ranges.length === 0) {
        throw createHttpError(Status.RequestedRangeNotSatisfiable);
    }
    response.status = Status.PartialContent;
    if (ranges.length === 1) {
        const [byteRange] = ranges;
        response.headers.set("Content-Length", String(byteRange.end - byteRange.start + 1));
        response.headers.set("Content-Range", `bytes ${byteRange.start}-${byteRange.end}/${size}`);
        if (body instanceof Uint8Array) {
            response.body = body.slice(byteRange.start, byteRange.end + 1);
        }
        else {
            await body.seek(byteRange.start, Deno.SeekMode.Start);
            response.body = new LimitedReader(body, byteRange.end - byteRange.start + 1);
        }
    }
    else {
        assert(response.type);
        response.headers.set("content-type", `multipart/byteranges; boundary=${BOUNDARY}`);
        const multipartBody = new MultiPartStream(body, response.type, ranges, size, BOUNDARY);
        response.headers.set("content-length", String(multipartBody.contentLength()));
        response.body = multipartBody;
    }
}
export async function send({ request, response }, path, options = { root: "" }) {
    const { brotli = true, contentTypes = {}, extensions, format = true, gzip = true, hidden = false, immutable = false, index, maxbuffer = MAXBUFFER_DEFAULT, maxage = 0, root, } = options;
    const trailingSlash = path[path.length - 1] === "/";
    path = decodeComponent(path.substr(parse(path).root.length));
    if (index && trailingSlash) {
        path += index;
    }
    if (!hidden && isHidden(path)) {
        throw createHttpError(403);
    }
    path = resolvePath(root, path);
    let encodingExt = "";
    if (brotli &&
        request.acceptsEncodings("br", "identity") === "br" &&
        (await exists(`${path}.br`))) {
        path = `${path}.br`;
        response.headers.set("Content-Encoding", "br");
        response.headers.delete("Content-Length");
        encodingExt = ".br";
    }
    else if (gzip &&
        request.acceptsEncodings("gzip", "identity") === "gzip" &&
        (await exists(`${path}.gz`))) {
        path = `${path}.gz`;
        response.headers.set("Content-Encoding", "gzip");
        response.headers.delete("Content-Length");
        encodingExt = ".gz";
    }
    if (extensions && !/\.[^/]*$/.exec(path)) {
        for (let ext of extensions) {
            if (!/^\./.exec(ext)) {
                ext = `.${ext}`;
            }
            if (await exists(`${path}${ext}`)) {
                path += ext;
                break;
            }
        }
    }
    let stats;
    try {
        stats = await Deno.stat(path);
        if (stats.isDirectory) {
            if (format && index) {
                path += `/${index}`;
                stats = await Deno.stat(path);
            }
            else {
                return;
            }
        }
    }
    catch (err) {
        if (err instanceof Deno.errors.NotFound) {
            throw createHttpError(404, err.message);
        }
        throw createHttpError(500, err instanceof Error ? err.message : "[non-error thrown]");
    }
    let mtime = null;
    if (response.headers.has("Last-Modified")) {
        mtime = new Date(response.headers.get("Last-Modified")).getTime();
    }
    else if (stats.mtime) {
        mtime = stats.mtime.getTime();
        mtime -= mtime % 1000;
        response.headers.set("Last-Modified", new Date(mtime).toUTCString());
    }
    if (!response.headers.has("Cache-Control")) {
        const directives = [`max-age=${(maxage / 1000) | 0}`];
        if (immutable) {
            directives.push("immutable");
        }
        response.headers.set("Cache-Control", directives.join(","));
    }
    if (!response.type) {
        response.type = encodingExt !== ""
            ? extname(basename(path, encodingExt))
            : contentTypes[extname(path)] ?? extname(path);
    }
    let entity = null;
    let body = null;
    if (request.headers.has("If-None-Match") && mtime) {
        [body, entity] = await getEntity(path, mtime, stats, maxbuffer, response);
        if (!await ifNoneMatch(request.headers.get("If-None-Match"), entity)) {
            response.headers.set("ETag", await calculate(entity));
            response.status = 304;
            return path;
        }
    }
    if (request.headers.has("If-Modified-Since") && mtime) {
        const ifModifiedSince = new Date(request.headers.get("If-Modified-Since"));
        if (ifModifiedSince.getTime() >= mtime) {
            response.status = 304;
            return path;
        }
    }
    if (!body || !entity) {
        [body, entity] = await getEntity(path, mtime ?? 0, stats, maxbuffer, response);
    }
    if (request.headers.has("If-Range") && mtime &&
        await ifRange(request.headers.get("If-Range"), mtime, entity) &&
        request.headers.has("Range")) {
        await sendRange(response, body, request.headers.get("Range"), stats.size);
        return path;
    }
    if (request.headers.has("Range")) {
        await sendRange(response, body, request.headers.get("Range"), stats.size);
        return path;
    }
    response.headers.set("Content-Length", String(stats.size));
    response.body = body;
    if (!response.headers.has("ETag")) {
        response.headers.set("ETag", await calculate(entity));
    }
    if (!response.headers.has("Accept-Ranges")) {
        response.headers.set("Accept-Ranges", "bytes");
    }
    return path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBR0gsT0FBTyxFQUFFLFNBQVMsRUFBWSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFDTCxRQUFRLEVBQ1IsT0FBTyxFQUNQLGFBQWEsRUFDYixLQUFLLEVBQ0wsT0FBTyxFQUNQLE1BQU0sR0FDUCxNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU5RSxNQUFNLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUNwQyxNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO0FBMkVyQyxTQUFTLFFBQVEsQ0FBQyxJQUFZO0lBQzVCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsS0FBSyxNQUFNLE9BQU8sSUFBSSxPQUFPLEVBQUU7UUFDN0IsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLE9BQU8sS0FBSyxHQUFHLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtZQUM3RCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxLQUFLLENBQUM7S0FDZDtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsTUFBTSxDQUFDLElBQVk7SUFDaEMsSUFBSTtRQUNGLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7S0FDdkM7SUFBQyxNQUFNO1FBQ04sT0FBTyxLQUFL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TyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDaEMsTUFBTSxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUUsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0UsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzRCxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUVyQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDakMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDdkQ7SUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUU7UUFDMUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBZGFwdGVkIGZyb20ga29hLXNlbmQgYXQgaHR0cHM6Ly9naXRodWIuY29tL2tvYWpzL3NlbmQgYW5kIHdoaWNoIGlzIGxpY2Vuc2VkXG4gKiB3aXRoIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7IENvbnRleHQgfSBmcm9tIFwiLi9jb250ZXh0LnRzXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGUsIEZpbGVJbmZvLCBpZk5vbmVNYXRjaCB9IGZyb20gXCIuL2V0YWcudHNcIjtcbmltcG9ydCB7IGNyZWF0ZUh0dHBFcnJvciB9IGZyb20gXCIuL2h0dHBFcnJvci50c1wiO1xuaW1wb3J0IHtcbiAgYmFzZW5hbWUsXG4gIGV4dG5hbWUsXG4gIExpbWl0ZWRSZWFkZXIsXG4gIHBhcnNlLFxuICByZWFkQWxsLFxuICBTdGF0dXMsXG59IGZyb20gXCIuL2RlcHMudHNcIjtcbmltcG9ydCB7IGlmUmFuZ2UsIE11bHRpUGFydFN0cmVhbSwgcGFyc2VSYW5nZSB9IGZyb20gXCIuL3JhbmdlLnRzXCI7XG5pbXBvcnQgdHlwZSB7IFJlc3BvbnNlIH0gZnJvbSBcIi4vcmVzcG9uc2UudHNcIjtcbmltcG9ydCB7IGFzc2VydCwgZGVjb2RlQ29tcG9uZW50LCBnZXRCb3VuZGFyeSwgcmVzb2x2ZVBhdGggfSBmcm9tIFwiLi91dGlsLnRzXCI7XG5cbmNvbnN0IE1BWEJVRkZFUl9ERUZBVUxUID0gMV8wNDhfNTc2OyAvLyAxTWlCO1xuY29uc3QgQk9VTkRBUlkgPSBhd2FpdCBnZXRCb3VuZGFyeSgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlbmRPcHRpb25zIHtcbiAgLyoqIFRyeSB0byBzZXJ2ZSB0aGUgYnJvdGxpIHZlcnNpb24gb2YgYSBmaWxlIGF1dG9tYXRpY2FsbHkgd2hlbiBicm90bGkgaXNcbiAgICogc3VwcG9ydGVkIGJ5IGEgY2xpZW50IGFuZCBpZiB0aGUgcmVxdWVzdGVkIGZpbGUgd2l0aCBgLmJyYCBleHRlbnNpb25cbiAgICogZXhpc3RzLiAoZGVmYXVsdHMgdG8gYHRydWVgKSAqL1xuICBicm90bGk/OiBib29sZWFuO1xuXG4gIC8qKiBBIHJlY29yZCBvZiBleHRlbnNpb25zIGFuZCBjb250ZW50IHR5cGVzIHRoYXQgc2hvdWxkIGJlIHVzZWQgd2hlblxuICAgKiBkZXRlcm1pbmluZyB0aGUgY29udGVudCBvZiBhIGZpbGUgYmVpbmcgc2VydmVkLiBCeSBkZWZhdWx0LCB0aGVcbiAgICogW2BtZWRpYV90eXBlYF0oaHR0cHM6Ly9naXRodWIuY29tL29ha3NlcnZlci9tZWRpYV90eXBlcy8pIGRhdGFiYXNlIGlzIHVzZWRcbiAgICogdG8gbWFwIGFuIGV4dGVuc2lvbiB0byB0aGUgc2VydmVkIGNvbnRlbnQtdHlwZS4gVGhlIGtleXMgb2YgdGhlIG1hcCBhcmVcbiAgICogZXh0ZW5zaW9ucywgYW5kIHZhbHVlcyBhcmUgdGhlIGNvbnRlbnQgdHlwZXMgdG8gdXNlLiBUaGUgY29udGVudCB0eXBlIGNhblxuICAgKiBiZSBhIHBhcnRpYWwgY29udGVudCB0eXBlLCB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBjb250ZW50IHR5cGVcbiAgICogaGVhZGVyLlxuICAgKlxuICAgKiBBbnkgZXh0ZW5zaW9ucyBtYXRjaGVkIHdpbGwgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmVoYXZpb3IuIEtleSBzaG91bGRcbiAgICogaW5jbHVkZSB0aGUgbGVhZGluZyBkb3QgKGUuZy4gYC5leHRgIGluc3RlYWQgb2YganVzdCBgZXh0YCkuXG4gICAqXG4gICAqICMjIyBFeGFtcGxlXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGFwcC51c2UoKGN0eCkgPT4ge1xuICAgKiAgIHJldHVybiBzZW5kKGN0eCwgY3R4LnJlcXVlc3QudXJsLnBhdGhuYW1lLCB7XG4gICAqICAgICBjb250ZW50VHlwZXM6IHtcbiAgICogICAgICAgXCIuaW1wb3J0bWFwXCI6IFwiYXBwbGljYXRpb24vaW1wb3J0bWFwK2pzb25cIlxuICAgKiAgICAgfSxcbiAgICogICAgIHJvb3Q6IFwiLlwiLFxuICAgKiAgIH0pXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGNvbnRlbnRUeXBlcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cbiAgLyoqIFRyeSB0byBtYXRjaCBleHRlbnNpb25zIGZyb20gcGFzc2VkIGFycmF5IHRvIHNlYXJjaCBmb3IgZmlsZSB3aGVuIG5vXG4gICAqIGV4dGVuc2lvbiBpcyBzdWZmaWNlZCBpbiBVUkwuIEZpcnN0IGZvdW5kIGlzIHNlcnZlZC4gKGRlZmF1bHRzIHRvXG4gICAqIGB1bmRlZmluZWRgKSAqL1xuICBleHRlbnNpb25zPzogc3RyaW5nW107XG5cbiAgLyoqIElmIGB0cnVlYCwgZm9ybWF0IHRoZSBwYXRoIHRvIHNlcnZlIHN0YXRpYyBmaWxlIHNlcnZlcnMgYW5kIG5vdCByZXF1aXJlIGFcbiAgICogdHJhaWxpbmcgc2xhc2ggZm9yIGRpcmVjdG9yaWVzLCBzbyB0aGF0IHlvdSBjYW4gZG8gYm90aCBgL2RpcmVjdG9yeWAgYW5kXG4gICAqIGAvZGlyZWN0b3J5L2AuIChkZWZhdWx0cyB0byBgdHJ1ZWApICovXG4gIGZvcm1hdD86IGJvb2xlYW47XG5cbiAgLyoqIFRyeSB0byBzZXJ2ZSB0aGUgZ3ppcHBlZCB2ZXJzaW9uIG9mIGEgZmlsZSBhdXRvbWF0aWNhbGx5IHdoZW4gZ3ppcCBpc1xuICAgKiBzdXBwb3J0ZWQgYnkgYSBjbGllbnQgYW5kIGlmIHRoZSByZXF1ZXN0ZWQgZmlsZSB3aXRoIGAuZ3pgIGV4dGVuc2lvblxuICAgKiBleGlzdHMuIChkZWZhdWx0cyB0byBgdHJ1ZWApLiAqL1xuICBnemlwPzogYm9vbGVhbjtcblxuICAvKiogQWxsb3cgdHJhbnNmZXIgb2YgaGlkZGVuIGZpbGVzLiAoZGVmYXVsdHMgdG8gYGZhbHNlYCkgKi9cbiAgaGlkZGVuPzogYm9vbGVhbjtcblxuICAvKiogVGVsbCB0aGUgYnJvd3NlciB0aGUgcmVzb3VyY2UgaXMgaW1tdXRhYmxlIGFuZCBjYW4gYmUgY2FjaGVkXG4gICAqIGluZGVmaW5pdGVseS4gKGRlZmF1bHRzIHRvIGBmYWxzZWApICovXG4gIGltbXV0YWJsZT86IGJvb2xlYW47XG5cbiAgLyoqIE5hbWUgb2YgdGhlIGluZGV4IGZpbGUgdG8gc2VydmUgYXV0b21hdGljYWxseSB3aGVuIHZpc2l0aW5nIHRoZSByb290XG4gICAqIGxvY2F0aW9uLiAoZGVmYXVsdHMgdG8gbm9uZSkgKi9cbiAgaW5kZXg/OiBzdHJpbmc7XG5cbiAgLyoqIEJyb3dzZXIgY2FjaGUgbWF4LWFnZSBpbiBtaWxsaXNlY29uZHMuIChkZWZhdWx0cyB0byBgMGApICovXG4gIG1heGFnZT86IG51bWJlcjtcblxuICAvKiogQSBzaXplIGluIGJ5dGVzIHdoZXJlIGlmIHRoZSBmaWxlIGlzIGxlc3MgdGhhbiB0aGlzIHNpemUsIHRoZSBmaWxlIHdpbGxcbiAgICogYmUgcmVhZCBpbnRvIG1lbW9yeSBieSBzZW5kIGluc3RlYWQgb2YgcmV0dXJuaW5nIGEgZmlsZSBoYW5kbGUuICBGaWxlcyBsZXNzXG4gICAqIHRoYW4gdGhlIGJ5dGUgc2l6ZSB3aWxsIHNlbmQgYW4gXCJzdHJvbmdcIiBgRVRhZ2AgaGVhZGVyIHdoaWxlIHRob3NlIGxhcmdlclxuICAgKiB0aGFuIHRoZSBieXRlcyBzaXplIHdpbGwgb25seSBiZSBhYmxlIHRvIHNlbmQgYSBcIndlYWtcIiBgRVRhZ2AgaGVhZGVyIChhc1xuICAgKiB0aGV5IGNhbm5vdCBoYXNoIHRoZSBjb250ZW50cyBvZiB0aGUgZmlsZSkuIChkZWZhdWx0cyB0byAxTWlCKVxuICAgKi9cbiAgbWF4YnVmZmVyPzogbnVtYmVyO1xuXG4gIC8qKiBSb290IGRpcmVjdG9yeSB0byByZXN0cmljdCBmaWxlIGFjY2Vzcy4gKi9cbiAgcm9vdDogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBpc0hpZGRlbihwYXRoOiBzdHJpbmcpIHtcbiAgY29uc3QgcGF0aEFyciA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2YgcGF0aEFycikge1xuICAgIGlmIChzZWdtZW50WzBdID09PSBcIi5cIiAmJiBzZWdtZW50ICE9PSBcIi5cIiAmJiBzZWdtZW50ICE9PSBcIi4uXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZXhpc3RzKHBhdGg6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIHJldHVybiAoYXdhaXQgRGVuby5zdGF0KHBhdGgpKS5pc0ZpbGU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRFbnRpdHkoXG4gIHBhdGg6IHN0cmluZyxcbiAgbXRpbWU6IG51bWJlcixcbiAgc3RhdHM6IERlbm8uRmlsZUluZm8sXG4gIG1heGJ1ZmZlcjogbnVtYmVyLFxuICByZXNwb25zZTogUmVzcG9uc2UsXG4pOiBQcm9taXNlPFtVaW50OEFycmF5IHwgRGVuby5GaWxlLCBVaW50OEFycmF5IHwgRmlsZUluZm9dPiB7XG4gIGxldCBib2R5OiBVaW50OEFycmF5IHwgRGVuby5GaWxlO1xuICBsZXQgZW50aXR5OiBVaW50OEFycmF5IHwgRmlsZUluZm87XG4gIGNvbnN0IGZpbGUgPSBhd2FpdCBEZW5vLm9wZW4ocGF0aCwgeyByZWFkOiB0cnVlIH0pO1xuICBpZiAoc3RhdHMuc2l6ZSA8IG1heGJ1ZmZlcikge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHJlYWRBbGwoZmlsZSk7XG4gICAgZmlsZS5jbG9zZSgpO1xuICAgIGJvZHkgPSBlbnRpdHkgPSBidWZmZXI7XG4gIH0gZWxzZSB7XG4gICAgcmVzcG9uc2UuYWRkUmVzb3VyY2UoZmlsZS5yaWQpO1xuICAgIGJvZHkgPSBmaWxlO1xuICAgIGVudGl0eSA9IHtcbiAgICAgIG10aW1lOiBuZXcgRGF0ZShtdGltZSEpLFxuICAgICAgc2l6ZTogc3RhdHMuc2l6ZSxcbiAgICB9O1xuICB9XG4gIHJldHVybiBbYm9keSwgZW50aXR5XTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VuZFJhbmdlKFxuICByZXNwb25zZTogUmVzcG9uc2UsXG4gIGJvZHk6IFVpbnQ4QXJyYXkgfCBEZW5vLkZpbGUsXG4gIHJhbmdlOiBzdHJpbmcsXG4gIHNpemU6IG51bWJlcixcbikge1xuICBjb25zdCByYW5nZXMgPSBwYXJzZVJhbmdlKHJhbmdlLCBzaXplKTtcbiAgaWYgKHJhbmdlcy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBjcmVhdGVIdHRwRXJyb3IoU3RhdHVzLlJlcXVlc3RlZFJhbmdlTm90U2F0aXNmaWFibGUpO1xuICB9XG4gIHJlc3BvbnNlLnN0YXR1cyA9IFN0YXR1cy5QYXJ0aWFsQ29udGVudDtcbiAgaWYgKHJhbmdlcy5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBbYnl0ZVJhbmdlXSA9IHJhbmdlcztcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcbiAgICAgIFwiQ29udGVudC1MZW5ndGhcIixcbiAgICAgIFN0cmluZyhieXRlUmFuZ2UuZW5kIC0gYnl0ZVJhbmdlLnN0YXJ0ICsgMSksXG4gICAgKTtcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcbiAgICAgIFwiQ29udGVudC1SYW5nZVwiLFxuICAgICAgYGJ5dGVzICR7Ynl0ZVJhbmdlLnN0YXJ0fS0ke2J5dGVSYW5nZS5lbmR9LyR7c2l6ZX1gLFxuICAgICk7XG4gICAgaWYgKGJvZHkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICByZXNwb25zZS5ib2R5ID0gYm9keS5zbGljZShieXRlUmFuZ2Uuc3RhcnQsIGJ5dGVSYW5nZS5lbmQgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgYm9keS5zZWVrKGJ5dGVSYW5nZS5zdGFydCwgRGVuby5TZWVrTW9kZS5TdGFydCk7XG4gICAgICByZXNwb25zZS5ib2R5ID0gbmV3IExpbWl0ZWRSZWFkZXIoXG4gICAgICAgIGJvZHksXG4gICAgICAgIGJ5dGVSYW5nZS5lbmQgLSBieXRlUmFuZ2Uuc3RhcnQgKyAxLFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0KHJlc3BvbnNlLnR5cGUpO1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFxuICAgICAgXCJjb250ZW50LXR5cGVcIixcbiAgICAgIGBtdWx0aXBhcnQvYnl0ZXJhbmdlczsgYm91bmRhcnk9JHtCT1VOREFSWX1gLFxuICAgICk7XG4gICAgY29uc3QgbXVsdGlwYXJ0Qm9keSA9IG5ldyBNdWx0aVBhcnRTdHJlYW0oXG4gICAgICBib2R5LFxuICAgICAgcmVzcG9uc2UudHlwZSxcbiAgICAgIHJhbmdlcyxcbiAgICAgIHNpemUsXG4gICAgICBCT1VOREFSWSxcbiAgICApO1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFxuICAgICAgXCJjb250ZW50LWxlbmd0aFwiLFxuICAgICAgU3RyaW5nKG11bHRpcGFydEJvZHkuY29udGVudExlbmd0aCgpKSxcbiAgICApO1xuICAgIHJlc3BvbnNlLmJvZHkgPSBtdWx0aXBhcnRCb2R5O1xuICB9XG59XG5cbi8qKiBBc3luY2hyb25vdXNseSBmdWxmaWxsIGEgcmVzcG9uc2Ugd2l0aCBhIGZpbGUgZnJvbSB0aGUgbG9jYWwgZmlsZVxuICogc3lzdGVtLlxuICpcbiAqIFJlcXVpcmVzIERlbm8gcmVhZCBwZXJtaXNzaW9uIGZvciB0aGUgYHJvb3RgIGRpcmVjdG9yeS4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kKFxuICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICB7IHJlcXVlc3QsIHJlc3BvbnNlIH06IENvbnRleHQ8YW55PixcbiAgcGF0aDogc3RyaW5nLFxuICBvcHRpb25zOiBTZW5kT3B0aW9ucyA9IHsgcm9vdDogXCJcIiB9LFxuKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgY29uc3Qge1xuICAgIGJyb3RsaSA9IHRydWUsXG4gICAgY29udGVudFR5cGVzID0ge30sXG4gICAgZXh0ZW5zaW9ucyxcbiAgICBmb3JtYXQgPSB0cnVlLFxuICAgIGd6aXAgPSB0cnVlLFxuICAgIGhpZGRlbiA9IGZhbHNlLFxuICAgIGltbXV0YWJsZSA9IGZhbHNlLFxuICAgIGluZGV4LFxuICAgIG1heGJ1ZmZlciA9IE1BWEJVRkZFUl9ERUZBVUxULFxuICAgIG1heGFnZSA9IDAsXG4gICAgcm9vdCxcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHRyYWlsaW5nU2xhc2ggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV0gPT09IFwiL1wiO1xuICBwYXRoID0gZGVjb2RlQ29tcG9uZW50KHBhdGguc3Vic3RyKHBhcnNlKHBhdGgpLnJvb3QubGVuZ3RoKSk7XG4gIGlmIChpbmRleCAmJiB0cmFpbGluZ1NsYXNoKSB7XG4gICAgcGF0aCArPSBpbmRleDtcbiAgfVxuXG4gIGlmICghaGlkZGVuICYmIGlzSGlkZGVuKHBhdGgpKSB7XG4gICAgdGhyb3cgY3JlYXRlSHR0cEVycm9yKDQwMyk7XG4gIH1cblxuICBwYXRoID0gcmVzb2x2ZVBhdGgocm9vdCwgcGF0aCk7XG5cbiAgbGV0IGVuY29kaW5nRXh0ID0gXCJcIjtcbiAgaWYgKFxuICAgIGJyb3RsaSAmJlxuICAgIHJlcXVlc3QuYWNjZXB0c0VuY29kaW5ncyhcImJyXCIsIFwiaWRlbnRpdHlcIikgPT09IFwiYnJcIiAmJlxuICAgIChhd2FpdCBleGlzdHMoYCR7cGF0aH0uYnJgKSlcbiAgKSB7XG4gICAgcGF0aCA9IGAke3BhdGh9LmJyYDtcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkNvbnRlbnQtRW5jb2RpbmdcIiwgXCJiclwiKTtcbiAgICByZXNwb25zZS5oZWFkZXJzLmRlbGV0ZShcIkNvbnRlbnQtTGVuZ3RoXCIpO1xuICAgIGVuY29kaW5nRXh0ID0gXCIuYnJcIjtcbiAgfSBlbHNlIGlmIChcbiAgICBnemlwICYmXG4gICAgcmVxdWVzdC5hY2NlcHRzRW5jb2RpbmdzKFwiZ3ppcFwiLCBcImlkZW50aXR5XCIpID09PSBcImd6aXBcIiAmJlxuICAgIChhd2FpdCBleGlzdHMoYCR7cGF0aH0uZ3pgKSlcbiAgKSB7XG4gICAgcGF0aCA9IGAke3BhdGh9Lmd6YDtcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkNvbnRlbnQtRW5jb2RpbmdcIiwgXCJnemlwXCIpO1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuZGVsZXRlKFwiQ29udGVudC1MZW5ndGhcIik7XG4gICAgZW5jb2RpbmdFeHQgPSBcIi5nelwiO1xuICB9XG5cbiAgaWYgKGV4dGVuc2lvbnMgJiYgIS9cXC5bXi9dKiQvLmV4ZWMocGF0aCkpIHtcbiAgICBmb3IgKGxldCBleHQgb2YgZXh0ZW5zaW9ucykge1xuICAgICAgaWYgKCEvXlxcLi8uZXhlYyhleHQpKSB7XG4gICAgICAgIGV4dCA9IGAuJHtleHR9YDtcbiAgICAgIH1cbiAgICAgIGlmIChhd2FpdCBleGlzdHMoYCR7cGF0aH0ke2V4dH1gKSkge1xuICAgICAgICBwYXRoICs9IGV4dDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IHN0YXRzOiBEZW5vLkZpbGVJbmZvO1xuICB0cnkge1xuICAgIHN0YXRzID0gYXdhaXQgRGVuby5zdGF0KHBhdGgpO1xuXG4gICAgaWYgKHN0YXRzLmlzRGlyZWN0b3J5KSB7XG4gICAgICBpZiAoZm9ybWF0ICYmIGluZGV4KSB7XG4gICAgICAgIHBhdGggKz0gYC8ke2luZGV4fWA7XG4gICAgICAgIHN0YXRzID0gYXdhaXQgRGVuby5zdGF0KHBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIERlbm8uZXJyb3JzLk5vdEZvdW5kKSB7XG4gICAgICB0aHJvdyBjcmVhdGVIdHRwRXJyb3IoNDA0LCBlcnIubWVzc2FnZSk7XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUh0dHBFcnJvcihcbiAgICAgIDUwMCxcbiAgICAgIGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBcIltub24tZXJyb3IgdGhyb3duXVwiLFxuICAgICk7XG4gIH1cblxuICBsZXQgbXRpbWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBpZiAocmVzcG9uc2UuaGVhZGVycy5oYXMoXCJMYXN0LU1vZGlmaWVkXCIpKSB7XG4gICAgbXRpbWUgPSBuZXcgRGF0ZShyZXNwb25zZS5oZWFkZXJzLmdldChcIkxhc3QtTW9kaWZpZWRcIikhKS5nZXRUaW1lKCk7XG4gIH0gZWxzZSBpZiAoc3RhdHMubXRpbWUpIHtcbiAgICAvLyBSb3VuZCBkb3duIHRvIHNlY29uZCBiZWNhdXNlIGl0J3MgdGhlIHByZWNpc2lvbiBvZiB0aGUgVVRDIHN0cmluZy5cbiAgICBtdGltZSA9IHN0YXRzLm10aW1lLmdldFRpbWUoKTtcbiAgICBtdGltZSAtPSBtdGltZSAlIDEwMDA7XG4gICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXCJMYXN0LU1vZGlmaWVkXCIsIG5ldyBEYXRlKG10aW1lKS50b1VUQ1N0cmluZygpKTtcbiAgfVxuXG4gIGlmICghcmVzcG9uc2UuaGVhZGVycy5oYXMoXCJDYWNoZS1Db250cm9sXCIpKSB7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IFtgbWF4LWFnZT0keyhtYXhhZ2UgLyAxMDAwKSB8IDB9YF07XG4gICAgaWYgKGltbXV0YWJsZSkge1xuICAgICAgZGlyZWN0aXZlcy5wdXNoKFwiaW1tdXRhYmxlXCIpO1xuICAgIH1cbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkNhY2hlLUNvbnRyb2xcIiwgZGlyZWN0aXZlcy5qb2luKFwiLFwiKSk7XG4gIH1cbiAgaWYgKCFyZXNwb25zZS50eXBlKSB7XG4gICAgcmVzcG9uc2UudHlwZSA9IGVuY29kaW5nRXh0ICE9PSBcIlwiXG4gICAgICA/IGV4dG5hbWUoYmFzZW5hbWUocGF0aCwgZW5jb2RpbmdFeHQpKVxuICAgICAgOiBjb250ZW50VHlwZXNbZXh0bmFtZShwYXRoKV0gPz8gZXh0bmFtZShwYXRoKTtcbiAgfVxuXG4gIGxldCBlbnRpdHk6IFVpbnQ4QXJyYXkgfCBGaWxlSW5mbyB8IG51bGwgPSBudWxsO1xuICBsZXQgYm9keTogVWludDhBcnJheSB8IERlbm8uRmlsZSB8IG51bGwgPSBudWxsO1xuXG4gIGlmIChyZXF1ZXN0LmhlYWRlcnMuaGFzKFwiSWYtTm9uZS1NYXRjaFwiKSAmJiBtdGltZSkge1xuICAgIFtib2R5LCBlbnRpdHldID0gYXdhaXQgZ2V0RW50aXR5KHBhdGgsIG10aW1lLCBzdGF0cywgbWF4YnVmZmVyLCByZXNwb25zZSk7XG4gICAgaWYgKCFhd2FpdCBpZk5vbmVNYXRjaChyZXF1ZXN0LmhlYWRlcnMuZ2V0KFwiSWYtTm9uZS1NYXRjaFwiKSEsIGVudGl0eSkpIHtcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiRVRhZ1wiLCBhd2FpdCBjYWxjdWxhdGUoZW50aXR5KSk7XG4gICAgICByZXNwb25zZS5zdGF0dXMgPSAzMDQ7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gIH1cblxuICBpZiAocmVxdWVzdC5oZWFkZXJzLmhhcyhcIklmLU1vZGlmaWVkLVNpbmNlXCIpICYmIG10aW1lKSB7XG4gICAgY29uc3QgaWZNb2RpZmllZFNpbmNlID0gbmV3IERhdGUocmVxdWVzdC5oZWFkZXJzLmdldChcIklmLU1vZGlmaWVkLVNpbmNlXCIpISk7XG4gICAgaWYgKGlmTW9kaWZpZWRTaW5jZS5nZXRUaW1lKCkgPj0gbXRpbWUpIHtcbiAgICAgIHJlc3BvbnNlLnN0YXR1cyA9IDMwNDtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgfVxuXG4gIGlmICghYm9keSB8fCAhZW50aXR5KSB7XG4gICAgW2JvZHksIGVudGl0eV0gPSBhd2FpdCBnZXRFbnRpdHkoXG4gICAgICBwYXRoLFxuICAgICAgbXRpbWUgPz8gMCxcbiAgICAgIHN0YXRzLFxuICAgICAgbWF4YnVmZmVyLFxuICAgICAgcmVzcG9uc2UsXG4gICAgKTtcbiAgfVxuXG4gIGlmIChcbiAgICByZXF1ZXN0LmhlYWRlcnMuaGFzKFwiSWYtUmFuZ2VcIikgJiYgbXRpbWUgJiZcbiAgICBhd2FpdCBpZlJhbmdlKHJlcXVlc3QuaGVhZGVycy5nZXQoXCJJZi1SYW5nZVwiKSEsIG10aW1lLCBlbnRpdHkpICYmXG4gICAgcmVxdWVzdC5oZWFkZXJzLmhhcyhcIlJhbmdlXCIpXG4gICkge1xuICAgIGF3YWl0IHNlbmRSYW5nZShyZXNwb25zZSwgYm9keSwgcmVxdWVzdC5oZWFkZXJzLmdldChcIlJhbmdlXCIpISwgc3RhdHMuc2l6ZSk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cblxuICBpZiAocmVxdWVzdC5oZWFkZXJzLmhhcyhcIlJhbmdlXCIpKSB7XG4gICAgYXdhaXQgc2VuZFJhbmdlKHJlc3BvbnNlLCBib2R5LCByZXF1ZXN0LmhlYWRlcnMuZ2V0KFwiUmFuZ2VcIikhLCBzdGF0cy5zaXplKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiQ29udGVudC1MZW5ndGhcIiwgU3RyaW5nKHN0YXRzLnNpemUpKTtcbiAgcmVzcG9uc2UuYm9keSA9IGJvZHk7XG5cbiAgaWYgKCFyZXNwb25zZS5oZWFkZXJzLmhhcyhcIkVUYWdcIikpIHtcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkVUYWdcIiwgYXdhaXQgY2FsY3VsYXRlKGVudGl0eSkpO1xuICB9XG5cbiAgaWYgKCFyZXNwb25zZS5oZWFkZXJzLmhhcyhcIkFjY2VwdC1SYW5nZXNcIikpIHtcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkFjY2VwdC1SYW5nZXNcIiwgXCJieXRlc1wiKTtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuIl19
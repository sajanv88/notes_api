import { Collection } from "./collection/mod.ts";
import { CommandCursor } from "./protocol/mod.ts";
export class Database {
    name;
    #cluster;
    constructor(cluster, name) {
        this.name = name;
        this.#cluster = cluster;
    }
    collection(name) {
        return new Collection(this.#cluster.protocol, this.name, name);
    }
    listCollections(options = {}) {
        return new CommandCursor(this.#cluster.protocol, async () => {
            const { cursor } = await this.#cluster.protocol.commandSingle(this.name, {
                listCollections: 1,
                ...options,
            });
            return {
                id: cursor.id,
                ns: cursor.ns,
                firstBatch: cursor.firstBatch,
            };
        });
    }
    async listCollectionNames(options = {}) {
        const cursor = this.listCollections({
            ...options,
            nameOnly: true,
            authorizedCollections: true,
        });
        const names = [];
        for await (const item of cursor) {
            names.push(item.name);
        }
        return names;
    }
    createUser(username, password, options) {
        return this.#cluster.protocol.commandSingle(this.name, {
            createUser: options?.username ?? username,
            pwd: options?.password ?? password,
            customData: options?.customData,
            roles: options?.roles ?? [],
            writeConcern: options?.writeConcern,
            authenticationRestrictions: options?.authenticationRestrictions,
            mechanisms: options?.mechanisms,
            digestPassword: options?.digestPassword,
            comment: options?.comment,
        });
    }
    dropUser(username, options = {}) {
        return this.#cluster.protocol.commandSingle(this.name, {
            dropUser: username,
            writeConcern: options?.writeConcern,
            comment: options?.comment,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBdUJsRCxNQUFNLE9BQU8sUUFBUTtJQUdvQjtJQUZ2QyxRQUFRLENBQVU7SUFFbEIsWUFBWSxPQUFnQixFQUFXLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFFRCxVQUFVLENBQWUsSUFBWTtRQUNuQyxPQUFPLElBQUksVUFBVSxDQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELGVBQWUsQ0FBQyxVQUtaLEVBQUU7UUFDSixPQUFPLElBQUksYUFBYSxDQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFDdEIsS0FBSyxJQUFJLEVBQUU7WUFDVCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBRTNELElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1gsZUFBZSxFQUFFLENBQUM7Z0JBQ2xCLEdBQUcsT0FBTzthQUNYLENBQUMsQ0FBQztZQUNILE9BQU87Z0JBQ0wsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUNiLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDYixVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVU7YUFDOUIsQ0FBQztRQUNKLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxVQUl0QixFQUFFO1FBQ0osTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUNsQyxHQUFHLE9BQU87WUFDVixRQUFRLEVBQUUsSUFBSTtZQUNkLHFCQUFxQixFQUFFLElBQUk7U0FDNUIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBQzNCLElBQUksS0FBSyxFQUFFLE1BQU0sSUFBSSxJQUFJLE1BQU0sRUFBRTtZQUMvQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELFVBQVUsQ0FDUixRQUFnQixFQUNoQixRQUFnQixFQUNoQixPQUEyQjtRQUUzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3JELFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxJQUFJLFFBQVE7WUFDekMsR0FBRyxFQUFFLE9BQU8sRUFBRSxRQUFRLElBQUksUUFBUTtZQUNsQyxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVU7WUFDL0IsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzQixZQUFZLEVBQUUsT0FBTyxFQUFFLFlBQVk7WUFDbkMsMEJBQTBCLEVBQUUsT0FBTyxFQUFFLDBCQUEwQjtZQUMvRCxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVU7WUFDL0IsY0FBYyxFQUFFLE9BQU8sRUFBRSxjQUFjO1lBQ3ZDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTztTQUMxQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUSxDQUFDLFFBQWdCLEVBQUUsVUFHdkIsRUFBRTtRQUNKLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDckQsUUFBUSxFQUFFLFFBQVE7WUFDbEIsWUFBWSxFQUFFLE9BQU8sRUFBRSxZQUFZO1lBQ25DLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTztTQUMxQixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSBcIi4vY29sbGVjdGlvbi9tb2QudHNcIjtcbmltcG9ydCB7IENvbW1hbmRDdXJzb3IgfSBmcm9tIFwiLi9wcm90b2NvbC9tb2QudHNcIjtcbmltcG9ydCB7IENyZWF0ZVVzZXJPcHRpb25zLCBEb2N1bWVudCB9IGZyb20gXCIuL3R5cGVzLnRzXCI7XG5pbXBvcnQgeyBDbHVzdGVyIH0gZnJvbSBcIi4vY2x1c3Rlci50c1wiO1xuXG5pbnRlcmZhY2UgTGlzdENvbGxlY3Rpb25zUmVwb25zZSB7XG4gIGN1cnNvcjoge1xuICAgIGlkOiBiaWdpbnQ7XG4gICAgbnM6IHN0cmluZztcbiAgICBmaXJzdEJhdGNoOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgdHlwZTogXCJjb2xsZWN0aW9uXCI7XG4gICAgICB9LFxuICAgIF07XG4gIH07XG4gIG9rOiAxO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpc3RDb2xsZWN0aW9uc1Jlc3VsdCB7XG4gIG5hbWU6IHN0cmluZztcbiAgdHlwZTogXCJjb2xsZWN0aW9uXCI7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhYmFzZSB7XG4gICNjbHVzdGVyOiBDbHVzdGVyO1xuXG4gIGNvbnN0cnVjdG9yKGNsdXN0ZXI6IENsdXN0ZXIsIHJlYWRvbmx5IG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMuI2NsdXN0ZXIgPSBjbHVzdGVyO1xuICB9XG5cbiAgY29sbGVjdGlvbjxUID0gRG9jdW1lbnQ+KG5hbWU6IHN0cmluZyk6IENvbGxlY3Rpb248VD4ge1xuICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbjxUPih0aGlzLiNjbHVzdGVyLnByb3RvY29sLCB0aGlzLm5hbWUsIG5hbWUpO1xuICB9XG5cbiAgbGlzdENvbGxlY3Rpb25zKG9wdGlvbnM6IHtcbiAgICBmaWx0ZXI/OiBEb2N1bWVudDtcbiAgICBuYW1lT25seT86IGJvb2xlYW47XG4gICAgYXV0aG9yaXplZENvbGxlY3Rpb25zPzogYm9vbGVhbjtcbiAgICBjb21tZW50PzogRG9jdW1lbnQ7XG4gIH0gPSB7fSk6IENvbW1hbmRDdXJzb3I8TGlzdENvbGxlY3Rpb25zUmVzdWx0PiB7XG4gICAgcmV0dXJuIG5ldyBDb21tYW5kQ3Vyc29yPExpc3RDb2xsZWN0aW9uc1Jlc3VsdD4oXG4gICAgICB0aGlzLiNjbHVzdGVyLnByb3RvY29sLFxuICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGN1cnNvciB9ID0gYXdhaXQgdGhpcy4jY2x1c3Rlci5wcm90b2NvbC5jb21tYW5kU2luZ2xlPFxuICAgICAgICAgIExpc3RDb2xsZWN0aW9uc1JlcG9uc2VcbiAgICAgICAgPih0aGlzLm5hbWUsIHtcbiAgICAgICAgICBsaXN0Q29sbGVjdGlvbnM6IDEsXG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IGN1cnNvci5pZCxcbiAgICAgICAgICBuczogY3Vyc29yLm5zLFxuICAgICAgICAgIGZpcnN0QmF0Y2g6IGN1cnNvci5maXJzdEJhdGNoLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbGlzdENvbGxlY3Rpb25OYW1lcyhvcHRpb25zOiB7XG4gICAgZmlsdGVyPzogRG9jdW1lbnQ7XG4gICAgYXV0aG9yaXplZENvbGxlY3Rpb25zPzogYm9vbGVhbjtcbiAgICBjb21tZW50PzogRG9jdW1lbnQ7XG4gIH0gPSB7fSk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBjdXJzb3IgPSB0aGlzLmxpc3RDb2xsZWN0aW9ucyh7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgbmFtZU9ubHk6IHRydWUsXG4gICAgICBhdXRob3JpemVkQ29sbGVjdGlvbnM6IHRydWUsXG4gICAgfSk7XG4gICAgY29uc3QgbmFtZXM6IHN0cmluZ1tdID0gW107XG4gICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGN1cnNvcikge1xuICAgICAgbmFtZXMucHVzaChpdGVtLm5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZXM7XG4gIH1cblxuICBjcmVhdGVVc2VyKFxuICAgIHVzZXJuYW1lOiBzdHJpbmcsXG4gICAgcGFzc3dvcmQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ3JlYXRlVXNlck9wdGlvbnMsXG4gICkge1xuICAgIHJldHVybiB0aGlzLiNjbHVzdGVyLnByb3RvY29sLmNvbW1hbmRTaW5nbGUodGhpcy5uYW1lLCB7XG4gICAgICBjcmVhdGVVc2VyOiBvcHRpb25zPy51c2VybmFtZSA/PyB1c2VybmFtZSxcbiAgICAgIHB3ZDogb3B0aW9ucz8ucGFzc3dvcmQgPz8gcGFzc3dvcmQsXG4gICAgICBjdXN0b21EYXRhOiBvcHRpb25zPy5jdXN0b21EYXRhLFxuICAgICAgcm9sZXM6IG9wdGlvbnM/LnJvbGVzID8/IFtdLFxuICAgICAgd3JpdGVDb25jZXJuOiBvcHRpb25zPy53cml0ZUNvbmNlcm4sXG4gICAgICBhdXRoZW50aWNhdGlvblJlc3RyaWN0aW9uczogb3B0aW9ucz8uYXV0aGVudGljYXRpb25SZXN0cmljdGlvbnMsXG4gICAgICBtZWNoYW5pc21zOiBvcHRpb25zPy5tZWNoYW5pc21zLFxuICAgICAgZGlnZXN0UGFzc3dvcmQ6IG9wdGlvbnM/LmRpZ2VzdFBhc3N3b3JkLFxuICAgICAgY29tbWVudDogb3B0aW9ucz8uY29tbWVudCxcbiAgICB9KTtcbiAgfVxuXG4gIGRyb3BVc2VyKHVzZXJuYW1lOiBzdHJpbmcsIG9wdGlvbnM6IHtcbiAgICB3cml0ZUNvbmNlcm4/OiBEb2N1bWVudDtcbiAgICBjb21tZW50PzogRG9jdW1lbnQ7XG4gIH0gPSB7fSkge1xuICAgIHJldHVybiB0aGlzLiNjbHVzdGVyLnByb3RvY29sLmNvbW1hbmRTaW5nbGUodGhpcy5uYW1lLCB7XG4gICAgICBkcm9wVXNlcjogdXNlcm5hbWUsXG4gICAgICB3cml0ZUNvbmNlcm46IG9wdGlvbnM/LndyaXRlQ29uY2VybixcbiAgICAgIGNvbW1lbnQ6IG9wdGlvbnM/LmNvbW1lbnQsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==
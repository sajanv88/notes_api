import { UUID } from "./uuid.ts";
import { BSONError } from "./error.ts";
import { b64 } from "../deps.ts";
export var BinarySizes;
(function (BinarySizes) {
    BinarySizes[BinarySizes["BUFFER_SIZE"] = 256] = "BUFFER_SIZE";
    BinarySizes[BinarySizes["SUBTYPE_DEFAULT"] = 0] = "SUBTYPE_DEFAULT";
    BinarySizes[BinarySizes["SUBTYPE_FUNCTION"] = 1] = "SUBTYPE_FUNCTION";
    BinarySizes[BinarySizes["SUBTYPE_BYTE_ARRAY"] = 2] = "SUBTYPE_BYTE_ARRAY";
    BinarySizes[BinarySizes["SUBTYPE_UUID"] = 4] = "SUBTYPE_UUID";
    BinarySizes[BinarySizes["SUBTYPE_MD5"] = 5] = "SUBTYPE_MD5";
    BinarySizes[BinarySizes["SUBTYPE_ENCRYPTED"] = 6] = "SUBTYPE_ENCRYPTED";
    BinarySizes[BinarySizes["SUBTYPE_COLUMN"] = 7] = "SUBTYPE_COLUMN";
    BinarySizes[BinarySizes["SUBTYPE_USER_DEFINE"] = 128] = "SUBTYPE_USER_DEFINE";
    BinarySizes[BinarySizes["BSON_BINARY_SUBTYPE_DEFAULT"] = 0] = "BSON_BINARY_SUBTYPE_DEFAULT";
})(BinarySizes || (BinarySizes = {}));
const textDecoder = new TextDecoder();
export class Binary {
    buffer;
    subType;
    constructor(buffer, subType = BinarySizes.BSON_BINARY_SUBTYPE_DEFAULT) {
        this.buffer = buffer;
        this.subType = subType;
    }
    length() {
        return this.buffer.length;
    }
    toJSON() {
        return b64.encode(this.buffer);
    }
    toString() {
        return textDecoder.decode(this.buffer);
    }
    toUUID() {
        if (this.subType === BinarySizes.SUBTYPE_UUID) {
            return new UUID(this.buffer);
        }
        throw new BSONError(`Binary sub_type "${this.subType}" is not supported for converting to UUID. Only "${BinarySizes.SUBTYPE_UUID}" is currently supported.`);
    }
    [Symbol.for("Deno.customInspect")]() {
        if (this.subType === BinarySizes.SUBTYPE_DEFAULT) {
            return `new Binary(${Deno.inspect(this.buffer)})`;
        }
        return `new Binary(${Deno.inspect(this.buffer)}, ${this.subType})`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmluYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN2QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRWpDLE1BQU0sQ0FBTixJQUFrQixXQVdqQjtBQVhELFdBQWtCLFdBQVc7SUFDM0IsNkRBQWlCLENBQUE7SUFDakIsbUVBQW1CLENBQUE7SUFDbkIscUVBQW9CLENBQUE7SUFDcEIseUVBQXNCLENBQUE7SUFDdEIsNkRBQWdCLENBQUE7SUFDaEIsMkRBQWUsQ0FBQTtJQUNmLHVFQUFxQixDQUFBO0lBQ3JCLGlFQUFrQixDQUFBO0lBQ2xCLDZFQUF5QixDQUFBO0lBQ3pCLDJGQUErQixDQUFBO0FBQ2pDLENBQUMsRUFYaUIsV0FBVyxLQUFYLFdBQVcsUUFXNUI7QUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBRXRDLE1BQU0sT0FBTyxNQUFNO0lBQ2pCLE1BQU0sQ0FBYztJQUNwQixPQUFPLENBQVU7SUFFakIsWUFDRSxNQUFrQixFQUNsQixVQUFrQixXQUFXLENBQUMsMkJBQTJCO1FBRXpELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM1QixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFdBQVcsQ0FBQyxZQUFZLEVBQUU7WUFDN0MsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDOUI7UUFFRCxNQUFNLElBQUksU0FBUyxDQUNqQixvQkFBb0IsSUFBSSxDQUFDLE9BQU8sb0RBQW9ELFdBQVcsQ0FBQyxZQUFZLDJCQUEyQixDQUN4SSxDQUFDO0lBQ0osQ0FBQztJQUVELENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2hDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxXQUFXLENBQUMsZUFBZSxFQUFFO1lBQ2hELE9BQU8sY0FBYyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1NBQ25EO1FBRUQsT0FBTyxjQUFjLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQztJQUNyRSxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVVUlEIH0gZnJvbSBcIi4vdXVpZC50c1wiO1xuaW1wb3J0IHsgQlNPTkVycm9yIH0gZnJvbSBcIi4vZXJyb3IudHNcIjtcbmltcG9ydCB7IGI2NCB9IGZyb20gXCIuLi9kZXBzLnRzXCI7XG5cbmV4cG9ydCBjb25zdCBlbnVtIEJpbmFyeVNpemVzIHtcbiAgQlVGRkVSX1NJWkUgPSAyNTYsXG4gIFNVQlRZUEVfREVGQVVMVCA9IDAsXG4gIFNVQlRZUEVfRlVOQ1RJT04gPSAxLFxuICBTVUJUWVBFX0JZVEVfQVJSQVkgPSAyLFxuICBTVUJUWVBFX1VVSUQgPSA0LFxuICBTVUJUWVBFX01ENSA9IDUsXG4gIFNVQlRZUEVfRU5DUllQVEVEID0gNixcbiAgU1VCVFlQRV9DT0xVTU4gPSA3LFxuICBTVUJUWVBFX1VTRVJfREVGSU5FID0gMTI4LFxuICBCU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQgPSAwLFxufVxuXG5jb25zdCB0ZXh0RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuXG5leHBvcnQgY2xhc3MgQmluYXJ5IHtcbiAgYnVmZmVyITogVWludDhBcnJheTtcbiAgc3ViVHlwZSE6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBidWZmZXI6IFVpbnQ4QXJyYXksXG4gICAgc3ViVHlwZTogbnVtYmVyID0gQmluYXJ5U2l6ZXMuQlNPTl9CSU5BUllfU1VCVFlQRV9ERUZBVUxULFxuICApIHtcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB0aGlzLnN1YlR5cGUgPSBzdWJUeXBlO1xuICB9XG5cbiAgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiBiNjQuZW5jb2RlKHRoaXMuYnVmZmVyKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRleHREZWNvZGVyLmRlY29kZSh0aGlzLmJ1ZmZlcik7XG4gIH1cblxuICB0b1VVSUQoKTogVVVJRCB7XG4gICAgaWYgKHRoaXMuc3ViVHlwZSA9PT0gQmluYXJ5U2l6ZXMuU1VCVFlQRV9VVUlEKSB7XG4gICAgICByZXR1cm4gbmV3IFVVSUQodGhpcy5idWZmZXIpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBCU09ORXJyb3IoXG4gICAgICBgQmluYXJ5IHN1Yl90eXBlIFwiJHt0aGlzLnN1YlR5cGV9XCIgaXMgbm90IHN1cHBvcnRlZCBmb3IgY29udmVydGluZyB0byBVVUlELiBPbmx5IFwiJHtCaW5hcnlTaXplcy5TVUJUWVBFX1VVSUR9XCIgaXMgY3VycmVudGx5IHN1cHBvcnRlZC5gLFxuICAgICk7XG4gIH1cblxuICBbU3ltYm9sLmZvcihcIkRlbm8uY3VzdG9tSW5zcGVjdFwiKV0oKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5zdWJUeXBlID09PSBCaW5hcnlTaXplcy5TVUJUWVBFX0RFRkFVTFQpIHtcbiAgICAgIHJldHVybiBgbmV3IEJpbmFyeSgke0Rlbm8uaW5zcGVjdCh0aGlzLmJ1ZmZlcil9KWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGBuZXcgQmluYXJ5KCR7RGVuby5pbnNwZWN0KHRoaXMuYnVmZmVyKX0sICR7dGhpcy5zdWJUeXBlfSlgO1xuICB9XG59XG4iXX0=
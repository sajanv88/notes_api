import { Bson } from "../../deps.ts";
import { checkIndexes } from "./indexes.ts";
import { createUploadStream } from "./upload.ts";
import { MongoRuntimeError } from "../error.ts";
export class GridFSBucket {
    #chunksCollection;
    #filesCollection;
    #chunkSizeBytes;
    #checkedIndexes = false;
    getBucketData = () => ({
        filesCollection: this.#filesCollection,
        chunksCollection: this.#chunksCollection,
        chunkSizeBytes: this.#chunkSizeBytes,
    });
    constructor(db, options = {}) {
        const newLocal = options.bucketName ?? "fs";
        this.#chunksCollection = db.collection(`${newLocal}.chunks`);
        this.#filesCollection = db.collection(`${newLocal}.files`);
        this.#chunkSizeBytes = options.chunkSizeBytes ?? 255 * 1024;
    }
    openUploadStream(filename, options) {
        return this.openUploadStreamWithId(new Bson.ObjectId(), filename, options);
    }
    async openUploadStreamWithId(id, filename, options) {
        if (!this.#checkedIndexes)
            await this.#checkIndexes();
        return createUploadStream(this.getBucketData(), filename, id, options);
    }
    async uploadFromStream(filename, source, options) {
        const objectid = new Bson.ObjectId();
        await source.pipeTo(await this.openUploadStreamWithId(objectid, filename, options));
        return objectid;
    }
    async uploadFromStreamWithId(id, filename, source, options) {
        await source.pipeTo(await this.openUploadStreamWithId(id, filename, options));
    }
    async openDownloadStream(id) {
        if (!this.#checkedIndexes)
            await this.#checkIndexes();
        return new ReadableStream({
            start: async (controller) => {
                const collection = this.#chunksCollection.find({ files_id: id });
                await collection.forEach((value) => controller.enqueue(value?.data.buffer));
                controller.close();
            },
        });
    }
    async downloadToStream(id, destination) {
        await (await this.openDownloadStream(id)).pipeTo(destination);
    }
    async delete(id) {
        await this.#filesCollection.deleteOne({ _id: id });
        const response = await this.#chunksCollection.deleteMany({ files_id: id });
        if (!response) {
            throw new MongoRuntimeError(`File not found for id ${id}`);
        }
    }
    find(filter, options = {}) {
        return this.#filesCollection.find(filter ?? {}, options);
    }
    async drop() {
        await this.#filesCollection.drop();
        await this.#chunksCollection.drop();
    }
    #checkIndexes = () => checkIndexes(this.#filesCollection, this.#chunksCollection, (value) => (this.#checkedIndexes = value));
}
//# sourceMappingURL=data:application/json;base64,
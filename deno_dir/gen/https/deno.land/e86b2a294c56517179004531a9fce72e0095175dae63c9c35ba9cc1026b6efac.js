export function createFileIndex(collection) {
    const index = { filename: 1, uploadDate: 1 };
    return collection.createIndexes({
        indexes: [
            {
                name: "gridFSFiles",
                key: index,
                background: false,
            },
        ],
    });
}
export function createChunksIndex(collection) {
    const index = { files_id: 1, n: 1 };
    return collection.createIndexes({
        indexes: [
            {
                name: "gridFSFiles",
                key: index,
                unique: true,
                background: false,
            },
        ],
    });
}
export async function checkIndexes(filesCollection, chunksCollection, hasCheckedIndexes) {
    const filesCollectionIsEmpty = !(await filesCollection.findOne({}, {
        projection: { _id: 1 },
    }));
    const chunksCollectionIsEmpty = !(await chunksCollection.findOne({}, {
        projection: { _id: 1 },
    }));
    if (filesCollectionIsEmpty || chunksCollectionIsEmpty) {
        await createFileIndex(filesCollection);
        await createChunksIndex(chunksCollection);
        hasCheckedIndexes(true);
        return;
    }
    const fileIndexes = await filesCollection.listIndexes().toArray();
    let hasFileIndex = false;
    if (fileIndexes) {
        fileIndexes.forEach((index) => {
            const keys = Object.keys(index.key);
            if (keys.length === 2 &&
                index.key.filename === 1 &&
                index.key.uploadDate === 1) {
                hasFileIndex = true;
            }
        });
    }
    if (!hasFileIndex) {
        await createFileIndex(filesCollection);
    }
    const chunkIndexes = await chunksCollection.listIndexes().toArray();
    let hasChunksIndex = false;
    if (chunkIndexes) {
        chunkIndexes.forEach((index) => {
            const keys = Object.keys(index.key);
            if (keys.length === 2 &&
                index.key.filename === 1 &&
                index.key.uploadDate === 1 &&
                index.options.unique) {
                hasChunksIndex = true;
            }
        });
    }
    if (!hasChunksIndex) {
        await createChunksIndex(chunksCollection);
    }
    hasCheckedIndexes(true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZGV4ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxVQUFVLGVBQWUsQ0FBQyxVQUE0QjtJQUMxRCxNQUFNLEtBQUssR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBRTdDLE9BQU8sVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUM5QixPQUFPLEVBQUU7WUFDUDtnQkFDRSxJQUFJLEVBQUUsYUFBYTtnQkFDbkIsR0FBRyxFQUFFLEtBQUs7Z0JBQ1YsVUFBVSxFQUFFLEtBQUs7YUFDbEI7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFDRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsVUFBNkI7SUFFN0QsTUFBTSxLQUFLLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUVwQyxPQUFPLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDOUIsT0FBTyxFQUFFO1lBQ1A7Z0JBQ0UsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLEdBQUcsRUFBRSxLQUFLO2dCQUNWLE1BQU0sRUFBRSxJQUFJO2dCQUNaLFVBQVUsRUFBRSxLQUFLO2FBQ2xCO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxZQUFZLENBQ2hDLGVBQWlDLEVBQ2pDLGdCQUFtQyxFQUNuQyxpQkFBMkM7SUFFM0MsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLENBQUMsTUFBTSxlQUFlLENBQUMsT0FBTyxDQUM1RCxFQUFFLEVBQ0Y7UUFDRSxVQUFVLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO0tBQ3ZCLENBQ0YsQ0FBQyxDQUFDO0lBRUgsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLENBQUMsTUFBTSxnQkFBZ0IsQ0FBQyxPQUFPLENBQzlELEVBQUUsRUFDRjtRQUNFLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7S0FDdkIsQ0FDRixDQUFDLENBQUM7SUFFSCxJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixFQUFFO1FBRXJELE1BQU0sZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0saUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMxQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixPQUFPO0tBQ1I7SUFHRCxNQUFNLFdBQVcsR0FBRyxNQUFNLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsRSxJQUFJLFlBQVksR0FBRyxLQUFLLENBQUM7SUFFekIsSUFBSSxXQUFXLEVBQUU7UUFDZixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEMsSUFDRSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUM7Z0JBQ2pCLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLENBQUM7Z0JBQ3hCLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxLQUFLLENBQUMsRUFDMUI7Z0JBQ0EsWUFBWSxHQUFHLElBQUksQ0FBQzthQUNyQjtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ2pCLE1BQU0sZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ3hDO0lBRUQsTUFBTSxZQUFZLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwRSxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFFM0IsSUFBSSxZQUFZLEVBQUU7UUFDaEIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQWUsRUFBRSxFQUFFO1lBQ3ZDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BDLElBQ0UsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO2dCQUNqQixLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxDQUFDO2dCQUN4QixLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSyxDQUFDO2dCQUMxQixLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFDcEI7Z0JBQ0EsY0FBYyxHQUFHLElBQUksQ0FBQzthQUN2QjtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ25CLE1BQU0saUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUMzQztJQUNELGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gXCIuLi90eXBlcy50c1wiO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gXCIuLi9jb2xsZWN0aW9uL2NvbGxlY3Rpb24udHNcIjtcbmltcG9ydCB7IENodW5rLCBGaWxlIH0gZnJvbSBcIi4uL3R5cGVzL2dyaWRmcy50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmlsZUluZGV4KGNvbGxlY3Rpb246IENvbGxlY3Rpb248RmlsZT4pIHtcbiAgY29uc3QgaW5kZXggPSB7IGZpbGVuYW1lOiAxLCB1cGxvYWREYXRlOiAxIH07XG5cbiAgcmV0dXJuIGNvbGxlY3Rpb24uY3JlYXRlSW5kZXhlcyh7XG4gICAgaW5kZXhlczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImdyaWRGU0ZpbGVzXCIsXG4gICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgIGJhY2tncm91bmQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDaHVua3NJbmRleChjb2xsZWN0aW9uOiBDb2xsZWN0aW9uPENodW5rPikge1xuICAvLyBkZW5vLWxpbnQtaWdub3JlIGNhbWVsY2FzZVxuICBjb25zdCBpbmRleCA9IHsgZmlsZXNfaWQ6IDEsIG46IDEgfTtcblxuICByZXR1cm4gY29sbGVjdGlvbi5jcmVhdGVJbmRleGVzKHtcbiAgICBpbmRleGVzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZ3JpZEZTRmlsZXNcIixcbiAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgdW5pcXVlOiB0cnVlLFxuICAgICAgICBiYWNrZ3JvdW5kOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0luZGV4ZXMoXG4gIGZpbGVzQ29sbGVjdGlvbjogQ29sbGVjdGlvbjxGaWxlPixcbiAgY2h1bmtzQ29sbGVjdGlvbjogQ29sbGVjdGlvbjxDaHVuaz4sXG4gIGhhc0NoZWNrZWRJbmRleGVzOiAodmFsdWU6IGJvb2xlYW4pID0+IHZvaWQsXG4pIHtcbiAgY29uc3QgZmlsZXNDb2xsZWN0aW9uSXNFbXB0eSA9ICEoYXdhaXQgZmlsZXNDb2xsZWN0aW9uLmZpbmRPbmUoXG4gICAge30sXG4gICAge1xuICAgICAgcHJvamVjdGlvbjogeyBfaWQ6IDEgfSxcbiAgICB9LFxuICApKTtcblxuICBjb25zdCBjaHVua3NDb2xsZWN0aW9uSXNFbXB0eSA9ICEoYXdhaXQgY2h1bmtzQ29sbGVjdGlvbi5maW5kT25lKFxuICAgIHt9LFxuICAgIHtcbiAgICAgIHByb2plY3Rpb246IHsgX2lkOiAxIH0sXG4gICAgfSxcbiAgKSk7XG5cbiAgaWYgKGZpbGVzQ29sbGVjdGlvbklzRW1wdHkgfHwgY2h1bmtzQ29sbGVjdGlvbklzRW1wdHkpIHtcbiAgICAvLyBBdCBsZWFzdCBvbmUgY29sbGVjdGlvbiBpcyBlbXB0eSBzbyB3ZSBjcmVhdGUgaW5kZXhlc1xuICAgIGF3YWl0IGNyZWF0ZUZpbGVJbmRleChmaWxlc0NvbGxlY3Rpb24pO1xuICAgIGF3YWl0IGNyZWF0ZUNodW5rc0luZGV4KGNodW5rc0NvbGxlY3Rpb24pO1xuICAgIGhhc0NoZWNrZWRJbmRleGVzKHRydWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIE5vdyBjaGVjayB0aGF0IHRoZSByaWdodCBpbmRleGVzIGFyZSB0aGVyZVxuICBjb25zdCBmaWxlSW5kZXhlcyA9IGF3YWl0IGZpbGVzQ29sbGVjdGlvbi5saXN0SW5kZXhlcygpLnRvQXJyYXkoKTtcbiAgbGV0IGhhc0ZpbGVJbmRleCA9IGZhbHNlO1xuXG4gIGlmIChmaWxlSW5kZXhlcykge1xuICAgIGZpbGVJbmRleGVzLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoaW5kZXgua2V5KTtcbiAgICAgIGlmIChcbiAgICAgICAga2V5cy5sZW5ndGggPT09IDIgJiZcbiAgICAgICAgaW5kZXgua2V5LmZpbGVuYW1lID09PSAxICYmXG4gICAgICAgIGluZGV4LmtleS51cGxvYWREYXRlID09PSAxXG4gICAgICApIHtcbiAgICAgICAgaGFzRmlsZUluZGV4ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaGFzRmlsZUluZGV4KSB7XG4gICAgYXdhaXQgY3JlYXRlRmlsZUluZGV4KGZpbGVzQ29sbGVjdGlvbik7XG4gIH1cblxuICBjb25zdCBjaHVua0luZGV4ZXMgPSBhd2FpdCBjaHVua3NDb2xsZWN0aW9uLmxpc3RJbmRleGVzKCkudG9BcnJheSgpO1xuICBsZXQgaGFzQ2h1bmtzSW5kZXggPSBmYWxzZTtcblxuICBpZiAoY2h1bmtJbmRleGVzKSB7XG4gICAgY2h1bmtJbmRleGVzLmZvckVhY2goKGluZGV4OiBEb2N1bWVudCkgPT4ge1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGluZGV4LmtleSk7XG4gICAgICBpZiAoXG4gICAgICAgIGtleXMubGVuZ3RoID09PSAyICYmXG4gICAgICAgIGluZGV4LmtleS5maWxlbmFtZSA9PT0gMSAmJlxuICAgICAgICBpbmRleC5rZXkudXBsb2FkRGF0ZSA9PT0gMSAmJlxuICAgICAgICBpbmRleC5vcHRpb25zLnVuaXF1ZVxuICAgICAgKSB7XG4gICAgICAgIGhhc0NodW5rc0luZGV4ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaGFzQ2h1bmtzSW5kZXgpIHtcbiAgICBhd2FpdCBjcmVhdGVDaHVua3NJbmRleChjaHVua3NDb2xsZWN0aW9uKTtcbiAgfVxuICBoYXNDaGVja2VkSW5kZXhlcyh0cnVlKTtcbn1cbiJdfQ==
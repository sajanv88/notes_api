import { httpErrors } from "./httpError.ts";
const COLON = ":".charCodeAt(0);
const HTAB = "\t".charCodeAt(0);
const SPACE = " ".charCodeAt(0);
const decoder = new TextDecoder();
export function toParamRegExp(attributePattern, flags) {
    return new RegExp(`(?:^|;)\\s*${attributePattern}\\s*=\\s*` +
        `(` +
        `[^";\\s][^;\\s]*` +
        `|` +
        `"(?:[^"\\\\]|\\\\"?)+"?` +
        `)`, flags);
}
export async function readHeaders(body) {
    const headers = {};
    let readResult = await body.readLine();
    while (readResult) {
        const { bytes } = readResult;
        if (!bytes.length) {
            return headers;
        }
        let i = bytes.indexOf(COLON);
        if (i === -1) {
            throw new httpErrors.BadRequest(`Malformed header: ${decoder.decode(bytes)}`);
        }
        const key = decoder.decode(bytes.subarray(0, i)).trim().toLowerCase();
        if (key === "") {
            throw new httpErrors.BadRequest("Invalid header key.");
        }
        i++;
        while (i < bytes.byteLength && (bytes[i] === SPACE || bytes[i] === HTAB)) {
            i++;
        }
        const value = decoder.decode(bytes.subarray(i)).trim();
        headers[key] = value;
        readResult = await body.readLine();
    }
    throw new httpErrors.BadRequest("Unexpected end of body reached.");
}
export function unquote(value) {
    if (value.startsWith(`"`)) {
        const parts = value.slice(1).split(`\\"`);
        for (let i = 0; i < parts.length; ++i) {
            const quoteIndex = parts[i].indexOf(`"`);
            if (quoteIndex !== -1) {
                parts[i] = parts[i].slice(0, quoteIndex);
                parts.length = i + 1;
            }
            parts[i] = parts[i].replace(/\\(.)/g, "$1");
        }
        value = parts.join(`"`);
    }
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhlYWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTVDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWhDLE1BQU0sT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7QUFJbEMsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsZ0JBQXdCLEVBQ3hCLEtBQWM7SUFHZCxPQUFPLElBQUksTUFBTSxDQUNmLGNBQWMsZ0JBQWdCLFdBQVc7UUFDekMsR0FBRztRQUNELGtCQUFrQjtRQUNwQixHQUFHO1FBQ0QseUJBQXlCO1FBQzNCLEdBQUcsRUFDSCxLQUFLLENBQ04sQ0FBQztBQUNKLENBQUM7QUFJRCxNQUFNLENBQUMsS0FBSyxVQUFVLFdBQVcsQ0FDL0IsSUFBZTtJQUVmLE1BQU0sT0FBTyxHQUEyQixFQUFFLENBQUM7SUFDM0MsSUFBSSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkMsT0FBTyxVQUFVLEVBQUU7UUFDakIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNqQixPQUFPLE9BQU8sQ0FBQztTQUNoQjtRQUNELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDWixNQUFNLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FDN0IscUJBQXFCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDN0MsQ0FBQztTQUNIO1FBQ0QsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3RFLElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRTtZQUNkLE1BQU0sSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDeEQ7UUFDRCxDQUFDLEVBQUUsQ0FBQztRQUNKLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRTtZQUN4RSxDQUFDLEVBQUUsQ0FBQztTQUNMO1FBQ0QsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNyQixVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDcEM7SUFDRCxNQUFNLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFHRCxNQUFNLFVBQVUsT0FBTyxDQUFDLEtBQWE7SUFDbkMsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekMsSUFBSSxVQUFVLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDekMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3RCO1lBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDekI7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyIHRoZSBvYWsgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmltcG9ydCB0eXBlIHsgQnVmUmVhZGVyIH0gZnJvbSBcIi4vYnVmX3JlYWRlci50c1wiO1xuaW1wb3J0IHsgaHR0cEVycm9ycyB9IGZyb20gXCIuL2h0dHBFcnJvci50c1wiO1xuXG5jb25zdCBDT0xPTiA9IFwiOlwiLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBIVEFCID0gXCJcXHRcIi5jaGFyQ29kZUF0KDApO1xuY29uc3QgU1BBQ0UgPSBcIiBcIi5jaGFyQ29kZUF0KDApO1xuXG5jb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5cbi8qKiBXaXRoIGEgcHJvdmlkZWQgYXR0cmlidXRlIHBhdHRlcm4sIHJldHVybiBhIFJlZ0V4cCB3aGljaCB3aWxsIG1hdGNoIGFuZFxuICogY2FwdHVyZSBpbiB0aGUgZmlyc3QgZ3JvdXAgdGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgZnJvbSBhIGhlYWRlciB2YWx1ZS4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1BhcmFtUmVnRXhwKFxuICBhdHRyaWJ1dGVQYXR0ZXJuOiBzdHJpbmcsXG4gIGZsYWdzPzogc3RyaW5nLFxuKTogUmVnRXhwIHtcbiAgLy8gZGVuby1mbXQtaWdub3JlXG4gIHJldHVybiBuZXcgUmVnRXhwKFxuICAgIGAoPzpefDspXFxcXHMqJHthdHRyaWJ1dGVQYXR0ZXJufVxcXFxzKj1cXFxccypgICtcbiAgICBgKGAgK1xuICAgICAgYFteXCI7XFxcXHNdW147XFxcXHNdKmAgK1xuICAgIGB8YCArXG4gICAgICBgXCIoPzpbXlwiXFxcXFxcXFxdfFxcXFxcXFxcXCI/KStcIj9gICtcbiAgICBgKWAsXG4gICAgZmxhZ3NcbiAgKTtcbn1cblxuLyoqIEFzeW5jaHJvbm91c2x5IHJlYWQgdGhlIGhlYWRlcnMgb3V0IG9mIGJvZHkgcmVxdWVzdCBhbmQgcmVzb2x2ZSB3aXRoIHRoZW0gYXNcbiAqIGEgYEhlYWRlcnNgIG9iamVjdC4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkSGVhZGVycyhcbiAgYm9keTogQnVmUmVhZGVyLFxuKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiB7XG4gIGNvbnN0IGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgbGV0IHJlYWRSZXN1bHQgPSBhd2FpdCBib2R5LnJlYWRMaW5lKCk7XG4gIHdoaWxlIChyZWFkUmVzdWx0KSB7XG4gICAgY29uc3QgeyBieXRlcyB9ID0gcmVhZFJlc3VsdDtcbiAgICBpZiAoIWJ5dGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgfVxuICAgIGxldCBpID0gYnl0ZXMuaW5kZXhPZihDT0xPTik7XG4gICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgaHR0cEVycm9ycy5CYWRSZXF1ZXN0KFxuICAgICAgICBgTWFsZm9ybWVkIGhlYWRlcjogJHtkZWNvZGVyLmRlY29kZShieXRlcyl9YCxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IGRlY29kZXIuZGVjb2RlKGJ5dGVzLnN1YmFycmF5KDAsIGkpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoa2V5ID09PSBcIlwiKSB7XG4gICAgICB0aHJvdyBuZXcgaHR0cEVycm9ycy5CYWRSZXF1ZXN0KFwiSW52YWxpZCBoZWFkZXIga2V5LlwiKTtcbiAgICB9XG4gICAgaSsrO1xuICAgIHdoaWxlIChpIDwgYnl0ZXMuYnl0ZUxlbmd0aCAmJiAoYnl0ZXNbaV0gPT09IFNQQUNFIHx8IGJ5dGVzW2ldID09PSBIVEFCKSkge1xuICAgICAgaSsrO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IGRlY29kZXIuZGVjb2RlKGJ5dGVzLnN1YmFycmF5KGkpKS50cmltKCk7XG4gICAgaGVhZGVyc1trZXldID0gdmFsdWU7XG4gICAgcmVhZFJlc3VsdCA9IGF3YWl0IGJvZHkucmVhZExpbmUoKTtcbiAgfVxuICB0aHJvdyBuZXcgaHR0cEVycm9ycy5CYWRSZXF1ZXN0KFwiVW5leHBlY3RlZCBlbmQgb2YgYm9keSByZWFjaGVkLlwiKTtcbn1cblxuLyoqIFVucXVvdGVzIGF0dHJpYnV0ZSB2YWx1ZXMgdGhhdCBtaWdodCBiZSBwYXNzIGFzIHBhcnQgb2YgYSBoZWFkZXIuICovXG5leHBvcnQgZnVuY3Rpb24gdW5xdW90ZSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoYFwiYCkpIHtcbiAgICBjb25zdCBwYXJ0cyA9IHZhbHVlLnNsaWNlKDEpLnNwbGl0KGBcXFxcXCJgKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBxdW90ZUluZGV4ID0gcGFydHNbaV0uaW5kZXhPZihgXCJgKTtcbiAgICAgIGlmIChxdW90ZUluZGV4ICE9PSAtMSkge1xuICAgICAgICBwYXJ0c1tpXSA9IHBhcnRzW2ldLnNsaWNlKDAsIHF1b3RlSW5kZXgpO1xuICAgICAgICBwYXJ0cy5sZW5ndGggPSBpICsgMTsgLy8gVHJ1bmNhdGVzIGFuZCBzdG9wcyB0aGUgbG9vcFxuICAgICAgfVxuICAgICAgcGFydHNbaV0gPSBwYXJ0c1tpXS5yZXBsYWNlKC9cXFxcKC4pL2csIFwiJDFcIik7XG4gICAgfVxuICAgIHZhbHVlID0gcGFydHMuam9pbihgXCJgKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG4iXX0=
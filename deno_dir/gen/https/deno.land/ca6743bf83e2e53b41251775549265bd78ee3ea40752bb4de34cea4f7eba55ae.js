import { BufReader, deferred, writeAll } from "../../deps.ts";
import { MongoDriverError, MongoServerError, } from "../error.ts";
import { handshake } from "./handshake.ts";
import { parseHeader } from "./header.ts";
import { deserializeMessage, serializeMessage } from "./message.ts";
let nextRequestId = 0;
export class WireProtocol {
    #socket;
    #isPendingResponse = false;
    #isPendingRequest = false;
    #pendingResponses = new Map();
    #reader;
    #commandQueue = [];
    constructor(socket) {
        this.#socket = socket;
        this.#reader = new BufReader(this.#socket);
    }
    async connect() {
        const { connectionId: _connectionId } = await handshake(this);
    }
    async commandSingle(db, body) {
        const [doc] = await this.command(db, body);
        if (doc.ok === 0) {
            throw new MongoServerError(doc);
        }
        return doc;
    }
    async command(db, body) {
        const requestId = nextRequestId++;
        const commandTask = {
            requestId,
            db,
            body,
        };
        this.#commandQueue.push(commandTask);
        this.send();
        const pendingMessage = deferred();
        this.#pendingResponses.set(requestId, pendingMessage);
        this.receive();
        const message = await pendingMessage;
        let documents = [];
        for (const section of message?.sections) {
            if ("document" in section) {
                documents.push(section.document);
            }
            else {
                documents = documents.concat(section.documents);
            }
        }
        return documents;
    }
    async send() {
        if (this.#isPendingRequest)
            return;
        this.#isPendingRequest = true;
        while (this.#commandQueue.length > 0) {
            const task = this.#commandQueue.shift();
            const buffer = serializeMessage({
                requestId: task.requestId,
                responseTo: 0,
                sections: [
                    {
                        document: {
                            ...task.body,
                            $db: task.db,
                        },
                    },
                ],
            });
            await writeAll(this.#socket, buffer);
        }
        this.#isPendingRequest = false;
    }
    async receive() {
        if (this.#isPendingResponse)
            return;
        this.#isPendingResponse = true;
        while (this.#pendingResponses.size > 0) {
            const headerBuffer = await this.#reader.readFull(new Uint8Array(16));
            if (!headerBuffer)
                throw new MongoDriverError("Invalid response header");
            const header = parseHeader(headerBuffer);
            const bodyBuffer = await this.#reader.readFull(new Uint8Array(header.messageLength - 16));
            if (!bodyBuffer)
                throw new MongoDriverError("Invalid response body");
            const reply = deserializeMessage(header, bodyBuffer);
            const pendingMessage = this.#pendingResponses.get(header.responseTo);
            this.#pendingResponses.delete(header.responseTo);
            pendingMessage?.resolve(reply);
        }
        this.#isPendingResponse = false;
    }
}
//# sourceMappingURL=data:application/json;base64,
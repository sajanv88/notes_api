export async function update(protocol, dbName, collectionName, query, doc, options) {
    const { n, nModified, upserted } = await protocol.commandSingle(dbName, {
        update: collectionName,
        updates: [
            {
                q: query,
                u: doc,
                upsert: options?.upsert ?? false,
                multi: options?.multi ?? true,
                collation: options?.collation,
                arrayFilters: options?.arrayFilters,
                hint: options?.hint,
            },
        ],
        writeConcern: options?.writeConcern,
        ordered: options?.ordered ?? true,
        bypassDocumentValidation: options?.bypassDocumentValidation,
        comment: options?.comment,
    });
    return {
        upsertedIds: upserted?.map((id) => id._id),
        upsertedCount: upserted?.length ?? 0,
        modifiedCount: nModified,
        matchedCount: n,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXBkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsTUFBTSxDQUMxQixRQUFzQixFQUN0QixNQUFjLEVBQ2QsY0FBc0IsRUFDdEIsS0FBZSxFQUNmLEdBQWEsRUFDYixPQUF1QjtJQUV2QixNQUFNLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxhQUFhLENBRTdELE1BQU0sRUFBRTtRQUNSLE1BQU0sRUFBRSxjQUFjO1FBQ3RCLE9BQU8sRUFBRTtZQUNQO2dCQUNFLENBQUMsRUFBRSxLQUFLO2dCQUNSLENBQUMsRUFBRSxHQUFHO2dCQUNOLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxJQUFJLEtBQUs7Z0JBQ2hDLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxJQUFJLElBQUk7Z0JBQzdCLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUztnQkFDN0IsWUFBWSxFQUFFLE9BQU8sRUFBRSxZQUFZO2dCQUNuQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUk7YUFDcEI7U0FDRjtRQUNELFlBQVksRUFBRSxPQUFPLEVBQUUsWUFBWTtRQUNuQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sSUFBSSxJQUFJO1FBQ2pDLHdCQUF3QixFQUFFLE9BQU8sRUFBRSx3QkFBd0I7UUFDM0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPO0tBQzFCLENBQUMsQ0FBQztJQUVILE9BQU87UUFDTCxXQUFXLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUMxQyxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sSUFBSSxDQUFDO1FBQ3BDLGFBQWEsRUFBRSxTQUFTO1FBQ3hCLFlBQVksRUFBRSxDQUFDO0tBQ2hCLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnNvbiB9IGZyb20gXCIuLi8uLi8uLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBEb2N1bWVudCwgVXBkYXRlT3B0aW9ucyB9IGZyb20gXCIuLi8uLi90eXBlcy50c1wiO1xuaW1wb3J0IHsgV2lyZVByb3RvY29sIH0gZnJvbSBcIi4uLy4uL3Byb3RvY29sL21vZC50c1wiO1xuXG5pbnRlcmZhY2UgVXBkYXRlUmVzcG9uc2Uge1xuICBvazogbnVtYmVyO1xuICBuTW9kaWZpZWQ6IG51bWJlcjtcbiAgbjogbnVtYmVyO1xuICB1cHNlcnRlZD86IHtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIF9pZDogQnNvbi5PYmplY3RJZDtcbiAgfVtdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlKFxuICBwcm90b2NvbDogV2lyZVByb3RvY29sLFxuICBkYk5hbWU6IHN0cmluZyxcbiAgY29sbGVjdGlvbk5hbWU6IHN0cmluZyxcbiAgcXVlcnk6IERvY3VtZW50LFxuICBkb2M6IERvY3VtZW50LFxuICBvcHRpb25zPzogVXBkYXRlT3B0aW9ucyxcbikge1xuICBjb25zdCB7IG4sIG5Nb2RpZmllZCwgdXBzZXJ0ZWQgfSA9IGF3YWl0IHByb3RvY29sLmNvbW1hbmRTaW5nbGU8XG4gICAgVXBkYXRlUmVzcG9uc2VcbiAgPihkYk5hbWUsIHtcbiAgICB1cGRhdGU6IGNvbGxlY3Rpb25OYW1lLFxuICAgIHVwZGF0ZXM6IFtcbiAgICAgIHtcbiAgICAgICAgcTogcXVlcnksXG4gICAgICAgIHU6IGRvYyxcbiAgICAgICAgdXBzZXJ0OiBvcHRpb25zPy51cHNlcnQgPz8gZmFsc2UsXG4gICAgICAgIG11bHRpOiBvcHRpb25zPy5tdWx0aSA/PyB0cnVlLFxuICAgICAgICBjb2xsYXRpb246IG9wdGlvbnM/LmNvbGxhdGlvbixcbiAgICAgICAgYXJyYXlGaWx0ZXJzOiBvcHRpb25zPy5hcnJheUZpbHRlcnMsXG4gICAgICAgIGhpbnQ6IG9wdGlvbnM/LmhpbnQsXG4gICAgICB9LFxuICAgIF0sXG4gICAgd3JpdGVDb25jZXJuOiBvcHRpb25zPy53cml0ZUNvbmNlcm4sXG4gICAgb3JkZXJlZDogb3B0aW9ucz8ub3JkZXJlZCA/PyB0cnVlLFxuICAgIGJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbjogb3B0aW9ucz8uYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uLFxuICAgIGNvbW1lbnQ6IG9wdGlvbnM/LmNvbW1lbnQsXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgdXBzZXJ0ZWRJZHM6IHVwc2VydGVkPy5tYXAoKGlkKSA9PiBpZC5faWQpLFxuICAgIHVwc2VydGVkQ291bnQ6IHVwc2VydGVkPy5sZW5ndGggPz8gMCxcbiAgICBtb2RpZmllZENvdW50OiBuTW9kaWZpZWQsXG4gICAgbWF0Y2hlZENvdW50OiBuLFxuICB9O1xufVxuIl19
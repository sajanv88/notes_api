import * as bcrypt from "./bcrypt/bcrypt.ts";
export async function hash(plaintext, salt = undefined) {
    let worker = new Worker(new URL("worker.ts", import.meta.url).toString(), { type: "module", deno: true });
    worker.postMessage({
        action: "hash",
        payload: {
            plaintext,
            salt,
        },
    });
    return new Promise((resolve) => {
        worker.onmessage = (event) => {
            resolve(event.data);
            worker.terminate();
        };
    });
}
export async function genSalt(log_rounds = undefined) {
    let worker = new Worker(new URL("worker.ts", import.meta.url).toString(), { type: "module", deno: true });
    worker.postMessage({
        action: "genSalt",
        payload: {
            log_rounds,
        },
    });
    return new Promise((resolve) => {
        worker.onmessage = (event) => {
            resolve(event.data);
            worker.terminate();
        };
    });
}
export async function compare(plaintext, hash) {
    let worker = new Worker(new URL("worker.ts", import.meta.url).toString(), { type: "module", deno: true });
    worker.postMessage({
        action: "compare",
        payload: {
            plaintext,
            hash,
        },
    });
    return new Promise((resolve) => {
        worker.onmessage = (event) => {
            resolve(event.data);
            worker.terminate();
        };
    });
}
export function compareSync(plaintext, hash) {
    try {
        return bcrypt.checkpw(plaintext, hash);
    }
    catch {
        return false;
    }
}
export function genSaltSync(log_rounds = undefined) {
    return bcrypt.gensalt(log_rounds);
}
export function hashSync(plaintext, salt = undefined) {
    return bcrypt.hashpw(plaintext, salt);
}
//# sourceMappingURL=data:application/json;base64,
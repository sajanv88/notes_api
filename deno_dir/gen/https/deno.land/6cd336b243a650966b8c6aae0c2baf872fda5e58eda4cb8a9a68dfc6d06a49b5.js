import { contentType, Status, STATUS_TEXT } from "./deps.ts";
import { DomResponse } from "./http_server_native.ts";
import { BODY_TYPES, encodeUrl, isAsyncIterable, isHtml, isReader, isRedirectStatus, readableStreamFromAsyncIterable, readableStreamFromReader, Uint8ArrayTransformStream, } from "./util.ts";
export const REDIRECT_BACK = Symbol("redirect backwards");
export async function convertBodyToBodyInit(body, type) {
    let result;
    if (BODY_TYPES.includes(typeof body)) {
        result = String(body);
        type = type ?? (isHtml(result) ? "html" : "text/plain");
    }
    else if (isReader(body)) {
        result = readableStreamFromReader(body);
    }
    else if (ArrayBuffer.isView(body) || body instanceof ArrayBuffer ||
        body instanceof Blob || body instanceof URLSearchParams) {
        result = body;
    }
    else if (body instanceof ReadableStream) {
        result = body.pipeThrough(new Uint8ArrayTransformStream());
    }
    else if (body instanceof FormData) {
        result = body;
        type = "multipart/form-data";
    }
    else if (isAsyncIterable(body)) {
        result = readableStreamFromAsyncIterable(body);
    }
    else if (body && typeof body === "object") {
        result = JSON.stringify(body);
        type = type ?? "json";
    }
    else if (typeof body === "function") {
        const result = body.call(null);
        return convertBodyToBodyInit(await result, type);
    }
    else if (body) {
        throw new TypeError("Response body was set but could not be converted.");
    }
    return [result, type];
}
export class Response {
    #body;
    #bodySet = false;
    #domResponse;
    #headers = new Headers();
    #request;
    #resources = [];
    #status;
    #type;
    #writable = true;
    async #getBodyInit() {
        const [body, type] = await convertBodyToBodyInit(this.body, this.type);
        this.type = type;
        return body;
    }
    #setContentType() {
        if (this.type) {
            const contentTypeString = contentType(this.type);
            if (contentTypeString && !this.headers.has("Content-Type")) {
                this.headers.append("Content-Type", contentTypeString);
            }
        }
    }
    get body() {
        return this.#body;
    }
    set body(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#bodySet = true;
        this.#body = value;
    }
    get headers() {
        return this.#headers;
    }
    set headers(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#headers = value;
    }
    get status() {
        if (this.#status) {
            return this.#status;
        }
        return this.body != null
            ? Status.OK
            : this.#bodySet
                ? Status.NoContent
                : Status.NotFound;
    }
    set status(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#status = value;
    }
    get type() {
        return this.#type;
    }
    set type(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#type = value;
    }
    get writable() {
        return this.#writable;
    }
    constructor(request) {
        this.#request = request;
    }
    addResource(rid) {
        this.#resources.push(rid);
    }
    destroy(closeResources = true) {
        this.#writable = false;
        this.#body = undefined;
        this.#domResponse = undefined;
        if (closeResources) {
            for (const rid of this.#resources) {
                try {
                    Deno.close(rid);
                }
                catch {
                }
            }
        }
    }
    redirect(url, alt = "/") {
        if (url === REDIRECT_BACK) {
            url = this.#request.headers.get("Referer") ?? String(alt);
        }
        else if (typeof url === "object") {
            url = String(url);
        }
        this.headers.set("Location", encodeUrl(url));
        if (!this.status || !isRedirectStatus(this.status)) {
            this.status = Status.Found;
        }
        if (this.#request.accepts("html")) {
            url = encodeURI(url);
            this.type = "text/html; charset=utf-8";
            this.body = `Redirecting to <a href="${url}">${url}</a>.`;
            return;
        }
        this.type = "text/plain; charset=utf-8";
        this.body = `Redirecting to ${url}.`;
    }
    async toDomResponse() {
        if (this.#domResponse) {
            return this.#domResponse;
        }
        const bodyInit = await this.#getBodyInit();
        this.#setContentType();
        const { headers } = this;
        if (!(bodyInit ||
            headers.has("Content-Type") ||
            headers.has("Content-Length"))) {
            headers.append("Content-Length", "0");
        }
        this.#writable = false;
        const status = this.status;
        const responseInit = {
            headers,
            status,
            statusText: STATUS_TEXT.get(status),
        };
        return this.#domResponse = new DomResponse(bodyInit, responseInit);
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        const { body, headers, status, type, writable } = this;
        return `Response ${inspect({ body, headers, status, type, writable })}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXNwb25zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXRELE9BQU8sRUFDTCxVQUFVLEVBQ1YsU0FBUyxFQUNULGVBQWUsRUFDZixNQUFNLEVBQ04sUUFBUSxFQUNSLGdCQUFnQixFQUNoQiwrQkFBK0IsRUFDL0Isd0JBQXdCLEVBQ3hCLHlCQUF5QixHQUMxQixNQUFNLFdBQVcsQ0FBQztBQStCbkIsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBRTFELE1BQU0sQ0FBQyxLQUFLLFVBQVUscUJBQXFCLENBQ3pDLElBQXlCLEVBQ3pCLElBQWE7SUFFYixJQUFJLE1BQXVDLENBQUM7SUFDNUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUU7UUFDcEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ3pEO1NBQU0sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDekIsTUFBTSxHQUFHLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3pDO1NBQU0sSUFDTCxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksWUFBWSxXQUFXO1FBQ3ZELElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxZQUFZLGVBQWUsRUFDdkQ7UUFDQSxNQUFNLEdBQUcsSUFBSSxDQUFDO0tBQ2Y7U0FBTSxJQUFJ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QU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUMxRSxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyIHRoZSBvYWsgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmltcG9ydCB7IGNvbnRlbnRUeXBlLCBTdGF0dXMsIFNUQVRVU19URVhUIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuaW1wb3J0IHsgRG9tUmVzcG9uc2UgfSBmcm9tIFwiLi9odHRwX3NlcnZlcl9uYXRpdmUudHNcIjtcbmltcG9ydCB0eXBlIHsgUmVxdWVzdCB9IGZyb20gXCIuL3JlcXVlc3QudHNcIjtcbmltcG9ydCB7XG4gIEJPRFlfVFlQRVMsXG4gIGVuY29kZVVybCxcbiAgaXNBc3luY0l0ZXJhYmxlLFxuICBpc0h0bWwsXG4gIGlzUmVhZGVyLFxuICBpc1JlZGlyZWN0U3RhdHVzLFxuICByZWFkYWJsZVN0cmVhbUZyb21Bc3luY0l0ZXJhYmxlLFxuICByZWFkYWJsZVN0cmVhbUZyb21SZWFkZXIsXG4gIFVpbnQ4QXJyYXlUcmFuc2Zvcm1TdHJlYW0sXG59IGZyb20gXCIuL3V0aWwudHNcIjtcblxudHlwZSBCb2R5ID1cbiAgfCBzdHJpbmdcbiAgfCBudW1iZXJcbiAgfCBiaWdpbnRcbiAgfCBib29sZWFuXG4gIHwgc3ltYm9sXG4gIC8vIGRlbm8tbGludC1pZ25vcmUgYmFuLXR5cGVzXG4gIHwgb2JqZWN0XG4gIHwgdW5kZWZpbmVkXG4gIHwgbnVsbDtcbnR5cGUgQm9keUZ1bmN0aW9uID0gKCkgPT4gQm9keSB8IFByb21pc2U8Qm9keT47XG5cbi8qKiBBIHN5bWJvbCB0aGF0IGluZGljYXRlcyB0byBgcmVzcG9uc2UucmVkaXJlY3QoKWAgdG8gYXR0ZW1wdCB0byByZWRpcmVjdFxuICogYmFjayB0byB0aGUgcmVxdWVzdCByZWZlcnJlci4gIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBBcHBsaWNhdGlvbiwgUkVESVJFQ1RfQkFDSyB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC94L29hay9tb2QudHNcIjtcbiAqXG4gKiBjb25zdCBhcHAgPSBuZXcgQXBwbGljYXRpb24oKTtcbiAqXG4gKiBhcHAudXNlKChjdHgpID0+IHtcbiAqICAgaWYgKGN0eC5yZXF1ZXN0LnVybC5wYXRoTmFtZSA9PT0gXCIvYmFja1wiKSB7XG4gKiAgICAgY3R4LnJlc3BvbnNlLnJlZGlyZWN0KFJFRElSRUNUX0JBQ0ssIFwiL1wiKTtcbiAqICAgfVxuICogfSk7XG4gKlxuICogYXdhaXQgYXBwLmxpc3Rlbih7IHBvcnQ6IDgwIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBSRURJUkVDVF9CQUNLID0gU3ltYm9sKFwicmVkaXJlY3QgYmFja3dhcmRzXCIpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29udmVydEJvZHlUb0JvZHlJbml0KFxuICBib2R5OiBCb2R5IHwgQm9keUZ1bmN0aW9uLFxuICB0eXBlPzogc3RyaW5nLFxuKTogUHJvbWlzZTxbZ2xvYmFsVGhpcy5Cb2R5SW5pdCB8IHVuZGVmaW5lZCwgc3RyaW5nIHwgdW5kZWZpbmVkXT4ge1xuICBsZXQgcmVzdWx0OiBnbG9iYWxUaGlzLkJvZHlJbml0IHwgdW5kZWZpbmVkO1xuICBpZiAoQk9EWV9UWVBFUy5pbmNsdWRlcyh0eXBlb2YgYm9keSkpIHtcbiAgICByZXN1bHQgPSBTdHJpbmcoYm9keSk7XG4gICAgdHlwZSA9IHR5cGUgPz8gKGlzSHRtbChyZXN1bHQpID8gXCJodG1sXCIgOiBcInRleHQvcGxhaW5cIik7XG4gIH0gZWxzZSBpZiAoaXNSZWFkZXIoYm9keSkpIHtcbiAgICByZXN1bHQgPSByZWFkYWJsZVN0cmVhbUZyb21SZWFkZXIoYm9keSk7XG4gIH0gZWxzZSBpZiAoXG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3KGJvZHkpIHx8IGJvZHkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fFxuICAgIGJvZHkgaW5zdGFuY2VvZiBCbG9iIHx8IGJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXNcbiAgKSB7XG4gICAgcmVzdWx0ID0gYm9keTtcbiAgfSBlbHNlIGlmIChib2R5IGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXN1bHQgPSBib2R5LnBpcGVUaHJvdWdoKG5ldyBVaW50OEFycmF5VHJhbnNmb3JtU3RyZWFtKCkpO1xuICB9IGVsc2UgaWYgKGJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgIHJlc3VsdCA9IGJvZHk7XG4gICAgdHlwZSA9IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiO1xuICB9IGVsc2UgaWYgKGlzQXN5bmNJdGVyYWJsZShib2R5KSkge1xuICAgIHJlc3VsdCA9IHJlYWRhYmxlU3RyZWFtRnJvbUFzeW5jSXRlcmFibGUoYm9keSk7XG4gIH0gZWxzZSBpZiAoYm9keSAmJiB0eXBlb2YgYm9keSA9PT0gXCJvYmplY3RcIikge1xuICAgIHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICAgIHR5cGUgPSB0eXBlID8/IFwianNvblwiO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjb25zdCByZXN1bHQgPSBib2R5LmNhbGwobnVsbCk7XG4gICAgcmV0dXJuIGNvbnZlcnRCb2R5VG9Cb2R5SW5pdChhd2FpdCByZXN1bHQsIHR5cGUpO1xuICB9IGVsc2UgaWYgKGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVzcG9uc2UgYm9keSB3YXMgc2V0IGJ1dCBjb3VsZCBub3QgYmUgY29udmVydGVkLlwiKTtcbiAgfVxuICByZXR1cm4gW3Jlc3VsdCwgdHlwZV07XG59XG5cbi8qKiBBbiBpbnRlcmZhY2UgdG8gY29udHJvbCB3aGF0IHJlc3BvbnNlIHdpbGwgYmUgc2VudCB3aGVuIHRoZSBtaWRkbGV3YXJlXG4gKiBmaW5pc2hlcyBwcm9jZXNzaW5nIHRoZSByZXF1ZXN0LiAqL1xuZXhwb3J0IGNsYXNzIFJlc3BvbnNlIHtcbiAgI2JvZHk/OiBCb2R5IHwgQm9keUZ1bmN0aW9uO1xuICAjYm9keVNldCA9IGZhbHNlO1xuICAjZG9tUmVzcG9uc2U/OiBnbG9iYWxUaGlzLlJlc3BvbnNlO1xuICAjaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gICNyZXF1ZXN0OiBSZXF1ZXN0O1xuICAjcmVzb3VyY2VzOiBudW1iZXJbXSA9IFtdO1xuICAjc3RhdHVzPzogU3RhdHVzO1xuICAjdHlwZT86IHN0cmluZztcbiAgI3dyaXRhYmxlID0gdHJ1ZTtcblxuICBhc3luYyAjZ2V0Qm9keUluaXQoKTogUHJvbWlzZTxnbG9iYWxUaGlzLkJvZHlJbml0IHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgW2JvZHksIHR5cGVdID0gYXdhaXQgY29udmVydEJvZHlUb0JvZHlJbml0KHRoaXMuYm9keSwgdGhpcy50eXBlKTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHJldHVybiBib2R5O1xuICB9XG5cbiAgI3NldENvbnRlbnRUeXBlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnR5cGUpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnRUeXBlU3RyaW5nID0gY29udGVudFR5cGUodGhpcy50eXBlKTtcbiAgICAgIGlmIChjb250ZW50VHlwZVN0cmluZyAmJiAhdGhpcy5oZWFkZXJzLmhhcyhcIkNvbnRlbnQtVHlwZVwiKSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuYXBwZW5kKFwiQ29udGVudC1UeXBlXCIsIGNvbnRlbnRUeXBlU3RyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogVGhlIGJvZHkgb2YgdGhlIHJlc3BvbnNlLiAgVGhlIGJvZHkgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHByb2Nlc3NlZCB3aGVuXG4gICAqIHRoZSByZXNwb25zZSBpcyBiZWluZyBzZW50IGFuZCBjb252ZXJ0ZWQgdG8gYSBgVWludDhBcnJheWAgb3IgYVxuICAgKiBgRGVuby5SZWFkZXJgLlxuICAgKlxuICAgKiBBdXRvbWF0aWMgY29udmVyc2lvbiB0byBhIGBEZW5vLlJlYWRlcmAgb2NjdXJzIGZvciBhc3luYyBpdGVyYWJsZXMuICovXG4gIGdldCBib2R5KCk6IEJvZHkgfCBCb2R5RnVuY3Rpb24ge1xuICAgIHJldHVybiB0aGlzLiNib2R5O1xuICB9XG5cbiAgLyoqIFRoZSBib2R5IG9mIHRoZSByZXNwb25zZS4gIFRoZSBib2R5IHdpbGwgYmUgYXV0b21hdGljYWxseSBwcm9jZXNzZWQgd2hlblxuICAgKiB0aGUgcmVzcG9uc2UgaXMgYmVpbmcgc2VudCBhbmQgY29udmVydGVkIHRvIGEgYFVpbnQ4QXJyYXlgIG9yIGFcbiAgICogYERlbm8uUmVhZGVyYC5cbiAgICpcbiAgICogQXV0b21hdGljIGNvbnZlcnNpb24gdG8gYSBgRGVuby5SZWFkZXJgIG9jY3VycyBmb3IgYXN5bmMgaXRlcmFibGVzLiAqL1xuICBzZXQgYm9keSh2YWx1ZTogQm9keSB8IEJvZHlGdW5jdGlvbikge1xuICAgIGlmICghdGhpcy4jd3JpdGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByZXNwb25zZSBpcyBub3Qgd3JpdGFibGUuXCIpO1xuICAgIH1cbiAgICB0aGlzLiNib2R5U2V0ID0gdHJ1ZTtcbiAgICB0aGlzLiNib2R5ID0gdmFsdWU7XG4gIH1cblxuICAvKiogSGVhZGVycyB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlIHJlc3BvbnNlLiAqL1xuICBnZXQgaGVhZGVycygpOiBIZWFkZXJzIHtcbiAgICByZXR1cm4gdGhpcy4jaGVhZGVycztcbiAgfVxuXG4gIC8qKiBIZWFkZXJzIHRoYXQgd2lsbCBiZSByZXR1cm5lZCBpbiB0aGUgcmVzcG9uc2UuICovXG4gIHNldCBoZWFkZXJzKHZhbHVlOiBIZWFkZXJzKSB7XG4gICAgaWYgKCF0aGlzLiN3cml0YWJsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlc3BvbnNlIGlzIG5vdCB3cml0YWJsZS5cIik7XG4gICAgfVxuICAgIHRoaXMuI2hlYWRlcnMgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKiBUaGUgSFRUUCBzdGF0dXMgb2YgdGhlIHJlc3BvbnNlLiAgSWYgdGhpcyBoYXMgbm90IGJlZW4gZXhwbGljaXRseSBzZXQsXG4gICAqIHJlYWRpbmcgdGhlIHZhbHVlIHdpbGwgcmV0dXJuIHdoYXQgd291bGQgYmUgdGhlIHZhbHVlIG9mIHN0YXR1cyBpZiB0aGVcbiAgICogcmVzcG9uc2Ugd2VyZSBzZW50IGF0IHRoaXMgcG9pbnQgaW4gcHJvY2Vzc2luZyB0aGUgbWlkZGxld2FyZS4gIElmIHRoZSBib2R5XG4gICAqIGhhcyBiZWVuIHNldCwgdGhlIHN0YXR1cyB3aWxsIGJlIGAyMDAgT0tgLiAgSWYgYSB2YWx1ZSBmb3IgdGhlIGJvZHkgaGFzXG4gICAqIG5vdCBiZWVuIHNldCB5ZXQsIHRoZSBzdGF0dXMgd2lsbCBiZSBgNDA0IE5vdCBGb3VuZGAuICovXG4gIGdldCBzdGF0dXMoKTogU3RhdHVzIHtcbiAgICBpZiAodGhpcy4jc3RhdHVzKSB7XG4gICAgICByZXR1cm4gdGhpcy4jc3RhdHVzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ib2R5ICE9IG51bGxcbiAgICAgID8gU3RhdHVzLk9LXG4gICAgICA6IHRoaXMuI2JvZHlTZXRcbiAgICAgID8gU3RhdHVzLk5vQ29udGVudFxuICAgICAgOiBTdGF0dXMuTm90Rm91bmQ7XG4gIH1cblxuICAvKiogVGhlIEhUVFAgc3RhdHVzIG9mIHRoZSByZXNwb25zZS4gIElmIHRoaXMgaGFzIG5vdCBiZWVuIGV4cGxpY2l0bHkgc2V0LFxuICAgKiByZWFkaW5nIHRoZSB2YWx1ZSB3aWxsIHJldHVybiB3aGF0IHdvdWxkIGJlIHRoZSB2YWx1ZSBvZiBzdGF0dXMgaWYgdGhlXG4gICAqIHJlc3BvbnNlIHdlcmUgc2VudCBhdCB0aGlzIHBvaW50IGluIHByb2Nlc3NpbmcgdGhlIG1pZGRsZXdhcmUuICBJZiB0aGUgYm9keVxuICAgKiBoYXMgYmVlbiBzZXQsIHRoZSBzdGF0dXMgd2lsbCBiZSBgMjAwIE9LYC4gIElmIGEgdmFsdWUgZm9yIHRoZSBib2R5IGhhc1xuICAgKiBub3QgYmVlbiBzZXQgeWV0LCB0aGUgc3RhdHVzIHdpbGwgYmUgYDQwNCBOb3QgRm91bmRgLiAqL1xuICBzZXQgc3RhdHVzKHZhbHVlOiBTdGF0dXMpIHtcbiAgICBpZiAoIXRoaXMuI3dyaXRhYmxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcmVzcG9uc2UgaXMgbm90IHdyaXRhYmxlLlwiKTtcbiAgICB9XG4gICAgdGhpcy4jc3RhdHVzID0gdmFsdWU7XG4gIH1cblxuICAvKiogVGhlIG1lZGlhIHR5cGUsIG9yIGV4dGVuc2lvbiBvZiB0aGUgcmVzcG9uc2UuICBTZXR0aW5nIHRoaXMgdmFsdWUgd2lsbFxuICAgKiBlbnN1cmUgYW4gYXBwcm9wcmlhdGUgYENvbnRlbnQtVHlwZWAgaGVhZGVyIGlzIGFkZGVkIHRvIHRoZSByZXNwb25zZS4gKi9cbiAgZ2V0IHR5cGUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy4jdHlwZTtcbiAgfVxuICAvKiogVGhlIG1lZGlhIHR5cGUsIG9yIGV4dGVuc2lvbiBvZiB0aGUgcmVzcG9uc2UuICBTZXR0aW5nIHRoaXMgdmFsdWUgd2lsbFxuICAgKiBlbnN1cmUgYW4gYXBwcm9wcmlhdGUgYENvbnRlbnQtVHlwZWAgaGVhZGVyIGlzIGFkZGVkIHRvIHRoZSByZXNwb25zZS4gKi9cbiAgc2V0IHR5cGUodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIGlmICghdGhpcy4jd3JpdGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByZXNwb25zZSBpcyBub3Qgd3JpdGFibGUuXCIpO1xuICAgIH1cbiAgICB0aGlzLiN0eXBlID0gdmFsdWU7XG4gIH1cblxuICAvKiogQSByZWFkLW9ubHkgcHJvcGVydHkgd2hpY2ggZGV0ZXJtaW5lcyBpZiB0aGUgcmVzcG9uc2UgaXMgd3JpdGFibGUgb3Igbm90LlxuICAgKiBPbmNlIHRoZSByZXNwb25zZSBoYXMgYmVlbiBwcm9jZXNzZWQsIHRoaXMgdmFsdWUgaXMgc2V0IHRvIGBmYWxzZWAuICovXG4gIGdldCB3cml0YWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4jd3JpdGFibGU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gICAgdGhpcy4jcmVxdWVzdCA9IHJlcXVlc3Q7XG4gIH1cblxuICAvKiogQWRkIGEgcmVzb3VyY2UgdG8gdGhlIGxpc3Qgb2YgcmVzb3VyY2VzIHRoYXQgd2lsbCBiZSBjbG9zZWQgd2hlbiB0aGVcbiAgICogcmVxdWVzdCBpcyBkZXN0cm95ZWQuICovXG4gIGFkZFJlc291cmNlKHJpZDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy4jcmVzb3VyY2VzLnB1c2gocmlkKTtcbiAgfVxuXG4gIC8qKiBSZWxlYXNlIGFueSByZXNvdXJjZXMgdGhhdCBhcmUgYmVpbmcgdHJhY2tlZCBieSB0aGUgcmVzcG9uc2UuXG4gICAqXG4gICAqIEBwYXJhbSBjbG9zZVJlc291cmNlcyBjbG9zZSBhbnkgcmVzb3VyY2UgSURzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgcmVzcG9uc2VcbiAgICovXG4gIGRlc3Ryb3koY2xvc2VSZXNvdXJjZXMgPSB0cnVlKTogdm9pZCB7XG4gICAgdGhpcy4jd3JpdGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLiNib2R5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuI2RvbVJlc3BvbnNlID0gdW5kZWZpbmVkO1xuICAgIGlmIChjbG9zZVJlc291cmNlcykge1xuICAgICAgZm9yIChjb25zdCByaWQgb2YgdGhpcy4jcmVzb3VyY2VzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgRGVuby5jbG9zZShyaWQpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGVycm9ycyBoZXJlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogU2V0cyB0aGUgcmVzcG9uc2UgdG8gcmVkaXJlY3QgdG8gdGhlIHN1cHBsaWVkIGB1cmxgLlxuICAgKlxuICAgKiBJZiB0aGUgYC5zdGF0dXNgIGlzIG5vdCBjdXJyZW50bHkgYSByZWRpcmVjdCBzdGF0dXMsIHRoZSBzdGF0dXMgd2lsbCBiZSBzZXRcbiAgICogdG8gYDMwMiBGb3VuZGAuXG4gICAqXG4gICAqIFRoZSBib2R5IHdpbGwgYmUgc2V0IHRvIGEgbWVzc2FnZSBpbmRpY2F0aW5nIHRoZSByZWRpcmVjdGlvbiBpcyBvY2N1cnJpbmcuXG4gICAqL1xuICByZWRpcmVjdCh1cmw6IHN0cmluZyB8IFVSTCk6IHZvaWQ7XG4gIC8qKiBTZXRzIHRoZSByZXNwb25zZSB0byByZWRpcmVjdCBiYWNrIHRvIHRoZSByZWZlcnJlciBpZiBhdmFpbGFibGUsIHdpdGggYW5cbiAgICogb3B0aW9uYWwgYGFsdGAgVVJMIGlmIHRoZXJlIGlzIG5vIHJlZmVycmVyIGhlYWRlciBvbiB0aGUgcmVxdWVzdC4gIElmIHRoZXJlXG4gICAqIGlzIG5vIHJlZmVycmVyIGhlYWRlciwgbm9yIGFuIGBhbHRgIHBhcmFtZXRlciwgdGhlIHJlZGlyZWN0IGlzIHNldCB0byBgL2AuXG4gICAqXG4gICAqIElmIHRoZSBgLnN0YXR1c2AgaXMgbm90IGN1cnJlbnRseSBhIHJlZGlyZWN0IHN0YXR1cywgdGhlIHN0YXR1cyB3aWxsIGJlIHNldFxuICAgKiB0byBgMzAyIEZvdW5kYC5cbiAgICpcbiAgICogVGhlIGJvZHkgd2lsbCBiZSBzZXQgdG8gYSBtZXNzYWdlIGluZGljYXRpbmcgdGhlIHJlZGlyZWN0aW9uIGlzIG9jY3VycmluZy5cbiAgICovXG4gIHJlZGlyZWN0KHVybDogdHlwZW9mIFJFRElSRUNUX0JBQ0ssIGFsdD86IHN0cmluZyB8IFVSTCk6IHZvaWQ7XG4gIHJlZGlyZWN0KFxuICAgIHVybDogc3RyaW5nIHwgVVJMIHwgdHlwZW9mIFJFRElSRUNUX0JBQ0ssXG4gICAgYWx0OiBzdHJpbmcgfCBVUkwgPSBcIi9cIixcbiAgKTogdm9pZCB7XG4gICAgaWYgKHVybCA9PT0gUkVESVJFQ1RfQkFDSykge1xuICAgICAgdXJsID0gdGhpcy4jcmVxdWVzdC5oZWFkZXJzLmdldChcIlJlZmVyZXJcIikgPz8gU3RyaW5nKGFsdCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiKSB7XG4gICAgICB1cmwgPSBTdHJpbmcodXJsKTtcbiAgICB9XG4gICAgdGhpcy5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGVuY29kZVVybCh1cmwpKTtcbiAgICBpZiAoIXRoaXMuc3RhdHVzIHx8ICFpc1JlZGlyZWN0U3RhdHVzKHRoaXMuc3RhdHVzKSkge1xuICAgICAgdGhpcy5zdGF0dXMgPSBTdGF0dXMuRm91bmQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuI3JlcXVlc3QuYWNjZXB0cyhcImh0bWxcIikpIHtcbiAgICAgIHVybCA9IGVuY29kZVVSSSh1cmwpO1xuICAgICAgdGhpcy50eXBlID0gXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcIjtcbiAgICAgIHRoaXMuYm9keSA9IGBSZWRpcmVjdGluZyB0byA8YSBocmVmPVwiJHt1cmx9XCI+JHt1cmx9PC9hPi5gO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnR5cGUgPSBcInRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThcIjtcbiAgICB0aGlzLmJvZHkgPSBgUmVkaXJlY3RpbmcgdG8gJHt1cmx9LmA7XG4gIH1cblxuICBhc3luYyB0b0RvbVJlc3BvbnNlKCk6IFByb21pc2U8Z2xvYmFsVGhpcy5SZXNwb25zZT4ge1xuICAgIGlmICh0aGlzLiNkb21SZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHRoaXMuI2RvbVJlc3BvbnNlO1xuICAgIH1cblxuICAgIGNvbnN0IGJvZHlJbml0ID0gYXdhaXQgdGhpcy4jZ2V0Qm9keUluaXQoKTtcblxuICAgIHRoaXMuI3NldENvbnRlbnRUeXBlKCk7XG5cbiAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHRoaXM7XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyBib2R5IGFuZCBubyBjb250ZW50IHR5cGUgYW5kIG5vIHNldCBsZW5ndGgsIHRoZW4gc2V0IHRoZVxuICAgIC8vIGNvbnRlbnQgbGVuZ3RoIHRvIDBcbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICBib2R5SW5pdCB8fFxuICAgICAgICBoZWFkZXJzLmhhcyhcIkNvbnRlbnQtVHlwZVwiKSB8fFxuICAgICAgICBoZWFkZXJzLmhhcyhcIkNvbnRlbnQtTGVuZ3RoXCIpXG4gICAgICApXG4gICAgKSB7XG4gICAgICBoZWFkZXJzLmFwcGVuZChcIkNvbnRlbnQtTGVuZ3RoXCIsIFwiMFwiKTtcbiAgICB9XG5cbiAgICB0aGlzLiN3cml0YWJsZSA9IGZhbHNlO1xuXG4gICAgY29uc3Qgc3RhdHVzID0gdGhpcy5zdGF0dXM7XG4gICAgY29uc3QgcmVzcG9uc2VJbml0OiBSZXNwb25zZUluaXQgPSB7XG4gICAgICBoZWFkZXJzLFxuICAgICAgc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogU1RBVFVTX1RFWFQuZ2V0KHN0YXR1cyksXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLiNkb21SZXNwb25zZSA9IG5ldyBEb21SZXNwb25zZShib2R5SW5pdCwgcmVzcG9uc2VJbml0KTtcbiAgfVxuXG4gIFtTeW1ib2wuZm9yKFwiRGVuby5jdXN0b21JbnNwZWN0XCIpXShpbnNwZWN0OiAodmFsdWU6IHVua25vd24pID0+IHN0cmluZykge1xuICAgIGNvbnN0IHsgYm9keSwgaGVhZGVycywgc3RhdHVzLCB0eXBlLCB3cml0YWJsZSB9ID0gdGhpcztcbiAgICByZXR1cm4gYFJlc3BvbnNlICR7aW5zcGVjdCh7IGJvZHksIGhlYWRlcnMsIHN0YXR1cywgdHlwZSwgd3JpdGFibGUgfSl9YDtcbiAgfVxufVxuIl19